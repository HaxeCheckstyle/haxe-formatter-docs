// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	matchedPos() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	matchSub(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	map(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
}
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
	,r: null
});
class HxOverrides {
	static cca(s,index) {
		var x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		var i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
}
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
class json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		this.errors = errors;
		this.putils = putils;
		this.errorType = errorType;
	}
	fromJson(jsonString,filename) {
		if(filename == null) {
			filename = "";
		}
		this.putils = new json2object_PositionUtils(jsonString);
		this.errors = [];
		try {
			var json = new hxjsonast_Parser(jsonString,filename).parseRec();
			this.loadJson(json);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof hxjsonast_Error)) {
				var e2 = e1;
				this.errors.push(json2object_Error.ParserError(e2.message,this.putils.convertPosition(e2.pos)));
			} else {
				throw e;
			}
		}
		return this.value;
	}
	loadJson(json,variable) {
		if(variable == null) {
			variable = "";
		}
		var pos = this.putils.convertPosition(json.pos);
		var _g = json.value;
		switch(_g._hx_index) {
		case 0:
			var s = _g.s;
			this.loadJsonString(s,pos,variable);
			break;
		case 1:
			var n = _g.s;
			this.loadJsonNumber(n,pos,variable);
			break;
		case 2:
			var o = _g.fields;
			this.loadJsonObject(o,pos,variable);
			break;
		case 3:
			var a = _g.values;
			this.loadJsonArray(a,pos,variable);
			break;
		case 4:
			var b = _g.b;
			this.loadJsonBool(b,pos,variable);
			break;
		case 5:
			this.loadJsonNull(pos,variable);
			break;
		}
		return this.value;
	}
	loadJsonNull(pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadJsonString(s,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadString(s,pos,variable,validValues,defaultValue) {
		if(validValues.indexOf(s) != -1) {
			return s;
		}
		this.onIncorrectType(pos,variable);
		return defaultValue;
	}
	loadJsonNumber(f,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadJsonInt(f,pos,variable,value) {
		if(Std.parseInt(f) != null && Std.parseInt(f) == parseFloat(f)) {
			return Std.parseInt(f);
		}
		this.onIncorrectType(pos,variable);
		return value;
	}
	loadJsonBool(b,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadJsonArray(a,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadJsonArrayValue(a,loadJsonFn,variable) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < a.length) {
			var j = a[_g1];
			++_g1;
			var tmp;
			try {
				tmp = loadJsonFn(j,variable);
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				var _1 = ((_) instanceof js__$Boot_HaxeError) ? _.val : _;
				if(typeof(_1) == "string") {
					var _2 = _1;
					continue;
				} else {
					throw _;
				}
			}
			_g.push(tmp);
		}
		return _g;
	}
	loadJsonObject(o,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	loadObjectField(loadJsonFn,field,name,assigned,defaultValue) {
		try {
			var ret = loadJsonFn(field.value,field.name);
			this.mapSet(assigned,name,true);
			return ret;
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = ((_) instanceof js__$Boot_HaxeError) ? _.val : _;
		}
		return defaultValue;
	}
	objectSetupAssign(assigned,keys,values) {
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			this.mapSet(assigned,keys[i],values[i]);
		}
	}
	objectErrors(assigned,pos) {
		var lastPos = this.putils.convertPosition(new hxjsonast_Position(pos.file,pos.max - 1,pos.max - 1));
		var s = assigned.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			if(!(__map_reserved[s1] != null ? assigned.getReserved(s1) : assigned.h[s1])) {
				this.errors.push(json2object_Error.UninitializedVariable(s1,lastPos));
			}
		}
	}
	onIncorrectType(pos,variable) {
		this.parsingThrow();
	}
	parsingThrow() {
		if(this.errorType != 0) {
			throw new js__$Boot_HaxeError("json2object: parsing throw");
		}
	}
	objectThrow(pos,variable) {
		if(this.errorType == 2) {
			throw new js__$Boot_HaxeError("json2object: parsing throw");
		} else if(this.errorType == 1) {
			this.errors.push(json2object_Error.UninitializedVariable(variable,pos));
		}
	}
	mapSet(map,key,value) {
		if(__map_reserved[key] != null) {
			map.setReserved(key,value);
		} else {
			map.h[key] = value;
		}
	}
}
$hxClasses["json2object.reader.BaseParser"] = json2object_reader_BaseParser;
json2object_reader_BaseParser.__name__ = "json2object.reader.BaseParser";
Object.assign(json2object_reader_BaseParser.prototype, {
	__class__: json2object_reader_BaseParser
	,value: null
	,errors: null
	,errorType: null
	,putils: null
});
class JsonParser_$1 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?wrapping : Null<formatter.config.WrapConfig>, ?whitespace : Null<formatter.config.WhitespaceConfig>, ?sameLine : Null<formatter.config.SameLineConfig>, ?lineEnds : Null<formatter.config.LineEndConfig>, ?indentation : Null<formatter.config.IndentationConfig>, ?excludes : Null<Array<String>>, ?emptyLines : Null<formatter.config.EmptyLinesConfig>, ?disableFormatting : Null<Bool> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["disableFormatting","emptyLines","excludes","indentation","lineEnds","sameLine","whitespace","wrapping"],[true,true,true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "disableFormatting":
				this.value.disableFormatting = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"disableFormatting",assigned,this.value.disableFormatting);
				break;
			case "emptyLines":
				this.value.emptyLines = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"emptyLines",assigned,this.value.emptyLines);
				break;
			case "excludes":
				this.value.excludes = this.loadObjectField(($_=new JsonParser_$66(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"excludes",assigned,this.value.excludes);
				break;
			case "indentation":
				this.value.indentation = this.loadObjectField(($_=new JsonParser_$33(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"indentation",assigned,this.value.indentation);
				break;
			case "lineEnds":
				this.value.lineEnds = this.loadObjectField(($_=new JsonParser_$36(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"lineEnds",assigned,this.value.lineEnds);
				break;
			case "sameLine":
				this.value.sameLine = this.loadObjectField(($_=new JsonParser_$39(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"sameLine",assigned,this.value.sameLine);
				break;
			case "whitespace":
				this.value.whitespace = this.loadObjectField(($_=new JsonParser_$42(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"whitespace",assigned,this.value.whitespace);
				break;
			case "wrapping":
				this.value.wrapping = this.loadObjectField(($_=new JsonParser_$60(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"wrapping",assigned,this.value.wrapping);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { disableFormatting : false, emptyLines : new JsonParser_$4([],this.putils,0).getAuto(), excludes : ["\\.haxelib","\\.git","node_modules"], indentation : new JsonParser_$33([],this.putils,0).getAuto(), lineEnds : new JsonParser_$36([],this.putils,0).getAuto(), sameLine : new JsonParser_$39([],this.putils,0).getAuto(), whitespace : new JsonParser_$42([],this.putils,0).getAuto(), wrapping : new JsonParser_$60([],this.putils,0).getAuto()};
	}
}
$hxClasses["JsonParser_1"] = JsonParser_$1;
JsonParser_$1.__name__ = "JsonParser_1";
JsonParser_$1.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$1.prototype, {
	__class__: JsonParser_$1
});
class JsonParser_$112 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "beforeLast";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.WrappingLocation",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["beforeLast","afterLast"],"beforeLast");
	}
}
$hxClasses["JsonParser_112"] = JsonParser_$112;
JsonParser_$112.__name__ = "JsonParser_112";
JsonParser_$112.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$112.prototype, {
	__class__: JsonParser_$112
});
class JsonParser_$114 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "onePerLine";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.WrappingType",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["onePerLine","onePerLineAfterFirst","equalNumber","fillLine","fillLineWithLeadingBreak","noWrap","keep"],"onePerLine");
	}
}
$hxClasses["JsonParser_114"] = JsonParser_$114;
JsonParser_$114.__name__ = "JsonParser_114";
JsonParser_$114.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$114.prototype, {
	__class__: JsonParser_$114
});
class JsonParser_$116 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<formatter.config.WrapRule>",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonArray(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$118(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
}
$hxClasses["JsonParser_116"] = JsonParser_$116;
JsonParser_$116.__name__ = "JsonParser_116";
JsonParser_$116.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$116.prototype, {
	__class__: JsonParser_$116
});
class JsonParser_$118 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ type : formatter.config.WrappingType, ?location : Null<formatter.config.WrappingLocation>, conditions : Array<formatter.config.WrapCondition>, ?additionalIndent : Null<Int> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["additionalIndent","conditions","location","type"],[true,false,true,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "additionalIndent":
				this.value.additionalIndent = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"additionalIndent",assigned,this.value.additionalIndent);
				break;
			case "conditions":
				this.value.conditions = this.loadObjectField(($_=new JsonParser_$119(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"conditions",assigned,this.value.conditions);
				break;
			case "location":
				this.value.location = this.loadObjectField(($_=new JsonParser_$112(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"location",assigned,this.value.location);
				break;
			case "type":
				this.value.type = this.loadObjectField(($_=new JsonParser_$120(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"type",assigned,this.value.type);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { additionalIndent : 0, conditions : new JsonParser_$119([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), location : "afterLast", type : new JsonParser_$120([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
}
$hxClasses["JsonParser_118"] = JsonParser_$118;
JsonParser_$118.__name__ = "JsonParser_118";
JsonParser_$118.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$118.prototype, {
	__class__: JsonParser_$118
});
class JsonParser_$119 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<formatter.config.WrapCondition>",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonArray(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$122(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
}
$hxClasses["JsonParser_119"] = JsonParser_$119;
JsonParser_$119.__name__ = "JsonParser_119";
JsonParser_$119.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$119.prototype, {
	__class__: JsonParser_$119
});
class JsonParser_$12 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?beforeError : Null<Int>, ?beforeEnd : Null<Int>, ?beforeElse : Null<Int>, ?afterIf : Null<Int>, ?afterError : Null<Int>, ?afterElse : Null<Int> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["afterElse","afterError","afterIf","beforeElse","beforeEnd","beforeError"],[true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "afterElse":
				this.value.afterElse = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterElse",assigned,this.value.afterElse);
				break;
			case "afterError":
				this.value.afterError = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterError",assigned,this.value.afterError);
				break;
			case "afterIf":
				this.value.afterIf = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterIf",assigned,this.value.afterIf);
				break;
			case "beforeElse":
				this.value.beforeElse = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beforeElse",assigned,this.value.beforeElse);
				break;
			case "beforeEnd":
				this.value.beforeEnd = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beforeEnd",assigned,this.value.beforeEnd);
				break;
			case "beforeError":
				this.value.beforeError = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beforeError",assigned,this.value.beforeError);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { afterElse : 0, afterError : 0, afterIf : 0, beforeElse : 0, beforeEnd : 0, beforeError : 0};
	}
}
$hxClasses["JsonParser_12"] = JsonParser_$12;
JsonParser_$12.__name__ = "JsonParser_12";
JsonParser_$12.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$12.prototype, {
	__class__: JsonParser_$12
});
class JsonParser_$120 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "onePerLine";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.WrappingType",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["onePerLine","onePerLineAfterFirst","equalNumber","fillLine","fillLineWithLeadingBreak","noWrap","keep"],"onePerLine");
	}
}
$hxClasses["JsonParser_120"] = JsonParser_$120;
JsonParser_$120.__name__ = "JsonParser_120";
JsonParser_$120.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$120.prototype, {
	__class__: JsonParser_$120
});
class JsonParser_$122 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?value : Null<Int>, cond : formatter.config.WrapConditionType }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["cond","value"],[false,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "cond":
				this.value.cond = this.loadObjectField(($_=new JsonParser_$123(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"cond",assigned,this.value.cond);
				break;
			case "value":
				this.value.value = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"value",assigned,this.value.value);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { cond : new JsonParser_$123([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), value : 1};
	}
}
$hxClasses["JsonParser_122"] = JsonParser_$122;
JsonParser_$122.__name__ = "JsonParser_122";
JsonParser_$122.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$122.prototype, {
	__class__: JsonParser_$122
});
class JsonParser_$123 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "itemCount >= n";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.WrapConditionType",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["itemCount >= n","itemCount <= n","anyItemLength >= n","anyItemLength <= n","totalItemLength >= n","totalItemLength <= n","lineLength >= n","lineLength <= n","hasMultilineItems","exceedsMaxLineLength"],"itemCount >= n");
	}
}
$hxClasses["JsonParser_123"] = JsonParser_$123;
JsonParser_$123.__name__ = "JsonParser_123";
JsonParser_$123.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$123.prototype, {
	__class__: JsonParser_$123
});
class JsonParser_$125 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "none";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.WhitespacePolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["none","before","noneBefore","onlyBefore","after","onlyAfter","noneAfter","around"],"none");
	}
}
$hxClasses["JsonParser_125"] = JsonParser_$125;
JsonParser_$125.__name__ = "JsonParser_125";
JsonParser_$125.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$125.prototype, {
	__class__: JsonParser_$125
});
class JsonParser_$15 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?existingBetweenFields : Null<formatter.config.KeepEmptyLinesPolicy>, ?endType : Null<Int>, ?betweenVars : Null<Int>, ?betweenFunctions : Null<Int>, ?beginType : Null<Int>, ?afterVars : Null<Int> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["afterVars","beginType","betweenFunctions","betweenVars","endType","existingBetweenFields"],[true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "afterVars":
				this.value.afterVars = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterVars",assigned,this.value.afterVars);
				break;
			case "beginType":
				this.value.beginType = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beginType",assigned,this.value.beginType);
				break;
			case "betweenFunctions":
				this.value.betweenFunctions = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenFunctions",assigned,this.value.betweenFunctions);
				break;
			case "betweenVars":
				this.value.betweenVars = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenVars",assigned,this.value.betweenVars);
				break;
			case "endType":
				this.value.endType = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"endType",assigned,this.value.endType);
				break;
			case "existingBetweenFields":
				this.value.existingBetweenFields = this.loadObjectField(($_=new JsonParser_$196(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"existingBetweenFields",assigned,this.value.existingBetweenFields);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { afterVars : 1, beginType : 0, betweenFunctions : 1, betweenVars : 0, endType : 0, existingBetweenFields : "keep"};
	}
}
$hxClasses["JsonParser_15"] = JsonParser_$15;
JsonParser_$15.__name__ = "JsonParser_15";
JsonParser_$15.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$15.prototype, {
	__class__: JsonParser_$15
});
class JsonParser_$165 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "same";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.SameLinePolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["same","next","keep"],"same");
	}
}
$hxClasses["JsonParser_165"] = JsonParser_$165;
JsonParser_$165.__name__ = "JsonParser_165";
JsonParser_$165.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$165.prototype, {
	__class__: JsonParser_$165
});
class JsonParser_$168 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?rightCurly : Null<formatter.config.RightCurlyLineEndPolicy>, ?leftCurly : Null<formatter.config.LeftCurlyLineEndPolicy>, ?emptyCurly : Null<formatter.config.EmptyCurlyPolicy> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["emptyCurly","leftCurly","rightCurly"],[true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "emptyCurly":
				this.value.emptyCurly = this.loadObjectField(($_=new JsonParser_$176(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"emptyCurly",assigned,this.value.emptyCurly);
				break;
			case "leftCurly":
				this.value.leftCurly = this.loadObjectField(($_=new JsonParser_$178(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"leftCurly",assigned,this.value.leftCurly);
				break;
			case "rightCurly":
				this.value.rightCurly = this.loadObjectField(($_=new JsonParser_$184(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"rightCurly",assigned,this.value.rightCurly);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { emptyCurly : "noBreak", leftCurly : "after", rightCurly : "both"};
	}
}
$hxClasses["JsonParser_168"] = JsonParser_$168;
JsonParser_$168.__name__ = "JsonParser_168";
JsonParser_$168.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$168.prototype, {
	__class__: JsonParser_$168
});
class JsonParser_$174 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "none";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.CaseColonLineEndPolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["none","after"],"none");
	}
}
$hxClasses["JsonParser_174"] = JsonParser_$174;
JsonParser_$174.__name__ = "JsonParser_174";
JsonParser_$174.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$174.prototype, {
	__class__: JsonParser_$174
});
class JsonParser_$176 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "noBreak";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.EmptyCurlyPolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["noBreak","break"],"noBreak");
	}
}
$hxClasses["JsonParser_176"] = JsonParser_$176;
JsonParser_$176.__name__ = "JsonParser_176";
JsonParser_$176.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$176.prototype, {
	__class__: JsonParser_$176
});
class JsonParser_$178 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "none";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.LeftCurlyLineEndPolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["none","after","before","both"],"none");
	}
}
$hxClasses["JsonParser_178"] = JsonParser_$178;
JsonParser_$178.__name__ = "JsonParser_178";
JsonParser_$178.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$178.prototype, {
	__class__: JsonParser_$178
});
class JsonParser_$18 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?existingBetweenFields : Null<formatter.config.KeepEmptyLinesPolicy>, ?endType : Null<Int>, ?betweenFields : Null<Int>, ?beginType : Null<Int> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["beginType","betweenFields","endType","existingBetweenFields"],[true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "beginType":
				this.value.beginType = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beginType",assigned,this.value.beginType);
				break;
			case "betweenFields":
				this.value.betweenFields = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenFields",assigned,this.value.betweenFields);
				break;
			case "endType":
				this.value.endType = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"endType",assigned,this.value.endType);
				break;
			case "existingBetweenFields":
				this.value.existingBetweenFields = this.loadObjectField(($_=new JsonParser_$196(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"existingBetweenFields",assigned,this.value.existingBetweenFields);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { beginType : 0, betweenFields : 0, endType : 0, existingBetweenFields : "keep"};
	}
}
$hxClasses["JsonParser_18"] = JsonParser_$18;
JsonParser_$18.__name__ = "JsonParser_18";
JsonParser_$18.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$18.prototype, {
	__class__: JsonParser_$18
});
class JsonParser_$180 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "none";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.AtLineEndPolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["none","after","afterLast","forceAfterLast"],"none");
	}
}
$hxClasses["JsonParser_180"] = JsonParser_$180;
JsonParser_$180.__name__ = "JsonParser_180";
JsonParser_$180.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$180.prototype, {
	__class__: JsonParser_$180
});
class JsonParser_$184 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "none";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.RightCurlyLineEndPolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["none","before","after","both"],"none");
	}
}
$hxClasses["JsonParser_184"] = JsonParser_$184;
JsonParser_$184.__name__ = "JsonParser_184";
JsonParser_$184.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$184.prototype, {
	__class__: JsonParser_$184
});
class JsonParser_$186 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "none";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.SharpLineEndPolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["none","after"],"none");
	}
}
$hxClasses["JsonParser_186"] = JsonParser_$186;
JsonParser_$186.__name__ = "JsonParser_186";
JsonParser_$186.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$186.prototype, {
	__class__: JsonParser_$186
});
class JsonParser_$190 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"String",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = s;
	}
}
$hxClasses["JsonParser_190"] = JsonParser_$190;
JsonParser_$190.__name__ = "JsonParser_190";
JsonParser_$190.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$190.prototype, {
	__class__: JsonParser_$190
});
class JsonParser_$192 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "fixedZero";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.ConditionalIndentationPolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["fixedZero","fixedZeroIncrease","fixedZeroIncreaseBlocks","aligned","alignedNestedIncrease","alignedIncrease","alignedDecrease"],"fixedZero");
	}
}
$hxClasses["JsonParser_192"] = JsonParser_$192;
JsonParser_$192.__name__ = "JsonParser_192";
JsonParser_$192.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$192.prototype, {
	__class__: JsonParser_$192
});
class JsonParser_$194 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "all";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.BetweenImportsEmptyLinesLevel",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["all","firstLevelPackage","secondLevelPackage","thirdLevelPackage","fourthLevelPackage","fifthLevelPackage","fullPackage"],"all");
	}
}
$hxClasses["JsonParser_194"] = JsonParser_$194;
JsonParser_$194.__name__ = "JsonParser_194";
JsonParser_$194.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$194.prototype, {
	__class__: JsonParser_$194
});
class JsonParser_$196 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "keep";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.KeepEmptyLinesPolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["keep","remove"],"keep");
	}
}
$hxClasses["JsonParser_196"] = JsonParser_$196;
JsonParser_$196.__name__ = "JsonParser_196";
JsonParser_$196.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$196.prototype, {
	__class__: JsonParser_$196
});
class JsonParser_$200 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "ignore";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.CommentEmptyLinesPolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["ignore","none","one"],"ignore");
	}
}
$hxClasses["JsonParser_200"] = JsonParser_$200;
JsonParser_$200.__name__ = "JsonParser_200";
JsonParser_$200.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$200.prototype, {
	__class__: JsonParser_$200
});
class JsonParser_$21 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?existingBetweenFields : Null<formatter.config.KeepEmptyLinesPolicy>, ?endType : Null<Int>, ?betweenVars : Null<Int>, ?betweenFunctions : Null<Int>, ?beginType : Null<Int>, ?afterVars : Null<Int> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["afterVars","beginType","betweenFunctions","betweenVars","endType","existingBetweenFields"],[true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "afterVars":
				this.value.afterVars = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterVars",assigned,this.value.afterVars);
				break;
			case "beginType":
				this.value.beginType = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beginType",assigned,this.value.beginType);
				break;
			case "betweenFunctions":
				this.value.betweenFunctions = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenFunctions",assigned,this.value.betweenFunctions);
				break;
			case "betweenVars":
				this.value.betweenVars = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenVars",assigned,this.value.betweenVars);
				break;
			case "endType":
				this.value.endType = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"endType",assigned,this.value.endType);
				break;
			case "existingBetweenFields":
				this.value.existingBetweenFields = this.loadObjectField(($_=new JsonParser_$196(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"existingBetweenFields",assigned,this.value.existingBetweenFields);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { afterVars : 0, beginType : 0, betweenFunctions : 0, betweenVars : 0, endType : 0, existingBetweenFields : "keep"};
	}
}
$hxClasses["JsonParser_21"] = JsonParser_$21;
JsonParser_$21.__name__ = "JsonParser_21";
JsonParser_$21.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$21.prototype, {
	__class__: JsonParser_$21
});
class JsonParser_$216 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "keep";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.LineCommentEmptyLinePolicy",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["keep","one","none"],"keep");
	}
}
$hxClasses["JsonParser_216"] = JsonParser_$216;
JsonParser_$216.__name__ = "JsonParser_216";
JsonParser_$216.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$216.prototype, {
	__class__: JsonParser_$216
});
class JsonParser_$24 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?betweenImportsLevel : Null<formatter.config.BetweenImportsEmptyLinesLevel>, ?betweenImports : Null<Int>, ?beforeUsing : Null<Int>, ?beforeType : Null<Int> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["beforeType","beforeUsing","betweenImports","betweenImportsLevel"],[true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "beforeType":
				this.value.beforeType = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beforeType",assigned,this.value.beforeType);
				break;
			case "beforeUsing":
				this.value.beforeUsing = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beforeUsing",assigned,this.value.beforeUsing);
				break;
			case "betweenImports":
				this.value.betweenImports = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenImports",assigned,this.value.betweenImports);
				break;
			case "betweenImportsLevel":
				this.value.betweenImportsLevel = this.loadObjectField(($_=new JsonParser_$194(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenImportsLevel",assigned,this.value.betweenImportsLevel);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { beforeType : 1, beforeUsing : 1, betweenImports : 0, betweenImportsLevel : "all"};
	}
}
$hxClasses["JsonParser_24"] = JsonParser_$24;
JsonParser_$24.__name__ = "JsonParser_24";
JsonParser_$24.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$24.prototype, {
	__class__: JsonParser_$24
});
class JsonParser_$33 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?trailingWhitespace : Null<Bool>, ?tabWidth : Null<Int>, ?indentObjectLiteral : Null<Bool>, ?indentComplexValueExpressions : Null<Bool>, ?indentCaseLabels : Null<Bool>, ?conditionalPolicy : Null<formatter.config.ConditionalIndentationPolicy>, ?character : Null<String> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["character","conditionalPolicy","indentCaseLabels","indentComplexValueExpressions","indentObjectLiteral","tabWidth","trailingWhitespace"],[true,true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "character":
				this.value.character = this.loadObjectField(($_=new JsonParser_$190(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"character",assigned,this.value.character);
				break;
			case "conditionalPolicy":
				this.value.conditionalPolicy = this.loadObjectField(($_=new JsonParser_$192(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"conditionalPolicy",assigned,this.value.conditionalPolicy);
				break;
			case "indentCaseLabels":
				this.value.indentCaseLabels = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"indentCaseLabels",assigned,this.value.indentCaseLabels);
				break;
			case "indentComplexValueExpressions":
				this.value.indentComplexValueExpressions = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"indentComplexValueExpressions",assigned,this.value.indentComplexValueExpressions);
				break;
			case "indentObjectLiteral":
				this.value.indentObjectLiteral = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"indentObjectLiteral",assigned,this.value.indentObjectLiteral);
				break;
			case "tabWidth":
				this.value.tabWidth = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"tabWidth",assigned,this.value.tabWidth);
				break;
			case "trailingWhitespace":
				this.value.trailingWhitespace = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"trailingWhitespace",assigned,this.value.trailingWhitespace);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { character : "tab", conditionalPolicy : "aligned", indentCaseLabels : true, indentComplexValueExpressions : false, indentObjectLiteral : true, tabWidth : 4, trailingWhitespace : false};
	}
}
$hxClasses["JsonParser_33"] = JsonParser_$33;
JsonParser_$33.__name__ = "JsonParser_33";
JsonParser_$33.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$33.prototype, {
	__class__: JsonParser_$33
});
class JsonParser_$36 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?typedefCurly : Null<formatter.config.CurlyLineEndPolicy>, ?sharp : Null<formatter.config.SharpLineEndPolicy>, ?rightCurly : Null<formatter.config.RightCurlyLineEndPolicy>, ?objectLiteralCurly : Null<formatter.config.CurlyLineEndPolicy>, ?metadataVar : Null<formatter.config.AtLineEndPolicy>, ?metadataType : Null<formatter.config.AtLineEndPolicy>, ?metadataOther : Null<formatter.config.AtLineEndPolicy>, ?metadataFunction : Null<formatter.config.AtLineEndPolicy>, ?leftCurly : Null<formatter.config.LeftCurlyLineEndPolicy>, ?emptyCurly : Null<formatter.config.EmptyCurlyPolicy>, ?caseColon : Null<formatter.config.CaseColonLineEndPolicy>, ?blockCurly : Null<formatter.config.CurlyLineEndPolicy>, ?anonTypeCurly : Null<formatter.config.CurlyLineEndPolicy>, ?anonFunctionCurly : Null<formatter.config.CurlyLineEndPolicy> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["anonFunctionCurly","anonTypeCurly","blockCurly","caseColon","emptyCurly","leftCurly","metadataFunction","metadataOther","metadataType","metadataVar","objectLiteralCurly","rightCurly","sharp","typedefCurly"],[true,true,true,true,true,true,true,true,true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "anonFunctionCurly":
				this.value.anonFunctionCurly = this.loadObjectField(($_=new JsonParser_$168(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"anonFunctionCurly",assigned,this.value.anonFunctionCurly);
				break;
			case "anonTypeCurly":
				this.value.anonTypeCurly = this.loadObjectField(($_=new JsonParser_$168(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"anonTypeCurly",assigned,this.value.anonTypeCurly);
				break;
			case "blockCurly":
				this.value.blockCurly = this.loadObjectField(($_=new JsonParser_$168(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"blockCurly",assigned,this.value.blockCurly);
				break;
			case "caseColon":
				this.value.caseColon = this.loadObjectField(($_=new JsonParser_$174(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"caseColon",assigned,this.value.caseColon);
				break;
			case "emptyCurly":
				this.value.emptyCurly = this.loadObjectField(($_=new JsonParser_$176(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"emptyCurly",assigned,this.value.emptyCurly);
				break;
			case "leftCurly":
				this.value.leftCurly = this.loadObjectField(($_=new JsonParser_$178(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"leftCurly",assigned,this.value.leftCurly);
				break;
			case "metadataFunction":
				this.value.metadataFunction = this.loadObjectField(($_=new JsonParser_$180(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"metadataFunction",assigned,this.value.metadataFunction);
				break;
			case "metadataOther":
				this.value.metadataOther = this.loadObjectField(($_=new JsonParser_$180(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"metadataOther",assigned,this.value.metadataOther);
				break;
			case "metadataType":
				this.value.metadataType = this.loadObjectField(($_=new JsonParser_$180(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"metadataType",assigned,this.value.metadataType);
				break;
			case "metadataVar":
				this.value.metadataVar = this.loadObjectField(($_=new JsonParser_$180(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"metadataVar",assigned,this.value.metadataVar);
				break;
			case "objectLiteralCurly":
				this.value.objectLiteralCurly = this.loadObjectField(($_=new JsonParser_$168(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"objectLiteralCurly",assigned,this.value.objectLiteralCurly);
				break;
			case "rightCurly":
				this.value.rightCurly = this.loadObjectField(($_=new JsonParser_$184(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"rightCurly",assigned,this.value.rightCurly);
				break;
			case "sharp":
				this.value.sharp = this.loadObjectField(($_=new JsonParser_$186(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"sharp",assigned,this.value.sharp);
				break;
			case "typedefCurly":
				this.value.typedefCurly = this.loadObjectField(($_=new JsonParser_$168(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"typedefCurly",assigned,this.value.typedefCurly);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { anonFunctionCurly : null, anonTypeCurly : null, blockCurly : null, caseColon : "after", emptyCurly : "noBreak", leftCurly : "after", metadataFunction : "none", metadataOther : "none", metadataType : "none", metadataVar : "none", objectLiteralCurly : null, rightCurly : "both", sharp : "after", typedefCurly : null};
	}
}
$hxClasses["JsonParser_36"] = JsonParser_$36;
JsonParser_$36.__name__ = "JsonParser_36";
JsonParser_$36.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$36.prototype, {
	__class__: JsonParser_$36
});
class JsonParser_$39 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?whileBody : Null<formatter.config.SameLinePolicy>, ?untypedBody : Null<formatter.config.SameLinePolicy>, ?tryCatch : Null<formatter.config.SameLinePolicy>, ?tryBody : Null<formatter.config.SameLinePolicy>, ?returnBodySingleLine : Null<formatter.config.SameLinePolicy>, ?returnBody : Null<formatter.config.SameLinePolicy>, ?ifElse : Null<formatter.config.SameLinePolicy>, ?ifBody : Null<formatter.config.SameLinePolicy>, ?functionBody : Null<formatter.config.SameLinePolicy>, ?forBody : Null<formatter.config.SameLinePolicy>, ?expressionTry : Null<formatter.config.SameLinePolicy>, ?expressionIfWithBlocks : Null<Bool>, ?expressionIf : Null<formatter.config.SameLinePolicy>, ?expressionCase : Null<formatter.config.SameLinePolicy>, ?elseIf : Null<formatter.config.SameLinePolicy>, ?elseBody : Null<formatter.config.SameLinePolicy>, ?doWhileBody : Null<formatter.config.SameLinePolicy>, ?doWhile : Null<formatter.config.SameLinePolicy>, ?comprehensionFor : Null<formatter.config.SameLinePolicy>, ?catchBody : Null<formatter.config.SameLinePolicy>, ?caseBody : Null<formatter.config.SameLinePolicy>, ?anonFunctionBody : Null<formatter.config.SameLinePolicy> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["anonFunctionBody","caseBody","catchBody","comprehensionFor","doWhile","doWhileBody","elseBody","elseIf","expressionCase","expressionIf","expressionIfWithBlocks","expressionTry","forBody","functionBody","ifBody","ifElse","returnBody","returnBodySingleLine","tryBody","tryCatch","untypedBody","whileBody"],[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "anonFunctionBody":
				this.value.anonFunctionBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"anonFunctionBody",assigned,this.value.anonFunctionBody);
				break;
			case "caseBody":
				this.value.caseBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"caseBody",assigned,this.value.caseBody);
				break;
			case "catchBody":
				this.value.catchBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"catchBody",assigned,this.value.catchBody);
				break;
			case "comprehensionFor":
				this.value.comprehensionFor = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"comprehensionFor",assigned,this.value.comprehensionFor);
				break;
			case "doWhile":
				this.value.doWhile = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"doWhile",assigned,this.value.doWhile);
				break;
			case "doWhileBody":
				this.value.doWhileBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"doWhileBody",assigned,this.value.doWhileBody);
				break;
			case "elseBody":
				this.value.elseBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"elseBody",assigned,this.value.elseBody);
				break;
			case "elseIf":
				this.value.elseIf = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"elseIf",assigned,this.value.elseIf);
				break;
			case "expressionCase":
				this.value.expressionCase = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"expressionCase",assigned,this.value.expressionCase);
				break;
			case "expressionIf":
				this.value.expressionIf = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"expressionIf",assigned,this.value.expressionIf);
				break;
			case "expressionIfWithBlocks":
				this.value.expressionIfWithBlocks = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"expressionIfWithBlocks",assigned,this.value.expressionIfWithBlocks);
				break;
			case "expressionTry":
				this.value.expressionTry = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"expressionTry",assigned,this.value.expressionTry);
				break;
			case "forBody":
				this.value.forBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"forBody",assigned,this.value.forBody);
				break;
			case "functionBody":
				this.value.functionBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"functionBody",assigned,this.value.functionBody);
				break;
			case "ifBody":
				this.value.ifBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"ifBody",assigned,this.value.ifBody);
				break;
			case "ifElse":
				this.value.ifElse = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"ifElse",assigned,this.value.ifElse);
				break;
			case "returnBody":
				this.value.returnBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"returnBody",assigned,this.value.returnBody);
				break;
			case "returnBodySingleLine":
				this.value.returnBodySingleLine = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"returnBodySingleLine",assigned,this.value.returnBodySingleLine);
				break;
			case "tryBody":
				this.value.tryBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"tryBody",assigned,this.value.tryBody);
				break;
			case "tryCatch":
				this.value.tryCatch = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"tryCatch",assigned,this.value.tryCatch);
				break;
			case "untypedBody":
				this.value.untypedBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"untypedBody",assigned,this.value.untypedBody);
				break;
			case "whileBody":
				this.value.whileBody = this.loadObjectField(($_=new JsonParser_$165(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"whileBody",assigned,this.value.whileBody);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { anonFunctionBody : "same", caseBody : "next", catchBody : "next", comprehensionFor : "same", doWhile : "same", doWhileBody : "next", elseBody : "next", elseIf : "same", expressionCase : "keep", expressionIf : "same", expressionIfWithBlocks : false, expressionTry : "same", forBody : "next", functionBody : "next", ifBody : "next", ifElse : "same", returnBody : "same", returnBodySingleLine : "same", tryBody : "next", tryCatch : "same", untypedBody : "same", whileBody : "next"};
	}
}
$hxClasses["JsonParser_39"] = JsonParser_$39;
JsonParser_$39.__name__ = "JsonParser_39";
JsonParser_$39.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$39.prototype, {
	__class__: JsonParser_$39
});
class JsonParser_$4 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?typedefEmptyLines : Null<formatter.config.TypedefFieldsEmptyLinesConfig>, ?maxAnywhereInFile : Null<Int>, ?macroClassEmptyLines : Null<formatter.config.ClassFieldsEmptyLinesConfig>, ?lineCommentsBetweenTypes : Null<formatter.config.LineCommentEmptyLinePolicy>, ?lineCommentsBetweenFunctions : Null<formatter.config.LineCommentEmptyLinePolicy>, ?interfaceEmptyLines : Null<formatter.config.InterfaceFieldsEmptyLinesConfig>, ?importAndUsing : Null<formatter.config.ImportsEmptyLinesConfig>, ?finalNewline : Null<Bool>, ?externClassEmptyLines : Null<formatter.config.InterfaceFieldsEmptyLinesConfig>, ?enumEmptyLines : Null<formatter.config.TypedefFieldsEmptyLinesConfig>, ?enumAbstractEmptyLines : Null<formatter.config.EnumAbstractFieldsEmptyLinesConfig>, ?conditionalsEmptyLines : Null<formatter.config.ConditionalEmptyLinesConfig>, ?classEmptyLines : Null<formatter.config.ClassFieldsEmptyLinesConfig>, ?betweenTypes : Null<Int>, ?betweenSingleLineTypes : Null<Int>, ?betweenMultilineComments : Null<Int>, ?beforeRightCurly : Null<formatter.config.KeepEmptyLinesPolicy>, ?beforePackage : Null<Int>, ?beforeDocCommentEmptyLines : Null<formatter.config.CommentEmptyLinesPolicy>, ?beforeBlocks : Null<formatter.config.KeepEmptyLinesPolicy>, ?afterReturn : Null<formatter.config.KeepEmptyLinesPolicy>, ?afterPackage : Null<Int>, ?afterLeftCurly : Null<formatter.config.KeepEmptyLinesPolicy>, ?afterFileHeaderComment : Null<Int>, ?afterFieldsWithDocComments : Null<formatter.config.CommentEmptyLinesPolicy>, ?afterBlocks : Null<formatter.config.KeepEmptyLinesPolicy>, ?abstractEmptyLines : Null<formatter.config.ClassFieldsEmptyLinesConfig> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["abstractEmptyLines","afterBlocks","afterFieldsWithDocComments","afterFileHeaderComment","afterLeftCurly","afterPackage","afterReturn","beforeBlocks","beforeDocCommentEmptyLines","beforePackage","beforeRightCurly","betweenMultilineComments","betweenSingleLineTypes","betweenTypes","classEmptyLines","conditionalsEmptyLines","enumAbstractEmptyLines","enumEmptyLines","externClassEmptyLines","finalNewline","importAndUsing","interfaceEmptyLines","lineCommentsBetweenFunctions","lineCommentsBetweenTypes","macroClassEmptyLines","maxAnywhereInFile","typedefEmptyLines"],[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "abstractEmptyLines":
				this.value.abstractEmptyLines = this.loadObjectField(($_=new JsonParser_$7(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"abstractEmptyLines",assigned,this.value.abstractEmptyLines);
				break;
			case "afterBlocks":
				this.value.afterBlocks = this.loadObjectField(($_=new JsonParser_$196(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterBlocks",assigned,this.value.afterBlocks);
				break;
			case "afterFieldsWithDocComments":
				this.value.afterFieldsWithDocComments = this.loadObjectField(($_=new JsonParser_$200(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterFieldsWithDocComments",assigned,this.value.afterFieldsWithDocComments);
				break;
			case "afterFileHeaderComment":
				this.value.afterFileHeaderComment = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterFileHeaderComment",assigned,this.value.afterFileHeaderComment);
				break;
			case "afterLeftCurly":
				this.value.afterLeftCurly = this.loadObjectField(($_=new JsonParser_$196(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterLeftCurly",assigned,this.value.afterLeftCurly);
				break;
			case "afterPackage":
				this.value.afterPackage = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterPackage",assigned,this.value.afterPackage);
				break;
			case "afterReturn":
				this.value.afterReturn = this.loadObjectField(($_=new JsonParser_$196(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterReturn",assigned,this.value.afterReturn);
				break;
			case "beforeBlocks":
				this.value.beforeBlocks = this.loadObjectField(($_=new JsonParser_$196(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beforeBlocks",assigned,this.value.beforeBlocks);
				break;
			case "beforeDocCommentEmptyLines":
				this.value.beforeDocCommentEmptyLines = this.loadObjectField(($_=new JsonParser_$200(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beforeDocCommentEmptyLines",assigned,this.value.beforeDocCommentEmptyLines);
				break;
			case "beforePackage":
				this.value.beforePackage = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beforePackage",assigned,this.value.beforePackage);
				break;
			case "beforeRightCurly":
				this.value.beforeRightCurly = this.loadObjectField(($_=new JsonParser_$196(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beforeRightCurly",assigned,this.value.beforeRightCurly);
				break;
			case "betweenMultilineComments":
				this.value.betweenMultilineComments = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenMultilineComments",assigned,this.value.betweenMultilineComments);
				break;
			case "betweenSingleLineTypes":
				this.value.betweenSingleLineTypes = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenSingleLineTypes",assigned,this.value.betweenSingleLineTypes);
				break;
			case "betweenTypes":
				this.value.betweenTypes = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenTypes",assigned,this.value.betweenTypes);
				break;
			case "classEmptyLines":
				this.value.classEmptyLines = this.loadObjectField(($_=new JsonParser_$7(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"classEmptyLines",assigned,this.value.classEmptyLines);
				break;
			case "conditionalsEmptyLines":
				this.value.conditionalsEmptyLines = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"conditionalsEmptyLines",assigned,this.value.conditionalsEmptyLines);
				break;
			case "enumAbstractEmptyLines":
				this.value.enumAbstractEmptyLines = this.loadObjectField(($_=new JsonParser_$15(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"enumAbstractEmptyLines",assigned,this.value.enumAbstractEmptyLines);
				break;
			case "enumEmptyLines":
				this.value.enumEmptyLines = this.loadObjectField(($_=new JsonParser_$18(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"enumEmptyLines",assigned,this.value.enumEmptyLines);
				break;
			case "externClassEmptyLines":
				this.value.externClassEmptyLines = this.loadObjectField(($_=new JsonParser_$21(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"externClassEmptyLines",assigned,this.value.externClassEmptyLines);
				break;
			case "finalNewline":
				this.value.finalNewline = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"finalNewline",assigned,this.value.finalNewline);
				break;
			case "importAndUsing":
				this.value.importAndUsing = this.loadObjectField(($_=new JsonParser_$24(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"importAndUsing",assigned,this.value.importAndUsing);
				break;
			case "interfaceEmptyLines":
				this.value.interfaceEmptyLines = this.loadObjectField(($_=new JsonParser_$21(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"interfaceEmptyLines",assigned,this.value.interfaceEmptyLines);
				break;
			case "lineCommentsBetweenFunctions":
				this.value.lineCommentsBetweenFunctions = this.loadObjectField(($_=new JsonParser_$216(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"lineCommentsBetweenFunctions",assigned,this.value.lineCommentsBetweenFunctions);
				break;
			case "lineCommentsBetweenTypes":
				this.value.lineCommentsBetweenTypes = this.loadObjectField(($_=new JsonParser_$216(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"lineCommentsBetweenTypes",assigned,this.value.lineCommentsBetweenTypes);
				break;
			case "macroClassEmptyLines":
				this.value.macroClassEmptyLines = this.loadObjectField(($_=new JsonParser_$7(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"macroClassEmptyLines",assigned,this.value.macroClassEmptyLines);
				break;
			case "maxAnywhereInFile":
				this.value.maxAnywhereInFile = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"maxAnywhereInFile",assigned,this.value.maxAnywhereInFile);
				break;
			case "typedefEmptyLines":
				this.value.typedefEmptyLines = this.loadObjectField(($_=new JsonParser_$18(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"typedefEmptyLines",assigned,this.value.typedefEmptyLines);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { abstractEmptyLines : new JsonParser_$7([],this.putils,0).getAuto(), afterBlocks : "remove", afterFieldsWithDocComments : "one", afterFileHeaderComment : 1, afterLeftCurly : "remove", afterPackage : 1, afterReturn : "remove", beforeBlocks : "remove", beforeDocCommentEmptyLines : "one", beforePackage : 0, beforeRightCurly : "remove", betweenMultilineComments : 0, betweenSingleLineTypes : 0, betweenTypes : 1, classEmptyLines : new JsonParser_$7([],this.putils,0).getAuto(), conditionalsEmptyLines : new JsonParser_$12([],this.putils,0).getAuto(), enumAbstractEmptyLines : new JsonParser_$15([],this.putils,0).getAuto(), enumEmptyLines : new JsonParser_$18([],this.putils,0).getAuto(), externClassEmptyLines : new JsonParser_$21([],this.putils,0).getAuto(), finalNewline : true, importAndUsing : new JsonParser_$24([],this.putils,0).getAuto(), interfaceEmptyLines : new JsonParser_$21([],this.putils,0).getAuto(), lineCommentsBetweenFunctions : "keep", lineCommentsBetweenTypes : "keep", macroClassEmptyLines : new JsonParser_$7([],this.putils,0).getAuto(), maxAnywhereInFile : 1, typedefEmptyLines : new JsonParser_$18([],this.putils,0).getAuto()};
	}
}
$hxClasses["JsonParser_4"] = JsonParser_$4;
JsonParser_$4.__name__ = "JsonParser_4";
JsonParser_$4.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$4.prototype, {
	__class__: JsonParser_$4
});
class JsonParser_$42 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?whilePolicy : Null<formatter.config.WhitespacePolicy>, ?typeParamOpenPolicy : Null<formatter.config.WhitespacePolicy>, ?typeParamClosePolicy : Null<formatter.config.WhitespacePolicy>, ?typeHintColonPolicy : Null<formatter.config.WhitespacePolicy>, ?typeExtensionPolicy : Null<formatter.config.WhitespacePolicy>, ?typeCheckColonPolicy : Null<formatter.config.WhitespacePolicy>, ?tryPolicy : Null<formatter.config.WhitespacePolicy>, ?ternaryPolicy : Null<formatter.config.WhitespacePolicy>, ?switchPolicy : Null<formatter.config.WhitespacePolicy>, ?semicolonPolicy : Null<formatter.config.WhitespacePolicy>, ?parenConfig : Null<formatter.config.ParenWhitespaceConfig>, ?openingBracketPolicy : Null<formatter.config.WhitespacePolicy>, ?objectFieldColonPolicy : Null<formatter.config.WhitespacePolicy>, ?intervalPolicy : Null<formatter.config.WhitespacePolicy>, ?ifPolicy : Null<formatter.config.WhitespacePolicy>, ?functionTypeHaxe4Policy : Null<formatter.config.WhitespacePolicy>, ?functionTypeHaxe3Policy : Null<formatter.config.WhitespacePolicy>, ?formatStringInterpolation : Null<Bool>, ?forPolicy : Null<formatter.config.WhitespacePolicy>, ?dotPolicy : Null<formatter.config.WhitespacePolicy>, ?doPolicy : Null<formatter.config.WhitespacePolicy>, ?compressSuccessiveParenthesis : Null<Bool>, ?commaPolicy : Null<formatter.config.WhitespacePolicy>, ?colonPolicy : Null<formatter.config.WhitespacePolicy>, ?closingBracketPolicy : Null<formatter.config.WhitespacePolicy>, ?catchPolicy : Null<formatter.config.WhitespacePolicy>, ?caseColonPolicy : Null<formatter.config.WhitespacePolicy>, ?bracesConfig : Null<formatter.config.BracesWhitespaceConfig>, ?binopPolicy : Null<formatter.config.WhitespacePolicy>, ?arrowFunctionsPolicy : Null<formatter.config.WhitespacePolicy>, ?addLineCommentSpace : Null<Bool> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["addLineCommentSpace","arrowFunctionsPolicy","binopPolicy","bracesConfig","caseColonPolicy","catchPolicy","closingBracketPolicy","colonPolicy","commaPolicy","compressSuccessiveParenthesis","doPolicy","dotPolicy","forPolicy","formatStringInterpolation","functionTypeHaxe3Policy","functionTypeHaxe4Policy","ifPolicy","intervalPolicy","objectFieldColonPolicy","openingBracketPolicy","parenConfig","semicolonPolicy","switchPolicy","ternaryPolicy","tryPolicy","typeCheckColonPolicy","typeExtensionPolicy","typeHintColonPolicy","typeParamClosePolicy","typeParamOpenPolicy","whilePolicy"],[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "addLineCommentSpace":
				this.value.addLineCommentSpace = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"addLineCommentSpace",assigned,this.value.addLineCommentSpace);
				break;
			case "arrowFunctionsPolicy":
				this.value.arrowFunctionsPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"arrowFunctionsPolicy",assigned,this.value.arrowFunctionsPolicy);
				break;
			case "binopPolicy":
				this.value.binopPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"binopPolicy",assigned,this.value.binopPolicy);
				break;
			case "bracesConfig":
				this.value.bracesConfig = this.loadObjectField(($_=new JsonParser_$45(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"bracesConfig",assigned,this.value.bracesConfig);
				break;
			case "caseColonPolicy":
				this.value.caseColonPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"caseColonPolicy",assigned,this.value.caseColonPolicy);
				break;
			case "catchPolicy":
				this.value.catchPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"catchPolicy",assigned,this.value.catchPolicy);
				break;
			case "closingBracketPolicy":
				this.value.closingBracketPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"closingBracketPolicy",assigned,this.value.closingBracketPolicy);
				break;
			case "colonPolicy":
				this.value.colonPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"colonPolicy",assigned,this.value.colonPolicy);
				break;
			case "commaPolicy":
				this.value.commaPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"commaPolicy",assigned,this.value.commaPolicy);
				break;
			case "compressSuccessiveParenthesis":
				this.value.compressSuccessiveParenthesis = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"compressSuccessiveParenthesis",assigned,this.value.compressSuccessiveParenthesis);
				break;
			case "doPolicy":
				this.value.doPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"doPolicy",assigned,this.value.doPolicy);
				break;
			case "dotPolicy":
				this.value.dotPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"dotPolicy",assigned,this.value.dotPolicy);
				break;
			case "forPolicy":
				this.value.forPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"forPolicy",assigned,this.value.forPolicy);
				break;
			case "formatStringInterpolation":
				this.value.formatStringInterpolation = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"formatStringInterpolation",assigned,this.value.formatStringInterpolation);
				break;
			case "functionTypeHaxe3Policy":
				this.value.functionTypeHaxe3Policy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"functionTypeHaxe3Policy",assigned,this.value.functionTypeHaxe3Policy);
				break;
			case "functionTypeHaxe4Policy":
				this.value.functionTypeHaxe4Policy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"functionTypeHaxe4Policy",assigned,this.value.functionTypeHaxe4Policy);
				break;
			case "ifPolicy":
				this.value.ifPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"ifPolicy",assigned,this.value.ifPolicy);
				break;
			case "intervalPolicy":
				this.value.intervalPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"intervalPolicy",assigned,this.value.intervalPolicy);
				break;
			case "objectFieldColonPolicy":
				this.value.objectFieldColonPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"objectFieldColonPolicy",assigned,this.value.objectFieldColonPolicy);
				break;
			case "openingBracketPolicy":
				this.value.openingBracketPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"openingBracketPolicy",assigned,this.value.openingBracketPolicy);
				break;
			case "parenConfig":
				this.value.parenConfig = this.loadObjectField(($_=new JsonParser_$48(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"parenConfig",assigned,this.value.parenConfig);
				break;
			case "semicolonPolicy":
				this.value.semicolonPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"semicolonPolicy",assigned,this.value.semicolonPolicy);
				break;
			case "switchPolicy":
				this.value.switchPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"switchPolicy",assigned,this.value.switchPolicy);
				break;
			case "ternaryPolicy":
				this.value.ternaryPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"ternaryPolicy",assigned,this.value.ternaryPolicy);
				break;
			case "tryPolicy":
				this.value.tryPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"tryPolicy",assigned,this.value.tryPolicy);
				break;
			case "typeCheckColonPolicy":
				this.value.typeCheckColonPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"typeCheckColonPolicy",assigned,this.value.typeCheckColonPolicy);
				break;
			case "typeExtensionPolicy":
				this.value.typeExtensionPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"typeExtensionPolicy",assigned,this.value.typeExtensionPolicy);
				break;
			case "typeHintColonPolicy":
				this.value.typeHintColonPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"typeHintColonPolicy",assigned,this.value.typeHintColonPolicy);
				break;
			case "typeParamClosePolicy":
				this.value.typeParamClosePolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"typeParamClosePolicy",assigned,this.value.typeParamClosePolicy);
				break;
			case "typeParamOpenPolicy":
				this.value.typeParamOpenPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"typeParamOpenPolicy",assigned,this.value.typeParamOpenPolicy);
				break;
			case "whilePolicy":
				this.value.whilePolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"whilePolicy",assigned,this.value.whilePolicy);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { addLineCommentSpace : true, arrowFunctionsPolicy : "around", binopPolicy : "around", bracesConfig : new JsonParser_$45([],this.putils,0).getAuto(), caseColonPolicy : "onlyAfter", catchPolicy : "after", closingBracketPolicy : "none", colonPolicy : "none", commaPolicy : "onlyAfter", compressSuccessiveParenthesis : true, doPolicy : "after", dotPolicy : "none", forPolicy : "after", formatStringInterpolation : true, functionTypeHaxe3Policy : "none", functionTypeHaxe4Policy : "around", ifPolicy : "after", intervalPolicy : "none", objectFieldColonPolicy : "after", openingBracketPolicy : "noneAfter", parenConfig : new JsonParser_$48([],this.putils,0).getAuto(), semicolonPolicy : "onlyAfter", switchPolicy : "after", ternaryPolicy : "around", tryPolicy : "after", typeCheckColonPolicy : "around", typeExtensionPolicy : "after", typeHintColonPolicy : "none", typeParamClosePolicy : "none", typeParamOpenPolicy : "none", whilePolicy : "after"};
	}
}
$hxClasses["JsonParser_42"] = JsonParser_$42;
JsonParser_$42.__name__ = "JsonParser_42";
JsonParser_$42.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$42.prototype, {
	__class__: JsonParser_$42
});
class JsonParser_$45 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?unknownBraces : Null<formatter.config.OpenClosePolicy>, ?typedefBraces : Null<formatter.config.OpenClosePolicy>, ?objectLiteralBraces : Null<formatter.config.OpenClosePolicy>, ?blockBraces : Null<formatter.config.OpenClosePolicy>, ?anonTypeBraces : Null<formatter.config.OpenClosePolicy> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["anonTypeBraces","blockBraces","objectLiteralBraces","typedefBraces","unknownBraces"],[true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "anonTypeBraces":
				this.value.anonTypeBraces = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"anonTypeBraces",assigned,this.value.anonTypeBraces);
				break;
			case "blockBraces":
				this.value.blockBraces = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"blockBraces",assigned,this.value.blockBraces);
				break;
			case "objectLiteralBraces":
				this.value.objectLiteralBraces = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"objectLiteralBraces",assigned,this.value.objectLiteralBraces);
				break;
			case "typedefBraces":
				this.value.typedefBraces = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"typedefBraces",assigned,this.value.typedefBraces);
				break;
			case "unknownBraces":
				this.value.unknownBraces = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"unknownBraces",assigned,this.value.unknownBraces);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { anonTypeBraces : { openingPolicy : "before", closingPolicy : "onlyAfter", removeInnerWhenEmpty : true}, blockBraces : { openingPolicy : "before", closingPolicy : "onlyAfter", removeInnerWhenEmpty : true}, objectLiteralBraces : { openingPolicy : "before", closingPolicy : "onlyAfter", removeInnerWhenEmpty : true}, typedefBraces : { openingPolicy : "before", closingPolicy : "onlyAfter", removeInnerWhenEmpty : true}, unknownBraces : { openingPolicy : "before", closingPolicy : "onlyAfter", removeInnerWhenEmpty : true}};
	}
}
$hxClasses["JsonParser_45"] = JsonParser_$45;
JsonParser_$45.__name__ = "JsonParser_45";
JsonParser_$45.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$45.prototype, {
	__class__: JsonParser_$45
});
class JsonParser_$48 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?whileConditionParens : Null<formatter.config.OpenClosePolicy>, ?switchConditionParens : Null<formatter.config.OpenClosePolicy>, ?sharpConditionParens : Null<formatter.config.OpenClosePolicy>, ?metadataParens : Null<formatter.config.OpenClosePolicy>, ?ifConditionParens : Null<formatter.config.OpenClosePolicy>, ?funcParamParens : Null<formatter.config.OpenClosePolicy>, ?forLoopParens : Null<formatter.config.OpenClosePolicy>, ?expressionParens : Null<formatter.config.OpenClosePolicy>, ?conditionParens : Null<formatter.config.OpenClosePolicy>, ?catchParens : Null<formatter.config.OpenClosePolicy>, ?callParens : Null<formatter.config.OpenClosePolicy>, ?anonFuncParamParens : Null<formatter.config.OpenClosePolicy> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["anonFuncParamParens","callParens","catchParens","conditionParens","expressionParens","forLoopParens","funcParamParens","ifConditionParens","metadataParens","sharpConditionParens","switchConditionParens","whileConditionParens"],[true,true,true,true,true,true,true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "anonFuncParamParens":
				this.value.anonFuncParamParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"anonFuncParamParens",assigned,this.value.anonFuncParamParens);
				break;
			case "callParens":
				this.value.callParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"callParens",assigned,this.value.callParens);
				break;
			case "catchParens":
				this.value.catchParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"catchParens",assigned,this.value.catchParens);
				break;
			case "conditionParens":
				this.value.conditionParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"conditionParens",assigned,this.value.conditionParens);
				break;
			case "expressionParens":
				this.value.expressionParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"expressionParens",assigned,this.value.expressionParens);
				break;
			case "forLoopParens":
				this.value.forLoopParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"forLoopParens",assigned,this.value.forLoopParens);
				break;
			case "funcParamParens":
				this.value.funcParamParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"funcParamParens",assigned,this.value.funcParamParens);
				break;
			case "ifConditionParens":
				this.value.ifConditionParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"ifConditionParens",assigned,this.value.ifConditionParens);
				break;
			case "metadataParens":
				this.value.metadataParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"metadataParens",assigned,this.value.metadataParens);
				break;
			case "sharpConditionParens":
				this.value.sharpConditionParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"sharpConditionParens",assigned,this.value.sharpConditionParens);
				break;
			case "switchConditionParens":
				this.value.switchConditionParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"switchConditionParens",assigned,this.value.switchConditionParens);
				break;
			case "whileConditionParens":
				this.value.whileConditionParens = this.loadObjectField(($_=new JsonParser_$51(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"whileConditionParens",assigned,this.value.whileConditionParens);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		var tmp = new JsonParser_$51([],this.putils,0).getAuto();
		var tmp1 = new JsonParser_$51([],this.putils,0).getAuto();
		var tmp2 = new JsonParser_$51([],this.putils,0).getAuto();
		var tmp3 = new JsonParser_$51([],this.putils,0).getAuto();
		return { anonFuncParamParens : tmp, callParens : tmp1, catchParens : null, conditionParens : { openingPolicy : "noneAfter", closingPolicy : "onlyAfter", removeInnerWhenEmpty : true}, expressionParens : { openingPolicy : "noneAfter", closingPolicy : "onlyAfter", removeInnerWhenEmpty : true}, forLoopParens : { openingPolicy : "noneAfter", closingPolicy : "onlyAfter", removeInnerWhenEmpty : true}, funcParamParens : tmp2, ifConditionParens : null, metadataParens : tmp3, sharpConditionParens : null, switchConditionParens : null, whileConditionParens : null};
	}
}
$hxClasses["JsonParser_48"] = JsonParser_$48;
JsonParser_$48.__name__ = "JsonParser_48";
JsonParser_$48.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$48.prototype, {
	__class__: JsonParser_$48
});
class JsonParser_$51 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?removeInnerWhenEmpty : Null<Bool>, ?openingPolicy : Null<formatter.config.WhitespacePolicy>, ?closingPolicy : Null<formatter.config.WhitespacePolicy> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["closingPolicy","openingPolicy","removeInnerWhenEmpty"],[true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "closingPolicy":
				this.value.closingPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"closingPolicy",assigned,this.value.closingPolicy);
				break;
			case "openingPolicy":
				this.value.openingPolicy = this.loadObjectField(($_=new JsonParser_$125(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"openingPolicy",assigned,this.value.openingPolicy);
				break;
			case "removeInnerWhenEmpty":
				this.value.removeInnerWhenEmpty = this.loadObjectField(($_=new JsonParser_$62(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"removeInnerWhenEmpty",assigned,this.value.removeInnerWhenEmpty);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { closingPolicy : "onlyAfter", openingPolicy : "none", removeInnerWhenEmpty : true};
	}
}
$hxClasses["JsonParser_51"] = JsonParser_$51;
JsonParser_$51.__name__ = "JsonParser_51";
JsonParser_$51.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$51.prototype, {
	__class__: JsonParser_$51
});
class JsonParser_$60 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?typeParameter : Null<formatter.config.WrapRules>, ?opBoolChain : Null<formatter.config.WrapRules>, ?opAddSubChain : Null<formatter.config.WrapRules>, ?objectLiteral : Null<formatter.config.WrapRules>, ?multiVar : Null<formatter.config.WrapRules>, ?methodChain : Null<formatter.config.WrapRules>, ?metadataCallParameter : Null<formatter.config.WrapRules>, ?maxLineLength : Null<Int>, ?implementsExtends : Null<formatter.config.WrapRules>, ?functionSignature : Null<formatter.config.WrapRules>, ?casePattern : Null<formatter.config.WrapRules>, ?callParameter : Null<formatter.config.WrapRules>, ?arrayWrap : Null<formatter.config.WrapRules>, ?arrayMatrixWrap : Null<formatter.config.ArrayMatrixWrap>, ?anonType : Null<formatter.config.WrapRules>, ?anonFunctionSignature : Null<formatter.config.WrapRules> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["anonFunctionSignature","anonType","arrayMatrixWrap","arrayWrap","callParameter","casePattern","functionSignature","implementsExtends","maxLineLength","metadataCallParameter","methodChain","multiVar","objectLiteral","opAddSubChain","opBoolChain","typeParameter"],[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "anonFunctionSignature":
				this.value.anonFunctionSignature = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"anonFunctionSignature",assigned,this.value.anonFunctionSignature);
				break;
			case "anonType":
				this.value.anonType = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"anonType",assigned,this.value.anonType);
				break;
			case "arrayMatrixWrap":
				this.value.arrayMatrixWrap = this.loadObjectField(($_=new JsonParser_$84(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"arrayMatrixWrap",assigned,this.value.arrayMatrixWrap);
				break;
			case "arrayWrap":
				this.value.arrayWrap = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"arrayWrap",assigned,this.value.arrayWrap);
				break;
			case "callParameter":
				this.value.callParameter = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"callParameter",assigned,this.value.callParameter);
				break;
			case "casePattern":
				this.value.casePattern = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"casePattern",assigned,this.value.casePattern);
				break;
			case "functionSignature":
				this.value.functionSignature = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"functionSignature",assigned,this.value.functionSignature);
				break;
			case "implementsExtends":
				this.value.implementsExtends = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"implementsExtends",assigned,this.value.implementsExtends);
				break;
			case "maxLineLength":
				this.value.maxLineLength = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"maxLineLength",assigned,this.value.maxLineLength);
				break;
			case "metadataCallParameter":
				this.value.metadataCallParameter = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"metadataCallParameter",assigned,this.value.metadataCallParameter);
				break;
			case "methodChain":
				this.value.methodChain = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"methodChain",assigned,this.value.methodChain);
				break;
			case "multiVar":
				this.value.multiVar = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"multiVar",assigned,this.value.multiVar);
				break;
			case "objectLiteral":
				this.value.objectLiteral = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"objectLiteral",assigned,this.value.objectLiteral);
				break;
			case "opAddSubChain":
				this.value.opAddSubChain = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"opAddSubChain",assigned,this.value.opAddSubChain);
				break;
			case "opBoolChain":
				this.value.opBoolChain = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"opBoolChain",assigned,this.value.opBoolChain);
				break;
			case "typeParameter":
				this.value.typeParameter = this.loadObjectField(($_=new JsonParser_$80(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"typeParameter",assigned,this.value.typeParameter);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { anonFunctionSignature : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "itemCount >= n", value : 7}], type : "fillLine", additionalIndent : 1},{ conditions : [{ cond : "totalItemLength >= n", value : 80}], type : "fillLine", additionalIndent : 1},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "fillLine", additionalIndent : 1}]}, anonType : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "itemCount <= n", value : 3},{ cond : "exceedsMaxLineLength", value : 0}], type : "noWrap"},{ conditions : [{ cond : "anyItemLength >= n", value : 30}], type : "onePerLine"},{ conditions : [{ cond : "totalItemLength >= n", value : 60}], type : "onePerLine"},{ conditions : [{ cond : "itemCount >= n", value : 4}], type : "onePerLine"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "fillLine"}]}, arrayMatrixWrap : "matrixWrapWithAlign", arrayWrap : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "hasMultilineItems", value : 1}], type : "onePerLine"},{ conditions : [{ cond : "totalItemLength <= n", value : 80}], type : "noWrap"},{ conditions : [{ cond : "itemCount >= n", value : 10}], type : "fillLineWithLeadingBreak"},{ conditions : [{ cond : "anyItemLength >= n", value : 30}], type : "onePerLine"},{ conditions : [{ cond : "itemCount >= n", value : 4}], type : "onePerLine"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "onePerLine"}]}, callParameter : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "itemCount >= n", value : 7}], type : "fillLine"},{ conditions : [{ cond : "totalItemLength >= n", value : 140}], type : "fillLine"},{ conditions : [{ cond : "anyItemLength >= n", value : 80}], type : "fillLine"},{ conditions : [{ cond : "lineLength >= n", value : 160}], type : "fillLine"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "fillLine"}]}, casePattern : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "itemCount >= n", value : 2}], type : "fillLine"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "fillLine"}]}, functionSignature : { defaultWrap : "fillLine", defaultAdditionalIndent : 1, rules : []}, implementsExtends : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "lineLength >= n", value : 140}], type : "fillLine", additionalIndent : 2},{ conditions : [{ cond : "itemCount >= n", value : 4}], type : "fillLine", additionalIndent : 2},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "fillLine", additionalIndent : 2}]}, maxLineLength : 160, metadataCallParameter : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "totalItemLength >= n", value : 140}], type : "fillLine"},{ conditions : [{ cond : "lineLength >= n", value : 160}], type : "fillLine"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "fillLine"}]}, methodChain : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "lineLength >= n", value : 160}], type : "onePerLineAfterFirst"},{ conditions : [{ cond : "itemCount <= n", value : 3},{ cond : "exceedsMaxLineLength", value : 0}], type : "noWrap"},{ conditions : [{ cond : "totalItemLength <= n", value : 80},{ cond : "exceedsMaxLineLength", value : 0}], type : "noWrap"},{ conditions : [{ cond : "anyItemLength >= n", value : 30},{ cond : "itemCount >= n", value : 4}], type : "onePerLineAfterFirst"},{ conditions : [{ cond : "itemCount >= n", value : 7}], type : "onePerLineAfterFirst"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "onePerLineAfterFirst"}]}, multiVar : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "anyItemLength <= n", value : 15}], type : "fillLine"},{ conditions : [{ cond : "lineLength >= n", value : 80}], type : "onePerLineAfterFirst"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "onePerLineAfterFirst"}]}, objectLiteral : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "itemCount <= n", value : 3},{ cond : "exceedsMaxLineLength", value : 0}], type : "noWrap"},{ conditions : [{ cond : "anyItemLength >= n", value : 30}], type : "onePerLine"},{ conditions : [{ cond : "totalItemLength >= n", value : 60}], type : "onePerLine"},{ conditions : [{ cond : "itemCount >= n", value : 4}], type : "onePerLine"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], type : "onePerLine"}]}, opAddSubChain : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "lineLength >= n", value : 160},{ cond : "anyItemLength >= n", value : 60}], location : "beforeLast", type : "onePerLineAfterFirst"},{ conditions : [{ cond : "lineLength >= n", value : 160}], location : "beforeLast", type : "fillLine"},{ conditions : [{ cond : "itemCount <= n", value : 3},{ cond : "exceedsMaxLineLength", value : 0}], type : "noWrap"},{ conditions : [{ cond : "totalItemLength <= n", value : 120},{ cond : "exceedsMaxLineLength", value : 0}], type : "noWrap"},{ conditions : [{ cond : "itemCount >= n", value : 4}], location : "beforeLast", type : "onePerLineAfterFirst"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], location : "beforeLast", type : "onePerLineAfterFirst"}]}, opBoolChain : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "lineLength >= n", value : 140},{ cond : "anyItemLength >= n", value : 40}], location : "beforeLast", type : "onePerLineAfterFirst"},{ conditions : [{ cond : "lineLength >= n", value : 140}], location : "beforeLast", type : "fillLine"},{ conditions : [{ cond : "itemCount <= n", value : 3},{ cond : "exceedsMaxLineLength", value : 0}], type : "noWrap"},{ conditions : [{ cond : "totalItemLength <= n", value : 120},{ cond : "exceedsMaxLineLength", value : 0}], type : "noWrap"},{ conditions : [{ cond : "itemCount >= n", value : 4}], location : "beforeLast", type : "onePerLineAfterFirst"},{ conditions : [{ cond : "exceedsMaxLineLength", value : 1}], location : "beforeLast", type : "fillLine"}]}, typeParameter : { defaultWrap : "noWrap", rules : [{ conditions : [{ cond : "anyItemLength >= n", value : 50}], type : "fillLine"},{ conditions : [{ cond : "totalItemLength >= n", value : 70}], type : "fillLine"}]}};
	}
}
$hxClasses["JsonParser_60"] = JsonParser_$60;
JsonParser_$60.__name__ = "JsonParser_60";
JsonParser_$60.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$60.prototype, {
	__class__: JsonParser_$60
});
class JsonParser_$62 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Bool",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonBool(b,pos,variable) {
		this.value = b;
	}
}
$hxClasses["JsonParser_62"] = JsonParser_$62;
JsonParser_$62.__name__ = "JsonParser_62";
JsonParser_$62.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$62.prototype, {
	__class__: JsonParser_$62
});
class JsonParser_$66 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<String>",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonArray(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$77(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
}
$hxClasses["JsonParser_66"] = JsonParser_$66;
JsonParser_$66.__name__ = "JsonParser_66";
JsonParser_$66.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$66.prototype, {
	__class__: JsonParser_$66
});
class JsonParser_$7 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?existingBetweenFields : Null<formatter.config.KeepEmptyLinesPolicy>, ?endType : Null<Int>, ?betweenVars : Null<Int>, ?betweenStaticVars : Null<Int>, ?betweenStaticFunctions : Null<Int>, ?betweenFunctions : Null<Int>, ?beginType : Null<Int>, ?afterVars : Null<Int>, ?afterStaticVars : Null<Int>, ?afterStaticFunctions : Null<Int>, ?afterPrivateVars : Null<Int>, ?afterPrivateFunctions : Null<Int> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["afterPrivateFunctions","afterPrivateVars","afterStaticFunctions","afterStaticVars","afterVars","beginType","betweenFunctions","betweenStaticFunctions","betweenStaticVars","betweenVars","endType","existingBetweenFields"],[true,true,true,true,true,true,true,true,true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "afterPrivateFunctions":
				this.value.afterPrivateFunctions = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterPrivateFunctions",assigned,this.value.afterPrivateFunctions);
				break;
			case "afterPrivateVars":
				this.value.afterPrivateVars = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterPrivateVars",assigned,this.value.afterPrivateVars);
				break;
			case "afterStaticFunctions":
				this.value.afterStaticFunctions = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterStaticFunctions",assigned,this.value.afterStaticFunctions);
				break;
			case "afterStaticVars":
				this.value.afterStaticVars = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterStaticVars",assigned,this.value.afterStaticVars);
				break;
			case "afterVars":
				this.value.afterVars = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"afterVars",assigned,this.value.afterVars);
				break;
			case "beginType":
				this.value.beginType = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"beginType",assigned,this.value.beginType);
				break;
			case "betweenFunctions":
				this.value.betweenFunctions = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenFunctions",assigned,this.value.betweenFunctions);
				break;
			case "betweenStaticFunctions":
				this.value.betweenStaticFunctions = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenStaticFunctions",assigned,this.value.betweenStaticFunctions);
				break;
			case "betweenStaticVars":
				this.value.betweenStaticVars = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenStaticVars",assigned,this.value.betweenStaticVars);
				break;
			case "betweenVars":
				this.value.betweenVars = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"betweenVars",assigned,this.value.betweenVars);
				break;
			case "endType":
				this.value.endType = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"endType",assigned,this.value.endType);
				break;
			case "existingBetweenFields":
				this.value.existingBetweenFields = this.loadObjectField(($_=new JsonParser_$196(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"existingBetweenFields",assigned,this.value.existingBetweenFields);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { afterPrivateFunctions : 1, afterPrivateVars : 1, afterStaticFunctions : 1, afterStaticVars : 1, afterVars : 1, beginType : 0, betweenFunctions : 1, betweenStaticFunctions : 1, betweenStaticVars : 0, betweenVars : 0, endType : 0, existingBetweenFields : "keep"};
	}
}
$hxClasses["JsonParser_7"] = JsonParser_$7;
JsonParser_$7.__name__ = "JsonParser_7";
JsonParser_$7.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$7.prototype, {
	__class__: JsonParser_$7
});
class JsonParser_$77 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"String",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = s;
	}
}
$hxClasses["JsonParser_77"] = JsonParser_$77;
JsonParser_$77.__name__ = "JsonParser_77";
JsonParser_$77.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$77.prototype, {
	__class__: JsonParser_$77
});
class JsonParser_$80 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?rules : Null<Array<formatter.config.WrapRule>>, ?defaultWrap : Null<formatter.config.WrappingType>, ?defaultLocation : Null<formatter.config.WrappingLocation>, ?defaultAdditionalIndent : Null<Int> }",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonObject(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["defaultAdditionalIndent","defaultLocation","defaultWrap","rules"],[true,true,true,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "defaultAdditionalIndent":
				this.value.defaultAdditionalIndent = this.loadObjectField(($_=new JsonParser_$96(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"defaultAdditionalIndent",assigned,this.value.defaultAdditionalIndent);
				break;
			case "defaultLocation":
				this.value.defaultLocation = this.loadObjectField(($_=new JsonParser_$112(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"defaultLocation",assigned,this.value.defaultLocation);
				break;
			case "defaultWrap":
				this.value.defaultWrap = this.loadObjectField(($_=new JsonParser_$114(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"defaultWrap",assigned,this.value.defaultWrap);
				break;
			case "rules":
				this.value.rules = this.loadObjectField(($_=new JsonParser_$116(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"rules",assigned,this.value.rules);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	getAuto() {
		return { defaultAdditionalIndent : 0, defaultLocation : "afterLast", defaultWrap : "noWrap", rules : []};
	}
}
$hxClasses["JsonParser_80"] = JsonParser_$80;
JsonParser_$80.__name__ = "JsonParser_80";
JsonParser_$80.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$80.prototype, {
	__class__: JsonParser_$80
});
class JsonParser_$84 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.value = "noMatrixWrap";
		this.errors.push(json2object_Error.IncorrectType(variable,"formatter.config.ArrayMatrixWrap",pos));
		this.objectThrow(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonString(s,pos,variable) {
		this.value = this.loadString(s,pos,variable,["noMatrixWrap","matrixWrapNoAlign","matrixWrapWithAlign"],"noMatrixWrap");
	}
}
$hxClasses["JsonParser_84"] = JsonParser_$84;
JsonParser_$84.__name__ = "JsonParser_84";
JsonParser_$84.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$84.prototype, {
	__class__: JsonParser_$84
});
class JsonParser_$96 extends json2object_reader_BaseParser {
	constructor(errors,putils,errorType) {
		if(errorType == null) {
			errorType = 0;
		}
		super(errors,putils,errorType);
	}
	onIncorrectType(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Int",pos));
		super.onIncorrectType(pos,variable);
	}
	loadJsonNull(pos,variable) {
		this.value = null;
	}
	loadJsonNumber(f,pos,variable) {
		this.value = this.loadJsonInt(f,pos,variable,this.value);
	}
}
$hxClasses["JsonParser_96"] = JsonParser_$96;
JsonParser_$96.__name__ = "JsonParser_96";
JsonParser_$96.__super__ = json2object_reader_BaseParser;
Object.assign(JsonParser_$96.prototype, {
	__class__: JsonParser_$96
});
class Keywords {
	constructor() {
		this.words = new haxe_ds_StringMap();
		this.names = new haxe_ds_StringMap();
		this.pageKeywords = new haxe_ds_StringMap();
	}
	addKeywords(hash,name,keywords) {
		var _this = this.pageKeywords;
		if(__map_reserved[hash] != null) {
			_this.setReserved(hash,keywords);
		} else {
			_this.h[hash] = keywords;
		}
		var _this1 = this.names;
		if(__map_reserved[hash] != null) {
			_this1.setReserved(hash,name);
		} else {
			_this1.h[hash] = name;
		}
		var _g = 0;
		while(_g < keywords.length) {
			var word = keywords[_g];
			++_g;
			var _this2 = this.words;
			var pageList = __map_reserved[word] != null ? _this2.getReserved(word) : _this2.h[word];
			if(pageList == null) {
				pageList = [];
				var _this3 = this.words;
				if(__map_reserved[word] != null) {
					_this3.setReserved(word,pageList);
				} else {
					_this3.h[word] = pageList;
				}
			}
			pageList.push(hash);
		}
	}
	getKeywordList() {
		var keywords = [];
		var word = this.words.keys();
		while(word.hasNext()) {
			var word1 = word.next();
			keywords.push(word1);
		}
		haxe_ds_ArraySort.sort(keywords,function(s1,s2) {
			if(s1 == s2) {
				return 0;
			} else if(s1 < s2) {
				return -1;
			} else {
				return 1;
			}
		});
		return keywords;
	}
	getSearchResults(keyword) {
		var results = [];
		keyword = keyword.toLowerCase();
		var _this = this.words;
		var pageList = __map_reserved[keyword] != null ? _this.getReserved(keyword) : _this.h[keyword];
		if(pageList == null) {
			pageList = [];
		}
		var pages = [];
		var word = this.words.keys();
		while(word.hasNext()) {
			var word1 = word.next();
			if(word1.indexOf(keyword) == -1) {
				continue;
			}
			var _this1 = this.words;
			pages = pages.concat(__map_reserved[word1] != null ? _this1.getReserved(word1) : _this1.h[word1]);
		}
		var _g = 0;
		while(_g < pages.length) {
			var page = pages[_g];
			++_g;
			if(pageList.indexOf(page) >= 0) {
				continue;
			}
			pageList.push(page);
		}
		var _g1 = 0;
		while(_g1 < pageList.length) {
			var page1 = pageList[_g1];
			++_g1;
			var _this2 = this.names;
			var name = __map_reserved[page1] != null ? _this2.getReserved(page1) : _this2.h[page1];
			results.push({ name : name, hash : page1});
		}
		return results;
	}
}
$hxClasses["Keywords"] = Keywords;
Keywords.__name__ = "Keywords";
Object.assign(Keywords.prototype, {
	__class__: Keywords
	,words: null
	,pageKeywords: null
	,names: null
});
class Main {
	static main() {
		new Navigation();
	}
}
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
class Markdown {
	static markdownToHtml(markdown) {
		var document = new Document();
		try {
			var _this_r = new RegExp("(\r\n|\r)","g".split("u").join(""));
			var lines = markdown.replace(_this_r,"\n").split("\n");
			document.parseRefLinks(lines);
			var blocks = document.parseLines(lines);
			return Markdown.renderHtml(blocks);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "<pre>" + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e) + "</pre>";
		}
	}
	static renderHtml(blocks) {
		return new markdown_HtmlRenderer().render(blocks);
	}
}
$hxClasses["Markdown"] = Markdown;
Markdown.__name__ = "Markdown";
class Document {
	constructor() {
		this.refLinks = new haxe_ds_StringMap();
		this.codeBlockSyntaxes = new haxe_ds_StringMap();
		this.inlineSyntaxes = [];
	}
	parseRefLinks(lines) {
		var indent = "^[ ]{0,3}";
		var id = "\\[([^\\]]+)\\]";
		var quote = "\"[^\"]+\"";
		var apos = "'[^']+'";
		var paren = "\\([^)]+\\)";
		var titles = new EReg("(" + quote + "|" + apos + "|" + paren + ")","");
		var link = new EReg("" + indent + id + ":\\s+(\\S+)\\s*(" + quote + "|" + apos + "|" + paren + "|)\\s*$","");
		var _g = 0;
		var _g1 = lines.length;
		while(_g < _g1) {
			var i = _g++;
			if(!link.match(lines[i])) {
				continue;
			}
			var id1 = link.matched(1);
			var url = link.matched(2);
			var title = link.matched(3);
			if(StringTools.startsWith(url,"<") && StringTools.endsWith(url,">")) {
				url = HxOverrides.substr(url,1,url.length - 2);
			}
			if(title == "" && lines[i + 1] != null && titles.match(lines[i + 1])) {
				title = titles.matched(1);
				lines[i + 1] = "";
			}
			if(title == "") {
				title = null;
			} else {
				title = title.substring(1,title.length - 1);
			}
			id1 = id1.toLowerCase();
			var this1 = this.refLinks;
			var value = new Link(id1,url,title);
			var _this = this1;
			if(__map_reserved[id1] != null) {
				_this.setReserved(id1,value);
			} else {
				_this.h[id1] = value;
			}
			lines[i] = "";
		}
	}
	parseLines(lines) {
		var parser = new markdown_BlockParser(lines,this);
		var blocks = [];
		while(parser.pos < parser.lines.length) {
			var _g = 0;
			var _g1 = markdown_BlockSyntax.get_syntaxes();
			while(_g < _g1.length) {
				var syntax = _g1[_g];
				++_g;
				if(syntax.canParse(parser)) {
					var block = syntax.parse(parser);
					if(block != null) {
						blocks.push(block);
					}
					break;
				}
			}
		}
		return blocks;
	}
	parseInline(text) {
		return new markdown_InlineParser(text,this).parse();
	}
}
$hxClasses["Document"] = Document;
Document.__name__ = "Document";
Object.assign(Document.prototype, {
	__class__: Document
	,refLinks: null
	,inlineSyntaxes: null
	,linkResolver: null
	,codeBlockSyntaxes: null
});
class Link {
	constructor(id,url,title) {
		this.id = id;
		this.url = url;
		this.title = title;
	}
}
$hxClasses["Link"] = Link;
Link.__name__ = "Link";
Object.assign(Link.prototype, {
	__class__: Link
	,id: null
	,url: null
	,title: null
});
Math.__name__ = "Math";
class Navigation {
	constructor() {
		this.configFieldRegistry = new codesamples_config_ConfigFieldRegistry();
		this.keywords = new Keywords();
		this.buildNavigation();
	}
	buildNavigation() {
		var content = "";
		content += "<div id=\"searchContainer\"><input type=\"text\" placeholder=\"search\" id=\"searchBox\" /><button id=\"searchBtn\">Go</button></div>\n";
		content += "<ul class=\"sections\">\n";
		content += this.buildNavigationsection(doc_Docs);
		content += this.buildNavigationsection(codesamples_CommonSamples);
		content += this.buildNavigationsection(codesamples_EmptylinesSamples);
		content += this.buildNavigationsection(codesamples_IndentationSamples);
		content += this.buildNavigationsection(codesamples_LineendsSamples);
		content += this.buildNavigationsection(codesamples_SamelineSamples);
		content += this.buildNavigationsection(codesamples_WhitespaceSamples);
		content += this.buildNavigationsection(codesamples_WrappingSamples);
		content += "</ul>\n";
		$("#navigation").html(content);
		$(window).on("hashchange",null,$bind(this,this.onHashChange));
		$("#searchBox").autocomplete({ source : this.keywords.getKeywordList()});
		$("#searchBtn").click($bind(this,this.onClickSearch));
		if(window.location.hash.length > 1) {
			this.onHashChange(null);
		}
	}
	buildNavigationsection(c) {
		var sectioName = haxe_rtti_Meta.getType(c).sectionName[0];
		var className = c.__name__;
		var content = "<li class=\"section\">" + sectioName + "\n<ul class=\"sectionEntries\">\n";
		var _g = 0;
		var _g1 = Type.getInstanceFields(c);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var fieldMeta = Reflect.field(haxe_rtti_Meta.getFields(c),field);
			if(fieldMeta == null) {
				continue;
			}
			var name = Reflect.field(fieldMeta,"codeSampleName");
			if(name == null) {
				name = Reflect.field(fieldMeta,"docName");
			}
			if(name == null) {
				continue;
			}
			var words = Reflect.field(fieldMeta,"keywords");
			if(words.length > 0) {
				this.keywords.addKeywords("" + className + "." + field,name[0],words[0]);
			}
			content += "<li data-class-name=\"" + className + "\" data-field-name=\"" + field + "\">" + ("<a href=\"#" + className + "." + field + "\" data-class-name=\"" + className + "\" data-field-name=\"" + field + "\">" + StringTools.replace(name[0],"."," ") + "</a></li>");
		}
		content += "</ul>\n</li>\n";
		return content;
	}
	onHashChange(event) {
		var name = window.location.hash;
		if(StringTools.startsWith(name,"#")) {
			name = HxOverrides.substr(name,1,null);
		}
		if(StringTools.startsWith(name,"search=")) {
			this.showSearchResults(HxOverrides.substr(name,7,null));
			return;
		}
		var parts = name.split(".");
		var fieldName = parts.pop();
		var className = parts.join(".");
		var instance = Type.createInstance($hxClasses[className],[]);
		if(instance == null) {
			$("#content").html("");
			return;
		}
		var field = Reflect.field(instance,fieldName);
		if(field == null) {
			$("#content").html("");
			return;
		}
		field.apply(instance,["#content",this.configFieldRegistry]);
		$(".sectionEntries li").removeClass("active");
		$(".sectionEntries li").filter("[data-class-name=\"" + className + "\"]").filter("[data-field-name=\"" + fieldName + "\"]").addClass("active");
	}
	onClickSearch(event) {
		var tmp = Std.string($("#searchBox").val());
		window.location.hash = "#search=" + tmp;
	}
	showSearchResults(search) {
		var content = "<h1>search results</h1>\n";
		var results = this.keywords.getSearchResults(search);
		if(results.length <= 0) {
			return;
		}
		content += "<ul id=\"searchResultContainer\">\n";
		var _g = 0;
		while(_g < results.length) {
			var result = results[_g];
			++_g;
			content += "<li><a href=\"#" + result.hash + "\">" + StringTools.replace(result.name,"."," ") + "</a></li>\n";
		}
		content += "</ul>\n";
		$("#content").html(content);
	}
}
$hxClasses["Navigation"] = Navigation;
Navigation.__name__ = "Navigation";
Object.assign(Navigation.prototype, {
	__class__: Navigation
	,configFieldRegistry: null
	,keywords: null
});
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	static fields(o) {
		var a = [];
		if(o != null) {
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static compare(a,b) {
		if(a == b) {
			return 0;
		} else if(a > b) {
			return 1;
		} else {
			return -1;
		}
	}
}
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			var _g = 0;
			var _g1 = x.length;
			while(_g < _g1) {
				var i = _g++;
				var c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
}
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
}
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
	,b: null
});
class StringTools {
	static htmlEscape(s,quotes) {
		var buf_b = "";
		var _g_offset = 0;
		var _g_s = s;
		while(_g_offset < _g_s.length) {
			var s1 = _g_s;
			var index = _g_offset++;
			var c = s1.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
			}
			var c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			var code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static endsWith(s,end) {
		var elen = end.length;
		var slen = s.length;
		if(slen >= elen) {
			return s.indexOf(end,slen - elen) == slen - elen;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		var c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		var buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
class Type {
	static createInstance(cl,args) {
		return new (Function.prototype.bind.apply(cl,[null].concat(args)));
	}
	static getInstanceFields(c) {
		var result = [];
		while(c != null) {
			var _g = 0;
			var _g1 = Object.getOwnPropertyNames(c.prototype);
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				switch(name) {
				case "__class__":case "__properties__":case "constructor":
					break;
				default:
					if(result.indexOf(name) == -1) {
						result.push(name);
					}
				}
			}
			c = c.__super__;
		}
		return result;
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			var e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			var c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
	static enumEq(a,b) {
		if(a == b) {
			return true;
		}
		try {
			var e = a.__enum__;
			if(e == null || e != b.__enum__) {
				return false;
			}
			if(a._hx_index != b._hx_index) {
				return false;
			}
			var enm = $hxEnums[e];
			var ctorName = enm.__constructs__[a._hx_index];
			var params = enm[ctorName].__params__;
			var _g = 0;
			while(_g < params.length) {
				var f = params[_g];
				++_g;
				if(!Type.enumEq(a[f],b[f])) {
					return false;
				}
			}
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return false;
		}
		return true;
	}
}
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
class codesamples_SampleBase {
	buildDocSamplePage(container,codeSampleName,docText,configText,fieldDef,codeSample,registry) {
		var content = "<h1>" + StringTools.replace(codeSampleName,"."," ") + "</h1>\n";
		this.configFieldRegistry = registry;
		this.configFieldRegistry.setCurrentSampleConfig(configText);
		content += "<div id=\"configWrapper\">";
		content += "<div id=\"docContainer\">" + Markdown.markdownToHtml(docText) + "</div>";
		content += "<div id=\"configContainer\"><div id=\"configHeader\">hxformat.json" + "<div id=\"configButtons\"><button id=\"btnApply\">Apply</button>" + "<button id=\"btnEdit\">Edit</button><button id=\"btnDownload\">Download</button></div></div>" + ("<pre id=\"config\">" + this.configFieldRegistry.buildConfigHtml() + "</pre>") + ("<textarea id=\"configText\">" + this.configFieldRegistry.makeCustomConfig() + "</textarea></div>");
		content += "</div>";
		this.currentCodeSample = codeSample;
		this.codeWasModified = false;
		var result = formatter_Formatter.format(formatter_FormatterInput.Code(codeSample),this.configFieldRegistry.currentConfig);
		switch(result._hx_index) {
		case 0:
			var formattedCode = result.formattedCode;
			content += "<div id=\"codeSampleContainer\"><textarea id=\"codeSample\">" + formattedCode + "</textarea></div>";
			break;
		case 1:
			var _g = result.errorMessage;
			break;
		case 2:
			break;
		}
		$(container).html(content);
		this.installConfigEventHandler();
		$("#codeSample").change($bind(this,this.onChangeCodeSample));
		$("#btnDownload").click($bind(this,this.onDownloadConfig));
		$("#btnApply").click($bind(this,this.onApplyConfig));
		$("#btnEdit").click($bind(this,this.onEditConfig));
		$("#configText").change($bind(this,this.onChangeConfig));
	}
	installConfigEventHandler() {
		$(".config-field-combo").change($bind(this,this.onChangeCombo));
		$(".config-field-bool").change($bind(this,this.onChangeBool));
		$(".config-field-bool-label").click($bind(this,this.onClickBoolLabel));
		$(".config-field-number").change($bind(this,this.onChangeNumber));
		$(".config-field-text").change($bind(this,this.onChangeText));
	}
	onChangeCombo(event) {
		var element = $(event.target);
		var fieldPath = element.data("field-path");
		var value = element.val();
		this.applyConfigValue(fieldPath,value);
		this.updateFormat();
	}
	onClickBoolLabel(event) {
		var element = $(event.target);
		var fieldPath = element.data("field-path");
		element = $("input[data-field-path=\"" + fieldPath + "\"]");
		element.prop("checked",!element.prop("checked"));
		var value = false;
		if(element.is(":checked")) {
			value = true;
		}
		$("label[data-field-path=\"" + fieldPath + "\"]").text(value);
		this.applyConfigValue(fieldPath,value);
		this.updateFormat();
	}
	onChangeBool(event) {
		var element = $(event.target);
		var fieldPath = element.data("field-path");
		var value = false;
		if(element.is(":checked")) {
			value = true;
		}
		$("label[data-field-path=\"" + fieldPath + "\"]").text(value);
		this.applyConfigValue(fieldPath,value);
		this.updateFormat();
	}
	onChangeNumber(event) {
		var element = $(event.target);
		var fieldPath = element.data("field-path");
		var value = element.val();
		this.applyConfigValue(fieldPath,value);
		this.updateFormat();
	}
	onChangeText(event) {
		var element = $(event.target);
		var fieldPath = element.data("field-path");
		var value = element.val();
		this.applyConfigValue(fieldPath,value);
		this.updateFormat();
	}
	onChangeCodeSample(event) {
		this.codeWasModified = true;
		this.updateFormat();
	}
	onDownloadConfig(event) {
		var jsonText = this.configFieldRegistry.makeCustomConfig();
		var blob = new Blob([jsonText],{ type : "application/json;charset=utf-8"});
		var hxformatUrl = URL.createObjectURL(blob);
		$("#downloadLink").attr({ "download" : "hxformat.json", "href" : hxformatUrl})[0].click();
		URL.revokeObjectURL(hxformatUrl);
	}
	onEditConfig(event) {
		$("#config").hide();
		var textElement = $("#configText");
		textElement.show();
		textElement.val(this.configFieldRegistry.makeCustomConfig());
		$("#btnEdit").hide();
		$("#btnApply").show();
	}
	onApplyConfig(event) {
		$("#config").show();
		$("#configText").hide();
		this.onChangeConfig(event);
		$("#config").html(this.configFieldRegistry.buildConfigHtml());
		$("#btnEdit").show();
		$("#btnApply").hide();
		this.updateFormat();
		this.installConfigEventHandler();
	}
	onChangeConfig(event) {
		var textElement = $("#configText");
		var newConfigText = textElement.val();
		try {
			this.configFieldRegistry.setCurrentSampleConfig(newConfigText);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
		this.updateFormat();
		textElement.val(this.configFieldRegistry.makeCustomConfig());
	}
	applyConfigValue(fieldPath,value) {
		this.configFieldRegistry.setFieldValue(fieldPath,value);
		window.console.info("setting " + fieldPath + " = " + Std.string(value));
	}
	updateFormat() {
		var codeElement = $("#codeSample");
		var codeSample = codeElement.val();
		if(!this.codeWasModified) {
			codeSample = this.currentCodeSample;
		}
		var result = formatter_Formatter.format(formatter_FormatterInput.Code(codeSample),this.configFieldRegistry.currentConfig);
		switch(result._hx_index) {
		case 0:
			var formattedCode = result.formattedCode;
			codeElement.val(formattedCode);
			break;
		case 1:
			var errorMessage = result.errorMessage;
			window.console.info("format failed: " + errorMessage);
			break;
		case 2:
			break;
		}
	}
}
$hxClasses["codesamples.SampleBase"] = codesamples_SampleBase;
codesamples_SampleBase.__name__ = "codesamples.SampleBase";
Object.assign(codesamples_SampleBase.prototype, {
	__class__: codesamples_SampleBase
	,currentCodeSample: null
	,codeWasModified: null
	,configFieldRegistry: null
});
class codesamples_CommonSamples extends codesamples_SampleBase {
	constructor() {
		super();
	}
	allman_curlies(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"allman.curlies","probably the most searched for option of formatter :)\n\n> **Note**: `lineEnds.leftCurly` affects all left curlies, there are specialised options for\n> different curly places (e.g. `lineEnds.blockCurly`, `lineEnds.objectLiteralCurly`, etc.)\n> see [haxeflixel style sample](#codesamples.CommonSamples.haxeflixel_style)","{\n    \"lineEnds\": {\n        \"leftCurly\": \"both\",\n\t\t\"emptyCurly\": \"break\"\n    }\n}","","class Main {\n    public function new () {}\n\n    public function foo (param1:Int) {\n\t\ttrace(param1);\n\t\tvar obj = {\n\t\t\tx:100,\n\t\t\ty:100,\n\t\t\tz:100\n\t\t\t};\n\t}\n}\n",configFieldRegistry);
	}
	haxeflixel_style(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"haxeflixel.style","formatter configuration used by HaxeFlixel\n","\n{\n\t\"lineEnds\": {\n\t\t\"leftCurly\": \"both\",\n\t\t\"rightCurly\": \"both\",\n\t\t\"objectLiteralCurly\": {\n\t\t\t\"leftCurly\": \"after\"\n\t\t}\n\t},\n\t\"sameLine\": {\n\t\t\"ifElse\": \"next\",\n\t\t\"doWhile\": \"next\",\n\t\t\"tryBody\": \"next\",\n\t\t\"tryCatch\": \"next\"\n\t}\n}","","class Main {\n    public function new () {}\n\n    public function foo (param1:Int) {\n\t\tvar obj = {\n\t\t\tx:100,\n\t\t\ty:100\n\t\t\t};\n\n\t\tdo {\n\t\t\tsomething();\n\t\t} while (true);\n\n\t\tif (true) {\n\t\t\tsomething();\n\t\t} else {\n\t\t\tdoNothing();\n\t\t}\n\n\t\ttry\tsomethingRisky(); catch (e:Excpetion)\n\t}\n}\n",configFieldRegistry);
	}
	indentation_with_space(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"indentation.with.space","indentation character takes a string that is either any number of (literal) spaces (e.g. `␣␣`, `␣␣␣␣`, etc.) or the text `tab` for indentation with tabs","{\n    \"indentation\": {\n        \"character\": \"    \"\n    }\n}","","class Main {\n    public function new () {}\n\n    public function foo (param1:Int) {\n\t\ttrace(param1);\n\t}\n}\n",configFieldRegistry);
	}
}
$hxClasses["codesamples.CommonSamples"] = codesamples_CommonSamples;
codesamples_CommonSamples.__name__ = "codesamples.CommonSamples";
codesamples_CommonSamples.__super__ = codesamples_SampleBase;
Object.assign(codesamples_CommonSamples.prototype, {
	__class__: codesamples_CommonSamples
});
class codesamples_EmptylinesSamples extends codesamples_SampleBase {
	constructor() {
		super();
	}
	import_and_using_emptylines(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"import.and.using.emptylines","showcases different empty lines settings for imports and using\n\ngoes great with VSCode's organise imports code action","{\n\t\"emptyLines\" : {\n\t\t\"importAndUsing\": {\n\t\t\t\"betweenImportsLevel\": \"firstLevelPackage\",\n\t\t\t\"betweenImports\": 1,\n\t\t\t\"beforeUsing\": 1\n\t\t},\n\t\t\"maxAnywhereInFile\": 1\n\t}\n}","","package formatter.marker;\n\nimport haxe.Int64;\nimport haxe.Json;\nimport haxe.macro.Expr;\nimport haxe.macro.ExprTools;\nimport formatter.codedata.CodeLine;\nimport formatter.codedata.CodeLines;\nimport formatter.codedata.data.Data;\nimport formatter.config.EmptyLinesConfig;\nimport formatter.marker.wrapping.marker.warpping.WrapBase;\nimport formatter.marker.wrapping.marker.warpping.WrapDefault;\nimport formatter.marker.wrapping.marker.indentation.Indenter;\nimport tokentree.utils.FieldUtils;\nusing haxe.Int64;\nusing haxe.Json;\nusing formatter.codedata.CodeLine;\nusing formatter.codedata.CodeLines;\nusing formatter.codedata.data.Data;\nusing formatter.config.EmptyLinesConfig;\nusing tokentree.utils.FieldUtils;\n#if php\nimport php.Lib;\nimport php.Web;\n#else\nimport sys.Lib;\n#end\nimport sys.FileSystem;\n#if !php\nimport sys.Lib;\n#else\nimport php.Lib;\nimport php.Web;\n#end\nimport sys.FileSystem;\n#if !php\nimport String;\n#end\n",configFieldRegistry);
	}
}
$hxClasses["codesamples.EmptylinesSamples"] = codesamples_EmptylinesSamples;
codesamples_EmptylinesSamples.__name__ = "codesamples.EmptylinesSamples";
codesamples_EmptylinesSamples.__super__ = codesamples_SampleBase;
Object.assign(codesamples_EmptylinesSamples.prototype, {
	__class__: codesamples_EmptylinesSamples
});
class codesamples_IndentationSamples extends codesamples_SampleBase {
	constructor() {
		super();
	}
	trailing_whitespace(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"trailing.whitespace","adds whitespace to empty lines by copying indentation from previous line","{\n\t\"indentation\": {\n\t\t\"trailingWhitespace\": true\n\t}\n}","","package my.pack;\nimport haxe.Json;\nusing StringTools;\n\nclass Main {\n\tpublic static function test1() {\n\t\ttrace(i);\n\n\t\tif (true) {\n\t\t\ttrace(\"true\");\n\n\t\t\ttrace(\"true\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttrace(\"false\");\n\n\t\t\ttrace(\"false\");\n\t\t}\n\n\t\ttrace(i);\n\t}\n\n\tpublic static function test2()\n\t\ttrace(i);\n}\n\ntypedef MyType = Array<Main>;\n",configFieldRegistry);
	}
}
$hxClasses["codesamples.IndentationSamples"] = codesamples_IndentationSamples;
codesamples_IndentationSamples.__name__ = "codesamples.IndentationSamples";
codesamples_IndentationSamples.__super__ = codesamples_SampleBase;
Object.assign(codesamples_IndentationSamples.prototype, {
	__class__: codesamples_IndentationSamples
});
class codesamples_LineendsSamples extends codesamples_SampleBase {
	constructor() {
		super();
	}
}
$hxClasses["codesamples.LineendsSamples"] = codesamples_LineendsSamples;
codesamples_LineendsSamples.__name__ = "codesamples.LineendsSamples";
codesamples_LineendsSamples.__super__ = codesamples_SampleBase;
Object.assign(codesamples_LineendsSamples.prototype, {
	__class__: codesamples_LineendsSamples
});
class codesamples_SamelineSamples extends codesamples_SampleBase {
	constructor() {
		super();
	}
	blockless_function_body(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"blockless.function.body","`keep` tries to keep linebreaks from input source","{\n\t\"sameLine\": {\n\t\t\"functionBody\": \"same\",\n\t\t\"anonFunctionBody\": \"same\"\n\t}\n}","","class Main {\n\tpublic static function test1() {\n\t\t// input has linebreaks\n\t\t[1, 2, 3].map(function()\n\t\t\ttrace(i));\n\t}\n\n\t// input has linebreaks\n\tpublic static function test2()\n\t\t[1, 2, 3].map(function()\n\t\t\ttrace(i));\n\n\tpublic static function test3() {\n\t\t// input has no linebreaks\n\t\t[1, 2, 3].map(function() trace(i));\n\t}\n\n\t// input has no linebreaks\n\tpublic static function test4() [1, 2, 3].map(function() trace(i))\n}\n",configFieldRegistry);
	}
}
$hxClasses["codesamples.SamelineSamples"] = codesamples_SamelineSamples;
codesamples_SamelineSamples.__name__ = "codesamples.SamelineSamples";
codesamples_SamelineSamples.__super__ = codesamples_SampleBase;
Object.assign(codesamples_SamelineSamples.prototype, {
	__class__: codesamples_SamelineSamples
});
class codesamples_WhitespaceSamples extends codesamples_SampleBase {
	constructor() {
		super();
	}
	colon_whitespace(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"colon.whitespace","\n> **Note**: whitespace policies can be overruled by code parts preceeding or following a whitespace location,\n> because these code parts might have whitespace policies that contradict their neighbours.","{\n    \"whitespace\": {\n\t\t\"colonPolicy\": \"none\",\n\t\t\"caseColonPolicy\": \"onlyAfter\",\n\t\t\"objectFieldColonPolicy\": \"after\",\n\t\t\"typeHintColonPolicy\": \"none\",\n\t\t\"typeCheckColonPolicy\": \"around\",\n\t\t\"ternaryPolicy\": \"around\"\n    }\n}","","class Main {\n\tfunction test(param1:Int,param2:Array<String>, callback:(index:Int)->String) {\n\n\t\tswitch((param1:Float)) {\n\t\t\tcase _: doSomething();\n\t\t}\n\t\treturn {x:10, y:20, z:30}\n\t}\n\tfunction test2(param1:Int) {\n\t\treturn (param1 < 100)?true:false;\n\t}\n}\n",configFieldRegistry);
	}
	conditional_parens_detailed(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"conditional.parens.detailed","The following whitespace settings were added in version 1.11.0 (all childs of `whitespace.parenConfig`):\n\n- `catchParens` - for `catch (expr)`\n- `ifConditionParens` - for `if (expr)`\n- `sharpConditionParens` - for `#if (expr)`\n- `switchConditionParens` - for `switch (expr)`\n- `whileConditionParens` - for `while (expr)`\n\nAll use the same structure as `whitespace.parenConfig.conditionParens` (see [conditional parens short](#codesamples.WhitespaceSamples.conditional_parens_short))\nand allow a finer control over whitespace settings for each location.\nThe new settings default to `null` which means `conditionParens` applies to all locations.\nIt also means you only have to set values for those locations where you want formatter to behave differently.\n\n> **Note**: Using `removeInnerWhenEmpty` is technically possible, but since code with an empty condtion expression\n> doesn't make sense and probably won't compile there isn't much use to it.","{\n\t\"whitespace\": {\n\t\t\"parenConfig\": {\n\t\t\t\"catchParens\": {\n\t\t\t\t\"openingPolicy\": \"onlyAfter\",\n\t\t\t\t\"closingPolicy\": \"before\"\n\t\t\t},\n\t\t\t\"ifConditionParens\": {\n\t\t\t\t\"openingPolicy\": \"onlyAfter\",\n\t\t\t\t\"closingPolicy\": \"before\"\n\t\t\t},\n\t\t\t\"sharpConditionParens\": {\n\t\t\t\t\"openingPolicy\": \"onlyAfter\",\n\t\t\t\t\"closingPolicy\": \"before\"\n\t\t\t},\n\t\t\t\"switchConditionParens\": {\n\t\t\t\t\"openingPolicy\": \"onlyAfter\",\n\t\t\t\t\"closingPolicy\": \"before\"\n\t\t\t},\n\t\t\t\"whileConditionParens\": {\n\t\t\t\t\"openingPolicy\": \"onlyAfter\",\n\t\t\t\t\"closingPolicy\": \"before\"\n\t\t\t}\n\t\t}\n\t}\n}","","class Main {\n\tstatic function main() {\n\t\ttry {\n\t\t\t#if (haxe_ver > 4.0)\n\t\t\t#end\n\n\t\t\tswitch (a) {\n\t\t\t\tdefault:\n\t\t\t\t\tv = (a + b);\n\t\t\t}\n\n\t\t\tif (a) {\n\t\t\t\tv = (a + b);\n\t\t\t}\n\n\t\t\twhile (true) {\n\t\t\t\tv = (a + b);\n\t\t\t}\n\n\t\t\tdo {\n\t\t\t\tv = (a + b);\n\t\t\t} while (true);\n\t\t} catch (e:Any)\n\t}\n}\n",configFieldRegistry);
	}
	conditional_parens_short(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"conditional.parens.short","Whitespace policies for parens in `whitespace.parenConfig` as well as `whitespace.bracesConfig` for curly braces\nuse a data structure that has three fields for each of their locations:\n\n- `openingPolicy` - whitespace policy for opening parens or curly\n- `closingPolicy` - whitespace policy for closing parens or curly\n- `removeInnerWhenEmpty` - true when you want to remove inner whitespace when parens / curlies are empty\n\npolicy can be one of the following (element being either an opening or a closing parens / curly):\n\n- `none` - no whitespace before or after element\n- `before` - add whitespace before element\n- `noneBefore` - never add whitespace before element\n- `onlyBefore` - only add whitespace before element\n- `after` - add whitespace after element\n- `noneAfter` - never add whitespace after element\n- `onlyAfter` - only add whitespace after element\n- `around` - add whitespace before and after element\n\n> **Note**: whitespace policies can be overruled by code parts preceeding or following a whitespace location,\n> because these code parts might have whitespace policies that contradict their neighbours.","{\n\t\"whitespace\": {\n\t\t\"parenConfig\": {\n\t\t\t\"conditionParens\": {\n\t\t\t\t\"openingPolicy\": \"onlyAfter\",\n\t\t\t\t\"closingPolicy\": \"before\"\n\t\t\t}\n\t\t}\n\t}\n}","","class Main {\n\tstatic function main() {\n\t\ttry {\n\t\t\t#if (haxe_ver > 4.0)\n\t\t\t#end\n\n\t\t\tswitch (a) {\n\t\t\t\tdefault:\n\t\t\t\t\tv = (a + b);\n\t\t\t}\n\n\t\t\tif (a) {\n\t\t\t\tv = (a + b);\n\t\t\t}\n\n\t\t\twhile (true) {\n\t\t\t\tv = (a + b);\n\t\t\t}\n\n\t\t\tdo {\n\t\t\t\tv = (a + b);\n\t\t\t} while (true);\n\t\t} catch (e:Any)\n\t}\n}\n",configFieldRegistry);
	}
	function_parens(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"function.parens","See [conditional parens short](#codesamples.WhitespaceSamples.conditional_parens_short) for details about structure and values.\n\n> **Note**: whitespace policies can be overruled by code parts preceeding or following a whitespace location,\n> because these code parts might have whitespace policies that contradict their neighbours.","{\n    \"whitespace\": {\n        \"parenConfig\": {\n            \"funcParamParens\": {\n                \"openingPolicy\": \"before\",\n                \"closingPolicy\": \"none\",\n                \"removeInnerWhenEmpty\": true\n            },\n\t\t\t\"anonFuncParamParens\": {\n                \"openingPolicy\": \"none\",\n                \"closingPolicy\": \"onlyAfter\",\n                \"removeInnerWhenEmpty\": true\n\t\t\t}\n        }\n    }\n}","","class Main {\n    function new () {}\n\n\tfunction test(param1:Int,param2:Array<String>, callback:(index:Int)->String, callback2:()->String) {\n\t\tparam2.push(callback(param1));\n\t}\n}\n",configFieldRegistry);
	}
	function_types_and_arrows(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"function.types.and.arrows","\n> **Note**: whitespace policies can be overruled by code parts preceeding or following a whitespace location,\n> because these code parts might have whitespace policies that contradict their neighbours.","{\n    \"whitespace\": {\n\t\t\"arrowFunctionsPolicy\": \"around\",\n\t\t\"functionTypeHaxe3Policy\": \"none\",\n\t\t\"functionTypeHaxe4Policy\": \"around\"\n    }\n}","","typedef MyType = Bool->Void;\n\nclass Main {\n\tvar f = () -> if (false) 1 else 0;\n\tvar f = () ->trace(\"\");\n\tvar f = () -> {};\n\tvar f = arg-> {};\n\tvar f = (arg) -> {};\n\tvar f = (arg1:Int, arg2:String) -> {};\n\n\t// old function type syntax\n\tvar f:Void->Void;\n\tvar f:Int->String->Void;\n\tvar f:(Int->Int) ->Int->Int;\n\n\t// new function type syntax\n\tvar f:() ->Void;\n\tvar f:(Int) ->Int;\n\tvar f:(name:String) ->Void;\n\tvar f:(Int, String) ->Bool;\n\tvar f:(resolve:(value:Dynamic) ->Void, reject:(reason:Dynamic) ->Void) ->Void;\n}\n",configFieldRegistry);
	}
}
$hxClasses["codesamples.WhitespaceSamples"] = codesamples_WhitespaceSamples;
codesamples_WhitespaceSamples.__name__ = "codesamples.WhitespaceSamples";
codesamples_WhitespaceSamples.__super__ = codesamples_SampleBase;
Object.assign(codesamples_WhitespaceSamples.prototype, {
	__class__: codesamples_WhitespaceSamples
});
class codesamples_WrappingSamples extends codesamples_SampleBase {
	constructor() {
		super();
	}
	array_matrix_wrapping(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"array.matrix.wrapping","wrapping arrays in matrix layout\n\narray wrapping only works on arrays that have an equal number of elements per line, so your input source code should already have a matrix shape\n\n> **Note**: `equalNumber` is not implemented yet","{\n\t\"wrapping\": {\n\t\t\"arrayMatrixWrap\": \"matrixWrapWithAlign\",\n\t\t\"arrayWrap\":  {\n\t\t\t\"defaultWrap\": \"fillLine\",\n\t\t\t\"defaultLocation\": \"afterLast\"\n\t\t},\n\t\t\"maxLineLength\": 100\n\t}\n}","","class Main {\n\tstatic function main() {\n\t\tsampleMapArray = [\n\t\t\t0, 1, 0, 1,\n\t\t\t1, 1, 1, 1,\n\t\t\t1, 0, 0, 1\n\t\t];\n\t\treturn [\n\t\t\t-1.0, -1.0, 0, 0,\n\t\t\t1.0, -1.0, 1, 0,\n\t\t\t-1.0,  1.0, 0, 1,\n\t\t\t1.0, -1.0, 1, 0,\n\t\t\t1.0,  1.0, 1, 1,\n\t\t\t-1.0,  1.0, 0, 1\n\t\t];\n\n\t\treturn [xAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0,       0,       0,       1];\n\n\t\trotation =  [1, 0, 0, 0,\n\t\t\t0, Math.cos(alpha), -Math.sin(alpha),  0,\n\t\t\t0, Math.sin(alpha), Math.cos(alpha),   0,\n\t\t\t0, 0, 0, 1];\n\n\t\trotation =  [Math.cos(alpha), 0, Math.sin(alpha), 0,\n\t\t\t0, 1, 0,  0,\n\t\t\t-Math.sin(alpha), 0, Math.cos(alpha),   0,\n\t\t\t0, 0, 0, 1];\n\t}\n\n\tstatic var offsetAutoTile:Array<Int> =\n\t\t[\n\t\t\t0, 0, 0, 0, 2, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t11, 11, 0, 0, 13, 13, 0, 14, 0, 0, 0, 0, 18, 18, 0, 19,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t51, 51, 0, 0, 53, 53, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t62, 62, 0, 0, 64, 64, 0, 65, 0, 0, 0, 0, 69, 69, 0, 70,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t86, 86, 0, 0, 88, 88, 0, 89, 0, 0, 0, 0, 93, 93, 0, 94,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 159, 0, 0, 0, 162, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 172, 0, 0, 0, 175, 0, 176, 0, 0, 0, 0, 0, 181, 0, 182,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 199, 0, 0, 0, 202, 0, 203, 0, 0, 0, 0, 0, 208, 0, 209\n\t\t];\n}\n",configFieldRegistry);
	}
	case_pattern_wrapping(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"case.pattern.wrapping","wrapping large amounts of case patterns\n\n> **Note**: `equalNumber` is not implemented yet","{\n\t\"wrapping\": {\n\t\t\"casePattern\": {\n\t\t\t\"defaultWrap\": \"fillLine\",\n\t\t\t\"defaultLocation\": \"beforeLast\"\n\t\t},\n\t\t\"maxLineLength\": 100\n\t}\n}","","class Main {\n\tstatic function main() {\n\t\tswitch (part.toLowerCase()) {\n\t\t\tcase \"__halt_compiler\" | \"abstract\" | \"and\" | \"array\" | \"as\" | \"break\" | \"callable\" | \"case\" | \"catch\" | \"class\" | \"clone\" | \"const\"\n\t\t\t\t| \"continue\" | \"declare\" | \"default\" | \"die\" | \"do\" | \"echo\" | \"else\" | \"elseif\" | \"empty\" | \"enddeclare\" | \"endfor\" | \"endforeach\" | \"endif\"\n\t\t\t\t| \"endswitch\" | \"endwhile\" | \"eval\" | \"exit\" | \"extends\" | \"final\" | \"finally\" | \"for\" | \"foreach\" | \"function\" | \"global\" | \"goto\" | \"if\"\n\t\t\t\t| \"implements\" | \"include\" | \"include_once\" | \"instanceof\" | \"insteadof\" | \"interface\" | \"isset\" | \"list\" | \"namespace\" | \"new\" | \"or\"\n\t\t\t\t| \"print\" | \"private\" | \"protected\" | \"public\" | \"require\" | \"require_once\" | \"return\" | \"static\" | \"switch\" | \"throw\" | \"trait\" | \"try\"\n\t\t\t\t| \"unset\" | \"use\" | \"var\" | \"while\" | \"xor\" | \"yield\" | \"__class__\" | \"__dir__\" | \"__file__\" | \"__function__\" | \"__line__\" | \"__method__\"\n\t\t\t\t| \"__trait__\" | \"__namespace__\" | \"int\" | \"float\" | \"bool\" | \"string\" | \"true\" | \"false\" | \"null\" | \"parent\" | \"void\" | \"iterable\" | \"object\":\n\t\t\t\tpart += '_hx';\n\t\t\tcase \"__halt_compiler\", \"abstract\", \"and\", \"array\", \"as\", \"break\", \"callable\", \"case\", \"catch\", \"class\", \"clone\", \"const\", \"continue\", \"declare\"\n\t\t\t\t, \"default\", \"die\", \"do\", \"echo\", \"else\", \"elseif\", \"empty\", \"enddeclare\", \"endfor\", \"endforeach\", \"endif\", \"endswitch\", \"endwhile\", \"eval\"\n\t\t\t\t, \"exit\", \"extends\", \"final\", \"finally\", \"for\", \"foreach\", \"function\", \"global\", \"goto\", \"if\", \"implements\", \"include\", \"include_once\"\n\t\t\t\t, \"instanceof\", \"insteadof\", \"interface\", \"isset\", \"list\", \"namespace\", \"new\", \"or\", \"print\", \"private\", \"protected\", \"public\", \"require\"\n\t\t\t\t, \"require_once\", \"return\", \"static\", \"switch\", \"throw\", \"trait\", \"try\", \"unset\", \"use\", \"var\", \"while\", \"xor\", \"yield\", \"__class__\"\n\t\t\t\t, \"__dir__\", \"__file__\", \"__function__\", \"__line__\", \"__method__\", \"__trait__\", \"__namespace__\", \"int\", \"float\", \"bool\", \"string\", \"true\"\n\t\t\t\t, \"false\", \"null\", \"parent\", \"void\", \"iterable\", \"object\":\n\t\t\t\tpart += '_hx';\n\t\t\tcase \"__halt_compiler\", \"abstract\" | \"and\", \"array\" | \"as\", \"break\" | \"callable\", \"case\" | \"catch\", \"class\" | \"clone\", \"const\" | \"continue\"\n\t\t\t\t, \"declare\" | \"default\", \"die\" | \"do\", \"echo\" | \"else\", \"elseif\" | \"empty\", \"enddeclare\" | \"endfor\", \"endforeach\" | \"endif\", \"endswitch\"\n\t\t\t\t| \"endwhile\", \"eval\" | \"exit\", \"extends\" | \"final\", \"finally\" | \"for\", \"foreach\" | \"function\", \"global\" | \"goto\", \"if\" | \"implements\"\n\t\t\t\t, \"include\" | \"include_once\", \"instanceof\" | \"insteadof\", \"interface\" | \"isset\", \"list\" | \"namespace\", \"new\" | \"or\", \"print\" | \"private\"\n\t\t\t\t, \"protected\" | \"public\", \"require\" | \"require_once\", \"return\" | \"static\", \"switch\" | \"throw\", \"trait\" | \"try\", \"unset\" | \"use\", \"var\"\n\t\t\t\t| \"while\", \"xor\" | \"yield\", \"__class__\" | \"__dir__\", \"__file__\" | \"__function__\", \"__line__\" | \"__method__\", \"__trait__\" | \"__namespace__\"\n\t\t\t\t, \"int\" | \"float\", \"bool\" | \"string\", \"true\" | \"false\", \"null\" | \"parent\", \"void\" | \"iterable\", \"object\":\n\t\t\t\tpart += '_hx';\n\t\t\tcase _:\n\t\t}\n\t}\n}\n",configFieldRegistry);
	}
	method_chain_wrapping(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"method.chain.wrapping","wrapping chains of method calls\n\n> **Note**: `equalNumber` is not implemented yet","{\n\t\"wrapping\": {\n\t\t\"methodChain\": {\n\t\t\t\"defaultWrap\": \"onePerLine\",\n\t\t\t\"defaultLocation\": \"afterLast\",\n\t\t\t\"rules\": []\n\t\t},\n\t\t\"maxLineLength\": 110\n\t}\n}","","class Main {\n\tfunction main() {\n\t\towner.addEntity().addEntity().addEntity().addEntity().addEntity();\n\t\towner.addEntity() // test\n\t\t\t.addEntity().addEntity().addEntity().addEntity();\n\t\towner // test\n\t\t\t.addEntity().addEntity().addEntity().addEntity().addEntity();\n\t\towner.addEntity().addEntity().addEntity().addEntity().addEntity(); // test\n\t\towner.addEntity() // test\n\t\t\t.addEntity() // test\n\t\t\t.addEntity() // test\n\t\t\t.addEntity() // test\n\t\t\t.addEntity(); // test\n\n\t\tnew Entity() // test\n\t\t\t.addComponent(new PointerTap()) // test\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE))\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE))\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE))\n\t\t\t.addComponent(new PointerTap()); // test\n\t\tnew Entity().addComponent(new PointerTap()) // test\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE))\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE))\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE))\n\t\t\t.addComponent(new PointerTap()); // test\n\t\tnew Entity().addComponent(new PointerTap()) // test\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE))\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE))\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE))\n\t\t\t.addComponent(new PointerTap());\n\t\tnew Entity() // test\n\t\t\t.addComponent(new PointerTap()) // test\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE)) // test\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE)) // test\n\t\t\t.addComponent(_sprite = FlumpAssets.getMovieSprite(\"mute_button\", LibraryName.INTERFACE)) // test\n\t\t\t.addComponent(new PointerTap()); // test\n\t}\n}\n",configFieldRegistry);
	}
	operator_add_chain_wrapping(container,configFieldRegistry) {
		this.buildDocSamplePage(container,"operator.add.chain.wrapping","wrapping of +/- chains\n\n> **Note**: `equalNumber` is not implemented yet","{\n\t\"wrapping\": {\n\t\t\"opAddSubChain\": {\n\t\t\t\"defaultWrap\": \"fillLine\",\n\t\t\t\"defaultLocation\": \"beforeLast\",\n\t\t\t\"rules\": []\n\t\t},\n\t\t\"maxLineLength\": 100\n\t}\n}","","class Main {\n\tstatic function main() {\n\t\t\t\treturn\n                       1 * ((this[0] * this[5] - this[4] * this[1]) * (this[10] * this[15] - this[14] * this[11]) - (this[0] * this[9] - this[8] * this[1]) * (this[6] * this[15] - this[14] * this[7]) +\n                               (this[0] * this[13] - this[12] * this[1]) * (this[6] * this[11] - this[10] * this[7]) + (this[4] * this[9] - this[8] * this[5]) * (this[2] * this[15] - this[14] * this[3]) - (this[4] * this[13] - this[12] * this[5]) * (this[2] * this[11] - this[10] * this[3]) +\n                                       (this[8] * this[13] - this[12] * this[9]) * (this[2] * this[7] - this[6] * this[3]));\n\t}\n}\n",configFieldRegistry);
	}
}
$hxClasses["codesamples.WrappingSamples"] = codesamples_WrappingSamples;
codesamples_WrappingSamples.__name__ = "codesamples.WrappingSamples";
codesamples_WrappingSamples.__super__ = codesamples_SampleBase;
Object.assign(codesamples_WrappingSamples.prototype, {
	__class__: codesamples_WrappingSamples
});
class codesamples_config_ConfigFieldRegistry {
	constructor() {
		var _g = new haxe_ds_StringMap();
		var value = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["emptyLines.finalNewline"] != null) {
			_g.setReserved("emptyLines.finalNewline",value);
		} else {
			_g.h["emptyLines.finalNewline"] = value;
		}
		var value1 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.maxAnywhereInFile"] != null) {
			_g.setReserved("emptyLines.maxAnywhereInFile",value1);
		} else {
			_g.h["emptyLines.maxAnywhereInFile"] = value1;
		}
		var value2 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.beforePackage"] != null) {
			_g.setReserved("emptyLines.beforePackage",value2);
		} else {
			_g.h["emptyLines.beforePackage"] = value2;
		}
		var value3 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.afterPackage"] != null) {
			_g.setReserved("emptyLines.afterPackage",value3);
		} else {
			_g.h["emptyLines.afterPackage"] = value3;
		}
		var value4 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.betweenTypes"] != null) {
			_g.setReserved("emptyLines.betweenTypes",value4);
		} else {
			_g.h["emptyLines.betweenTypes"] = value4;
		}
		var value5 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.betweenSingleLineTypes"] != null) {
			_g.setReserved("emptyLines.betweenSingleLineTypes",value5);
		} else {
			_g.h["emptyLines.betweenSingleLineTypes"] = value5;
		}
		var value6 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.afterFileHeaderComment"] != null) {
			_g.setReserved("emptyLines.afterFileHeaderComment",value6);
		} else {
			_g.h["emptyLines.afterFileHeaderComment"] = value6;
		}
		var value7 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.betweenMultilineComments"] != null) {
			_g.setReserved("emptyLines.betweenMultilineComments",value7);
		} else {
			_g.h["emptyLines.betweenMultilineComments"] = value7;
		}
		var value8 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("one" , String),js_Boot.__cast("none" , String)]);
		if(__map_reserved["emptyLines.lineCommentsBetweenTypes"] != null) {
			_g.setReserved("emptyLines.lineCommentsBetweenTypes",value8);
		} else {
			_g.h["emptyLines.lineCommentsBetweenTypes"] = value8;
		}
		var value9 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("one" , String),js_Boot.__cast("none" , String)]);
		if(__map_reserved["emptyLines.lineCommentsBetweenFunctions"] != null) {
			_g.setReserved("emptyLines.lineCommentsBetweenFunctions",value9);
		} else {
			_g.h["emptyLines.lineCommentsBetweenFunctions"] = value9;
		}
		var value10 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.beforeRightCurly"] != null) {
			_g.setReserved("emptyLines.beforeRightCurly",value10);
		} else {
			_g.h["emptyLines.beforeRightCurly"] = value10;
		}
		var value11 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.afterLeftCurly"] != null) {
			_g.setReserved("emptyLines.afterLeftCurly",value11);
		} else {
			_g.h["emptyLines.afterLeftCurly"] = value11;
		}
		var value12 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.afterReturn"] != null) {
			_g.setReserved("emptyLines.afterReturn",value12);
		} else {
			_g.h["emptyLines.afterReturn"] = value12;
		}
		var value13 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.beforeBlocks"] != null) {
			_g.setReserved("emptyLines.beforeBlocks",value13);
		} else {
			_g.h["emptyLines.beforeBlocks"] = value13;
		}
		var value14 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.afterBlocks"] != null) {
			_g.setReserved("emptyLines.afterBlocks",value14);
		} else {
			_g.h["emptyLines.afterBlocks"] = value14;
		}
		var value15 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.importAndUsing.betweenImports"] != null) {
			_g.setReserved("emptyLines.importAndUsing.betweenImports",value15);
		} else {
			_g.h["emptyLines.importAndUsing.betweenImports"] = value15;
		}
		var value16 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("all" , String),js_Boot.__cast("firstLevelPackage" , String),js_Boot.__cast("secondLevelPackage" , String),js_Boot.__cast("thirdLevelPackage" , String),js_Boot.__cast("fourthLevelPackage" , String),js_Boot.__cast("fifthLevelPackage" , String),js_Boot.__cast("fullPackage" , String)]);
		if(__map_reserved["emptyLines.importAndUsing.betweenImportsLevel"] != null) {
			_g.setReserved("emptyLines.importAndUsing.betweenImportsLevel",value16);
		} else {
			_g.h["emptyLines.importAndUsing.betweenImportsLevel"] = value16;
		}
		var value17 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.importAndUsing.beforeUsing"] != null) {
			_g.setReserved("emptyLines.importAndUsing.beforeUsing",value17);
		} else {
			_g.h["emptyLines.importAndUsing.beforeUsing"] = value17;
		}
		var value18 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.importAndUsing.beforeType"] != null) {
			_g.setReserved("emptyLines.importAndUsing.beforeType",value18);
		} else {
			_g.h["emptyLines.importAndUsing.beforeType"] = value18;
		}
		var value19 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.enumAbstractEmptyLines.beginType"] != null) {
			_g.setReserved("emptyLines.enumAbstractEmptyLines.beginType",value19);
		} else {
			_g.h["emptyLines.enumAbstractEmptyLines.beginType"] = value19;
		}
		var value20 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.enumAbstractEmptyLines.endType"] != null) {
			_g.setReserved("emptyLines.enumAbstractEmptyLines.endType",value20);
		} else {
			_g.h["emptyLines.enumAbstractEmptyLines.endType"] = value20;
		}
		var value21 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.enumAbstractEmptyLines.betweenVars"] != null) {
			_g.setReserved("emptyLines.enumAbstractEmptyLines.betweenVars",value21);
		} else {
			_g.h["emptyLines.enumAbstractEmptyLines.betweenVars"] = value21;
		}
		var value22 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.enumAbstractEmptyLines.afterVars"] != null) {
			_g.setReserved("emptyLines.enumAbstractEmptyLines.afterVars",value22);
		} else {
			_g.h["emptyLines.enumAbstractEmptyLines.afterVars"] = value22;
		}
		var value23 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.enumAbstractEmptyLines.betweenFunctions"] != null) {
			_g.setReserved("emptyLines.enumAbstractEmptyLines.betweenFunctions",value23);
		} else {
			_g.h["emptyLines.enumAbstractEmptyLines.betweenFunctions"] = value23;
		}
		var value24 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.enumAbstractEmptyLines.existingBetweenFields"] != null) {
			_g.setReserved("emptyLines.enumAbstractEmptyLines.existingBetweenFields",value24);
		} else {
			_g.h["emptyLines.enumAbstractEmptyLines.existingBetweenFields"] = value24;
		}
		var value25 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.beginType"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.beginType",value25);
		} else {
			_g.h["emptyLines.classEmptyLines.beginType"] = value25;
		}
		var value26 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.endType"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.endType",value26);
		} else {
			_g.h["emptyLines.classEmptyLines.endType"] = value26;
		}
		var value27 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.betweenStaticVars"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.betweenStaticVars",value27);
		} else {
			_g.h["emptyLines.classEmptyLines.betweenStaticVars"] = value27;
		}
		var value28 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.afterStaticVars"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.afterStaticVars",value28);
		} else {
			_g.h["emptyLines.classEmptyLines.afterStaticVars"] = value28;
		}
		var value29 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.afterPrivateVars"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.afterPrivateVars",value29);
		} else {
			_g.h["emptyLines.classEmptyLines.afterPrivateVars"] = value29;
		}
		var value30 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.betweenVars"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.betweenVars",value30);
		} else {
			_g.h["emptyLines.classEmptyLines.betweenVars"] = value30;
		}
		var value31 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.afterVars"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.afterVars",value31);
		} else {
			_g.h["emptyLines.classEmptyLines.afterVars"] = value31;
		}
		var value32 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.afterStaticFunctions"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.afterStaticFunctions",value32);
		} else {
			_g.h["emptyLines.classEmptyLines.afterStaticFunctions"] = value32;
		}
		var value33 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.betweenStaticFunctions"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.betweenStaticFunctions",value33);
		} else {
			_g.h["emptyLines.classEmptyLines.betweenStaticFunctions"] = value33;
		}
		var value34 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.afterPrivateFunctions"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.afterPrivateFunctions",value34);
		} else {
			_g.h["emptyLines.classEmptyLines.afterPrivateFunctions"] = value34;
		}
		var value35 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.classEmptyLines.betweenFunctions"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.betweenFunctions",value35);
		} else {
			_g.h["emptyLines.classEmptyLines.betweenFunctions"] = value35;
		}
		var value36 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.classEmptyLines.existingBetweenFields"] != null) {
			_g.setReserved("emptyLines.classEmptyLines.existingBetweenFields",value36);
		} else {
			_g.h["emptyLines.classEmptyLines.existingBetweenFields"] = value36;
		}
		var value37 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.beginType"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.beginType",value37);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.beginType"] = value37;
		}
		var value38 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.endType"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.endType",value38);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.endType"] = value38;
		}
		var value39 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.betweenStaticVars"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.betweenStaticVars",value39);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.betweenStaticVars"] = value39;
		}
		var value40 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.afterStaticVars"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.afterStaticVars",value40);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.afterStaticVars"] = value40;
		}
		var value41 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.afterPrivateVars"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.afterPrivateVars",value41);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.afterPrivateVars"] = value41;
		}
		var value42 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.betweenVars"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.betweenVars",value42);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.betweenVars"] = value42;
		}
		var value43 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.afterVars"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.afterVars",value43);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.afterVars"] = value43;
		}
		var value44 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.afterStaticFunctions"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.afterStaticFunctions",value44);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.afterStaticFunctions"] = value44;
		}
		var value45 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.betweenStaticFunctions"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.betweenStaticFunctions",value45);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.betweenStaticFunctions"] = value45;
		}
		var value46 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.afterPrivateFunctions"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.afterPrivateFunctions",value46);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.afterPrivateFunctions"] = value46;
		}
		var value47 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.macroClassEmptyLines.betweenFunctions"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.betweenFunctions",value47);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.betweenFunctions"] = value47;
		}
		var value48 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.macroClassEmptyLines.existingBetweenFields"] != null) {
			_g.setReserved("emptyLines.macroClassEmptyLines.existingBetweenFields",value48);
		} else {
			_g.h["emptyLines.macroClassEmptyLines.existingBetweenFields"] = value48;
		}
		var value49 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.beginType"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.beginType",value49);
		} else {
			_g.h["emptyLines.abstractEmptyLines.beginType"] = value49;
		}
		var value50 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.endType"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.endType",value50);
		} else {
			_g.h["emptyLines.abstractEmptyLines.endType"] = value50;
		}
		var value51 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.betweenStaticVars"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.betweenStaticVars",value51);
		} else {
			_g.h["emptyLines.abstractEmptyLines.betweenStaticVars"] = value51;
		}
		var value52 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.afterStaticVars"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.afterStaticVars",value52);
		} else {
			_g.h["emptyLines.abstractEmptyLines.afterStaticVars"] = value52;
		}
		var value53 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.afterPrivateVars"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.afterPrivateVars",value53);
		} else {
			_g.h["emptyLines.abstractEmptyLines.afterPrivateVars"] = value53;
		}
		var value54 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.betweenVars"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.betweenVars",value54);
		} else {
			_g.h["emptyLines.abstractEmptyLines.betweenVars"] = value54;
		}
		var value55 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.afterVars"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.afterVars",value55);
		} else {
			_g.h["emptyLines.abstractEmptyLines.afterVars"] = value55;
		}
		var value56 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.afterStaticFunctions"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.afterStaticFunctions",value56);
		} else {
			_g.h["emptyLines.abstractEmptyLines.afterStaticFunctions"] = value56;
		}
		var value57 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.betweenStaticFunctions"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.betweenStaticFunctions",value57);
		} else {
			_g.h["emptyLines.abstractEmptyLines.betweenStaticFunctions"] = value57;
		}
		var value58 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.afterPrivateFunctions"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.afterPrivateFunctions",value58);
		} else {
			_g.h["emptyLines.abstractEmptyLines.afterPrivateFunctions"] = value58;
		}
		var value59 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.abstractEmptyLines.betweenFunctions"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.betweenFunctions",value59);
		} else {
			_g.h["emptyLines.abstractEmptyLines.betweenFunctions"] = value59;
		}
		var value60 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.abstractEmptyLines.existingBetweenFields"] != null) {
			_g.setReserved("emptyLines.abstractEmptyLines.existingBetweenFields",value60);
		} else {
			_g.h["emptyLines.abstractEmptyLines.existingBetweenFields"] = value60;
		}
		var value61 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.externClassEmptyLines.beginType"] != null) {
			_g.setReserved("emptyLines.externClassEmptyLines.beginType",value61);
		} else {
			_g.h["emptyLines.externClassEmptyLines.beginType"] = value61;
		}
		var value62 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.externClassEmptyLines.endType"] != null) {
			_g.setReserved("emptyLines.externClassEmptyLines.endType",value62);
		} else {
			_g.h["emptyLines.externClassEmptyLines.endType"] = value62;
		}
		var value63 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.externClassEmptyLines.betweenVars"] != null) {
			_g.setReserved("emptyLines.externClassEmptyLines.betweenVars",value63);
		} else {
			_g.h["emptyLines.externClassEmptyLines.betweenVars"] = value63;
		}
		var value64 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.externClassEmptyLines.afterVars"] != null) {
			_g.setReserved("emptyLines.externClassEmptyLines.afterVars",value64);
		} else {
			_g.h["emptyLines.externClassEmptyLines.afterVars"] = value64;
		}
		var value65 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.externClassEmptyLines.betweenFunctions"] != null) {
			_g.setReserved("emptyLines.externClassEmptyLines.betweenFunctions",value65);
		} else {
			_g.h["emptyLines.externClassEmptyLines.betweenFunctions"] = value65;
		}
		var value66 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.externClassEmptyLines.existingBetweenFields"] != null) {
			_g.setReserved("emptyLines.externClassEmptyLines.existingBetweenFields",value66);
		} else {
			_g.h["emptyLines.externClassEmptyLines.existingBetweenFields"] = value66;
		}
		var value67 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.interfaceEmptyLines.beginType"] != null) {
			_g.setReserved("emptyLines.interfaceEmptyLines.beginType",value67);
		} else {
			_g.h["emptyLines.interfaceEmptyLines.beginType"] = value67;
		}
		var value68 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.interfaceEmptyLines.endType"] != null) {
			_g.setReserved("emptyLines.interfaceEmptyLines.endType",value68);
		} else {
			_g.h["emptyLines.interfaceEmptyLines.endType"] = value68;
		}
		var value69 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.interfaceEmptyLines.betweenVars"] != null) {
			_g.setReserved("emptyLines.interfaceEmptyLines.betweenVars",value69);
		} else {
			_g.h["emptyLines.interfaceEmptyLines.betweenVars"] = value69;
		}
		var value70 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.interfaceEmptyLines.afterVars"] != null) {
			_g.setReserved("emptyLines.interfaceEmptyLines.afterVars",value70);
		} else {
			_g.h["emptyLines.interfaceEmptyLines.afterVars"] = value70;
		}
		var value71 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.interfaceEmptyLines.betweenFunctions"] != null) {
			_g.setReserved("emptyLines.interfaceEmptyLines.betweenFunctions",value71);
		} else {
			_g.h["emptyLines.interfaceEmptyLines.betweenFunctions"] = value71;
		}
		var value72 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.interfaceEmptyLines.existingBetweenFields"] != null) {
			_g.setReserved("emptyLines.interfaceEmptyLines.existingBetweenFields",value72);
		} else {
			_g.h["emptyLines.interfaceEmptyLines.existingBetweenFields"] = value72;
		}
		var value73 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.enumEmptyLines.beginType"] != null) {
			_g.setReserved("emptyLines.enumEmptyLines.beginType",value73);
		} else {
			_g.h["emptyLines.enumEmptyLines.beginType"] = value73;
		}
		var value74 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.enumEmptyLines.endType"] != null) {
			_g.setReserved("emptyLines.enumEmptyLines.endType",value74);
		} else {
			_g.h["emptyLines.enumEmptyLines.endType"] = value74;
		}
		var value75 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.enumEmptyLines.betweenFields"] != null) {
			_g.setReserved("emptyLines.enumEmptyLines.betweenFields",value75);
		} else {
			_g.h["emptyLines.enumEmptyLines.betweenFields"] = value75;
		}
		var value76 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.enumEmptyLines.existingBetweenFields"] != null) {
			_g.setReserved("emptyLines.enumEmptyLines.existingBetweenFields",value76);
		} else {
			_g.h["emptyLines.enumEmptyLines.existingBetweenFields"] = value76;
		}
		var value77 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.typedefEmptyLines.beginType"] != null) {
			_g.setReserved("emptyLines.typedefEmptyLines.beginType",value77);
		} else {
			_g.h["emptyLines.typedefEmptyLines.beginType"] = value77;
		}
		var value78 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.typedefEmptyLines.endType"] != null) {
			_g.setReserved("emptyLines.typedefEmptyLines.endType",value78);
		} else {
			_g.h["emptyLines.typedefEmptyLines.endType"] = value78;
		}
		var value79 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.typedefEmptyLines.betweenFields"] != null) {
			_g.setReserved("emptyLines.typedefEmptyLines.betweenFields",value79);
		} else {
			_g.h["emptyLines.typedefEmptyLines.betweenFields"] = value79;
		}
		var value80 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("keep" , String),js_Boot.__cast("remove" , String)]);
		if(__map_reserved["emptyLines.typedefEmptyLines.existingBetweenFields"] != null) {
			_g.setReserved("emptyLines.typedefEmptyLines.existingBetweenFields",value80);
		} else {
			_g.h["emptyLines.typedefEmptyLines.existingBetweenFields"] = value80;
		}
		var value81 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.conditionalsEmptyLines.afterIf"] != null) {
			_g.setReserved("emptyLines.conditionalsEmptyLines.afterIf",value81);
		} else {
			_g.h["emptyLines.conditionalsEmptyLines.afterIf"] = value81;
		}
		var value82 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.conditionalsEmptyLines.beforeElse"] != null) {
			_g.setReserved("emptyLines.conditionalsEmptyLines.beforeElse",value82);
		} else {
			_g.h["emptyLines.conditionalsEmptyLines.beforeElse"] = value82;
		}
		var value83 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.conditionalsEmptyLines.afterElse"] != null) {
			_g.setReserved("emptyLines.conditionalsEmptyLines.afterElse",value83);
		} else {
			_g.h["emptyLines.conditionalsEmptyLines.afterElse"] = value83;
		}
		var value84 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.conditionalsEmptyLines.beforeEnd"] != null) {
			_g.setReserved("emptyLines.conditionalsEmptyLines.beforeEnd",value84);
		} else {
			_g.h["emptyLines.conditionalsEmptyLines.beforeEnd"] = value84;
		}
		var value85 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.conditionalsEmptyLines.beforeError"] != null) {
			_g.setReserved("emptyLines.conditionalsEmptyLines.beforeError",value85);
		} else {
			_g.h["emptyLines.conditionalsEmptyLines.beforeError"] = value85;
		}
		var value86 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["emptyLines.conditionalsEmptyLines.afterError"] != null) {
			_g.setReserved("emptyLines.conditionalsEmptyLines.afterError",value86);
		} else {
			_g.h["emptyLines.conditionalsEmptyLines.afterError"] = value86;
		}
		var value87 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("fixedZero" , String),js_Boot.__cast("fixedZeroIncrease" , String),js_Boot.__cast("fixedZeroIncreaseBlocks" , String),js_Boot.__cast("aligned" , String),js_Boot.__cast("alignedNestedIncrease" , String),js_Boot.__cast("alignedIncrease" , String),js_Boot.__cast("alignedDecrease" , String)]);
		if(__map_reserved["indentation.conditionalPolicy"] != null) {
			_g.setReserved("indentation.conditionalPolicy",value87);
		} else {
			_g.h["indentation.conditionalPolicy"] = value87;
		}
		var value88 = codesamples_config_ConfigFieldType.Text;
		if(__map_reserved["indentation.character"] != null) {
			_g.setReserved("indentation.character",value88);
		} else {
			_g.h["indentation.character"] = value88;
		}
		var value89 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["indentation.tabWidth"] != null) {
			_g.setReserved("indentation.tabWidth",value89);
		} else {
			_g.h["indentation.tabWidth"] = value89;
		}
		var value90 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["indentation.trailingWhitespace"] != null) {
			_g.setReserved("indentation.trailingWhitespace",value90);
		} else {
			_g.h["indentation.trailingWhitespace"] = value90;
		}
		var value91 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["indentation.indentObjectLiteral"] != null) {
			_g.setReserved("indentation.indentObjectLiteral",value91);
		} else {
			_g.h["indentation.indentObjectLiteral"] = value91;
		}
		var value92 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["indentation.indentComplexValueExpressions"] != null) {
			_g.setReserved("indentation.indentComplexValueExpressions",value92);
		} else {
			_g.h["indentation.indentComplexValueExpressions"] = value92;
		}
		var value93 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["indentation.indentCaseLabels"] != null) {
			_g.setReserved("indentation.indentCaseLabels",value93);
		} else {
			_g.h["indentation.indentCaseLabels"] = value93;
		}
		var value94 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("after" , String),js_Boot.__cast("before" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.leftCurly"] != null) {
			_g.setReserved("lineEnds.leftCurly",value94);
		} else {
			_g.h["lineEnds.leftCurly"] = value94;
		}
		var value95 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("after" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.rightCurly"] != null) {
			_g.setReserved("lineEnds.rightCurly",value95);
		} else {
			_g.h["lineEnds.rightCurly"] = value95;
		}
		var value96 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("noBreak" , String),js_Boot.__cast("break" , String)]);
		if(__map_reserved["lineEnds.emptyCurly"] != null) {
			_g.setReserved("lineEnds.emptyCurly",value96);
		} else {
			_g.h["lineEnds.emptyCurly"] = value96;
		}
		var value97 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("after" , String),js_Boot.__cast("before" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.blockCurly.leftCurly"] != null) {
			_g.setReserved("lineEnds.blockCurly.leftCurly",value97);
		} else {
			_g.h["lineEnds.blockCurly.leftCurly"] = value97;
		}
		var value98 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("after" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.blockCurly.rightCurly"] != null) {
			_g.setReserved("lineEnds.blockCurly.rightCurly",value98);
		} else {
			_g.h["lineEnds.blockCurly.rightCurly"] = value98;
		}
		var value99 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("noBreak" , String),js_Boot.__cast("break" , String)]);
		if(__map_reserved["lineEnds.blockCurly.emptyCurly"] != null) {
			_g.setReserved("lineEnds.blockCurly.emptyCurly",value99);
		} else {
			_g.h["lineEnds.blockCurly.emptyCurly"] = value99;
		}
		var value100 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("after" , String),js_Boot.__cast("before" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.anonFunctionCurly.leftCurly"] != null) {
			_g.setReserved("lineEnds.anonFunctionCurly.leftCurly",value100);
		} else {
			_g.h["lineEnds.anonFunctionCurly.leftCurly"] = value100;
		}
		var value101 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("after" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.anonFunctionCurly.rightCurly"] != null) {
			_g.setReserved("lineEnds.anonFunctionCurly.rightCurly",value101);
		} else {
			_g.h["lineEnds.anonFunctionCurly.rightCurly"] = value101;
		}
		var value102 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("noBreak" , String),js_Boot.__cast("break" , String)]);
		if(__map_reserved["lineEnds.anonFunctionCurly.emptyCurly"] != null) {
			_g.setReserved("lineEnds.anonFunctionCurly.emptyCurly",value102);
		} else {
			_g.h["lineEnds.anonFunctionCurly.emptyCurly"] = value102;
		}
		var value103 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("after" , String),js_Boot.__cast("before" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.anonTypeCurly.leftCurly"] != null) {
			_g.setReserved("lineEnds.anonTypeCurly.leftCurly",value103);
		} else {
			_g.h["lineEnds.anonTypeCurly.leftCurly"] = value103;
		}
		var value104 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("after" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.anonTypeCurly.rightCurly"] != null) {
			_g.setReserved("lineEnds.anonTypeCurly.rightCurly",value104);
		} else {
			_g.h["lineEnds.anonTypeCurly.rightCurly"] = value104;
		}
		var value105 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("noBreak" , String),js_Boot.__cast("break" , String)]);
		if(__map_reserved["lineEnds.anonTypeCurly.emptyCurly"] != null) {
			_g.setReserved("lineEnds.anonTypeCurly.emptyCurly",value105);
		} else {
			_g.h["lineEnds.anonTypeCurly.emptyCurly"] = value105;
		}
		var value106 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("after" , String),js_Boot.__cast("before" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.objectLiteralCurly.leftCurly"] != null) {
			_g.setReserved("lineEnds.objectLiteralCurly.leftCurly",value106);
		} else {
			_g.h["lineEnds.objectLiteralCurly.leftCurly"] = value106;
		}
		var value107 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("after" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.objectLiteralCurly.rightCurly"] != null) {
			_g.setReserved("lineEnds.objectLiteralCurly.rightCurly",value107);
		} else {
			_g.h["lineEnds.objectLiteralCurly.rightCurly"] = value107;
		}
		var value108 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("noBreak" , String),js_Boot.__cast("break" , String)]);
		if(__map_reserved["lineEnds.objectLiteralCurly.emptyCurly"] != null) {
			_g.setReserved("lineEnds.objectLiteralCurly.emptyCurly",value108);
		} else {
			_g.h["lineEnds.objectLiteralCurly.emptyCurly"] = value108;
		}
		var value109 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("after" , String),js_Boot.__cast("before" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.typedefCurly.leftCurly"] != null) {
			_g.setReserved("lineEnds.typedefCurly.leftCurly",value109);
		} else {
			_g.h["lineEnds.typedefCurly.leftCurly"] = value109;
		}
		var value110 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("after" , String),js_Boot.__cast("both" , String)]);
		if(__map_reserved["lineEnds.typedefCurly.rightCurly"] != null) {
			_g.setReserved("lineEnds.typedefCurly.rightCurly",value110);
		} else {
			_g.h["lineEnds.typedefCurly.rightCurly"] = value110;
		}
		var value111 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("noBreak" , String),js_Boot.__cast("break" , String)]);
		if(__map_reserved["lineEnds.typedefCurly.emptyCurly"] != null) {
			_g.setReserved("lineEnds.typedefCurly.emptyCurly",value111);
		} else {
			_g.h["lineEnds.typedefCurly.emptyCurly"] = value111;
		}
		var value112 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.ifBody"] != null) {
			_g.setReserved("sameLine.ifBody",value112);
		} else {
			_g.h["sameLine.ifBody"] = value112;
		}
		var value113 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.elseBody"] != null) {
			_g.setReserved("sameLine.elseBody",value113);
		} else {
			_g.h["sameLine.elseBody"] = value113;
		}
		var value114 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.ifElse"] != null) {
			_g.setReserved("sameLine.ifElse",value114);
		} else {
			_g.h["sameLine.ifElse"] = value114;
		}
		var value115 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.elseIf"] != null) {
			_g.setReserved("sameLine.elseIf",value115);
		} else {
			_g.h["sameLine.elseIf"] = value115;
		}
		var value116 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.expressionIf"] != null) {
			_g.setReserved("sameLine.expressionIf",value116);
		} else {
			_g.h["sameLine.expressionIf"] = value116;
		}
		var value117 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["sameLine.expressionIfWithBlocks"] != null) {
			_g.setReserved("sameLine.expressionIfWithBlocks",value117);
		} else {
			_g.h["sameLine.expressionIfWithBlocks"] = value117;
		}
		var value118 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.forBody"] != null) {
			_g.setReserved("sameLine.forBody",value118);
		} else {
			_g.h["sameLine.forBody"] = value118;
		}
		var value119 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.whileBody"] != null) {
			_g.setReserved("sameLine.whileBody",value119);
		} else {
			_g.h["sameLine.whileBody"] = value119;
		}
		var value120 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.doWhileBody"] != null) {
			_g.setReserved("sameLine.doWhileBody",value120);
		} else {
			_g.h["sameLine.doWhileBody"] = value120;
		}
		var value121 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.doWhile"] != null) {
			_g.setReserved("sameLine.doWhile",value121);
		} else {
			_g.h["sameLine.doWhile"] = value121;
		}
		var value122 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.tryBody"] != null) {
			_g.setReserved("sameLine.tryBody",value122);
		} else {
			_g.h["sameLine.tryBody"] = value122;
		}
		var value123 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.catchBody"] != null) {
			_g.setReserved("sameLine.catchBody",value123);
		} else {
			_g.h["sameLine.catchBody"] = value123;
		}
		var value124 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.caseBody"] != null) {
			_g.setReserved("sameLine.caseBody",value124);
		} else {
			_g.h["sameLine.caseBody"] = value124;
		}
		var value125 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.tryCatch"] != null) {
			_g.setReserved("sameLine.tryCatch",value125);
		} else {
			_g.h["sameLine.tryCatch"] = value125;
		}
		var value126 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.expressionCase"] != null) {
			_g.setReserved("sameLine.expressionCase",value126);
		} else {
			_g.h["sameLine.expressionCase"] = value126;
		}
		var value127 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.expressionTry"] != null) {
			_g.setReserved("sameLine.expressionTry",value127);
		} else {
			_g.h["sameLine.expressionTry"] = value127;
		}
		var value128 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.functionBody"] != null) {
			_g.setReserved("sameLine.functionBody",value128);
		} else {
			_g.h["sameLine.functionBody"] = value128;
		}
		var value129 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.anonFunctionBody"] != null) {
			_g.setReserved("sameLine.anonFunctionBody",value129);
		} else {
			_g.h["sameLine.anonFunctionBody"] = value129;
		}
		var value130 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.returnBody"] != null) {
			_g.setReserved("sameLine.returnBody",value130);
		} else {
			_g.h["sameLine.returnBody"] = value130;
		}
		var value131 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.returnBodySingleLine"] != null) {
			_g.setReserved("sameLine.returnBodySingleLine",value131);
		} else {
			_g.h["sameLine.returnBodySingleLine"] = value131;
		}
		var value132 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("same" , String),js_Boot.__cast("next" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["sameLine.untypedBody"] != null) {
			_g.setReserved("sameLine.untypedBody",value132);
		} else {
			_g.h["sameLine.untypedBody"] = value132;
		}
		var value133 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.metadataParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.metadataParens.openingPolicy",value133);
		} else {
			_g.h["whitespace.parenConfig.metadataParens.openingPolicy"] = value133;
		}
		var value134 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.metadataParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.metadataParens.closingPolicy",value134);
		} else {
			_g.h["whitespace.parenConfig.metadataParens.closingPolicy"] = value134;
		}
		var value135 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.metadataParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.metadataParens.removeInnerWhenEmpty",value135);
		} else {
			_g.h["whitespace.parenConfig.metadataParens.removeInnerWhenEmpty"] = value135;
		}
		var value136 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.funcParamParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.funcParamParens.openingPolicy",value136);
		} else {
			_g.h["whitespace.parenConfig.funcParamParens.openingPolicy"] = value136;
		}
		var value137 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.funcParamParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.funcParamParens.closingPolicy",value137);
		} else {
			_g.h["whitespace.parenConfig.funcParamParens.closingPolicy"] = value137;
		}
		var value138 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.funcParamParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.funcParamParens.removeInnerWhenEmpty",value138);
		} else {
			_g.h["whitespace.parenConfig.funcParamParens.removeInnerWhenEmpty"] = value138;
		}
		var value139 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.anonFuncParamParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.anonFuncParamParens.openingPolicy",value139);
		} else {
			_g.h["whitespace.parenConfig.anonFuncParamParens.openingPolicy"] = value139;
		}
		var value140 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.anonFuncParamParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.anonFuncParamParens.closingPolicy",value140);
		} else {
			_g.h["whitespace.parenConfig.anonFuncParamParens.closingPolicy"] = value140;
		}
		var value141 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.anonFuncParamParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.anonFuncParamParens.removeInnerWhenEmpty",value141);
		} else {
			_g.h["whitespace.parenConfig.anonFuncParamParens.removeInnerWhenEmpty"] = value141;
		}
		var value142 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.callParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.callParens.openingPolicy",value142);
		} else {
			_g.h["whitespace.parenConfig.callParens.openingPolicy"] = value142;
		}
		var value143 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.callParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.callParens.closingPolicy",value143);
		} else {
			_g.h["whitespace.parenConfig.callParens.closingPolicy"] = value143;
		}
		var value144 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.callParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.callParens.removeInnerWhenEmpty",value144);
		} else {
			_g.h["whitespace.parenConfig.callParens.removeInnerWhenEmpty"] = value144;
		}
		var value145 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.conditionParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.conditionParens.openingPolicy",value145);
		} else {
			_g.h["whitespace.parenConfig.conditionParens.openingPolicy"] = value145;
		}
		var value146 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.conditionParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.conditionParens.closingPolicy",value146);
		} else {
			_g.h["whitespace.parenConfig.conditionParens.closingPolicy"] = value146;
		}
		var value147 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.conditionParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.conditionParens.removeInnerWhenEmpty",value147);
		} else {
			_g.h["whitespace.parenConfig.conditionParens.removeInnerWhenEmpty"] = value147;
		}
		var value148 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.ifConditionParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.ifConditionParens.openingPolicy",value148);
		} else {
			_g.h["whitespace.parenConfig.ifConditionParens.openingPolicy"] = value148;
		}
		var value149 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.ifConditionParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.ifConditionParens.closingPolicy",value149);
		} else {
			_g.h["whitespace.parenConfig.ifConditionParens.closingPolicy"] = value149;
		}
		var value150 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.ifConditionParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.ifConditionParens.removeInnerWhenEmpty",value150);
		} else {
			_g.h["whitespace.parenConfig.ifConditionParens.removeInnerWhenEmpty"] = value150;
		}
		var value151 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.switchConditionParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.switchConditionParens.openingPolicy",value151);
		} else {
			_g.h["whitespace.parenConfig.switchConditionParens.openingPolicy"] = value151;
		}
		var value152 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.switchConditionParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.switchConditionParens.closingPolicy",value152);
		} else {
			_g.h["whitespace.parenConfig.switchConditionParens.closingPolicy"] = value152;
		}
		var value153 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.switchConditionParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.switchConditionParens.removeInnerWhenEmpty",value153);
		} else {
			_g.h["whitespace.parenConfig.switchConditionParens.removeInnerWhenEmpty"] = value153;
		}
		var value154 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.whileConditionParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.whileConditionParens.openingPolicy",value154);
		} else {
			_g.h["whitespace.parenConfig.whileConditionParens.openingPolicy"] = value154;
		}
		var value155 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.whileConditionParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.whileConditionParens.closingPolicy",value155);
		} else {
			_g.h["whitespace.parenConfig.whileConditionParens.closingPolicy"] = value155;
		}
		var value156 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.whileConditionParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.whileConditionParens.removeInnerWhenEmpty",value156);
		} else {
			_g.h["whitespace.parenConfig.whileConditionParens.removeInnerWhenEmpty"] = value156;
		}
		var value157 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.sharpConditionParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.sharpConditionParens.openingPolicy",value157);
		} else {
			_g.h["whitespace.parenConfig.sharpConditionParens.openingPolicy"] = value157;
		}
		var value158 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.sharpConditionParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.sharpConditionParens.closingPolicy",value158);
		} else {
			_g.h["whitespace.parenConfig.sharpConditionParens.closingPolicy"] = value158;
		}
		var value159 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.sharpConditionParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.sharpConditionParens.removeInnerWhenEmpty",value159);
		} else {
			_g.h["whitespace.parenConfig.sharpConditionParens.removeInnerWhenEmpty"] = value159;
		}
		var value160 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.catchParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.catchParens.openingPolicy",value160);
		} else {
			_g.h["whitespace.parenConfig.catchParens.openingPolicy"] = value160;
		}
		var value161 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.catchParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.catchParens.closingPolicy",value161);
		} else {
			_g.h["whitespace.parenConfig.catchParens.closingPolicy"] = value161;
		}
		var value162 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.catchParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.catchParens.removeInnerWhenEmpty",value162);
		} else {
			_g.h["whitespace.parenConfig.catchParens.removeInnerWhenEmpty"] = value162;
		}
		var value163 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.forLoopParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.forLoopParens.openingPolicy",value163);
		} else {
			_g.h["whitespace.parenConfig.forLoopParens.openingPolicy"] = value163;
		}
		var value164 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.forLoopParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.forLoopParens.closingPolicy",value164);
		} else {
			_g.h["whitespace.parenConfig.forLoopParens.closingPolicy"] = value164;
		}
		var value165 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.forLoopParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.forLoopParens.removeInnerWhenEmpty",value165);
		} else {
			_g.h["whitespace.parenConfig.forLoopParens.removeInnerWhenEmpty"] = value165;
		}
		var value166 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.expressionParens.openingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.expressionParens.openingPolicy",value166);
		} else {
			_g.h["whitespace.parenConfig.expressionParens.openingPolicy"] = value166;
		}
		var value167 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.parenConfig.expressionParens.closingPolicy"] != null) {
			_g.setReserved("whitespace.parenConfig.expressionParens.closingPolicy",value167);
		} else {
			_g.h["whitespace.parenConfig.expressionParens.closingPolicy"] = value167;
		}
		var value168 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.parenConfig.expressionParens.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.parenConfig.expressionParens.removeInnerWhenEmpty",value168);
		} else {
			_g.h["whitespace.parenConfig.expressionParens.removeInnerWhenEmpty"] = value168;
		}
		var value169 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.blockBraces.openingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.blockBraces.openingPolicy",value169);
		} else {
			_g.h["whitespace.bracesConfig.blockBraces.openingPolicy"] = value169;
		}
		var value170 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.blockBraces.closingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.blockBraces.closingPolicy",value170);
		} else {
			_g.h["whitespace.bracesConfig.blockBraces.closingPolicy"] = value170;
		}
		var value171 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.bracesConfig.blockBraces.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.bracesConfig.blockBraces.removeInnerWhenEmpty",value171);
		} else {
			_g.h["whitespace.bracesConfig.blockBraces.removeInnerWhenEmpty"] = value171;
		}
		var value172 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.typedefBraces.openingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.typedefBraces.openingPolicy",value172);
		} else {
			_g.h["whitespace.bracesConfig.typedefBraces.openingPolicy"] = value172;
		}
		var value173 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.typedefBraces.closingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.typedefBraces.closingPolicy",value173);
		} else {
			_g.h["whitespace.bracesConfig.typedefBraces.closingPolicy"] = value173;
		}
		var value174 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.bracesConfig.typedefBraces.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.bracesConfig.typedefBraces.removeInnerWhenEmpty",value174);
		} else {
			_g.h["whitespace.bracesConfig.typedefBraces.removeInnerWhenEmpty"] = value174;
		}
		var value175 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.anonTypeBraces.openingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.anonTypeBraces.openingPolicy",value175);
		} else {
			_g.h["whitespace.bracesConfig.anonTypeBraces.openingPolicy"] = value175;
		}
		var value176 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.anonTypeBraces.closingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.anonTypeBraces.closingPolicy",value176);
		} else {
			_g.h["whitespace.bracesConfig.anonTypeBraces.closingPolicy"] = value176;
		}
		var value177 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.bracesConfig.anonTypeBraces.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.bracesConfig.anonTypeBraces.removeInnerWhenEmpty",value177);
		} else {
			_g.h["whitespace.bracesConfig.anonTypeBraces.removeInnerWhenEmpty"] = value177;
		}
		var value178 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.objectLiteralBraces.openingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.objectLiteralBraces.openingPolicy",value178);
		} else {
			_g.h["whitespace.bracesConfig.objectLiteralBraces.openingPolicy"] = value178;
		}
		var value179 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.objectLiteralBraces.closingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.objectLiteralBraces.closingPolicy",value179);
		} else {
			_g.h["whitespace.bracesConfig.objectLiteralBraces.closingPolicy"] = value179;
		}
		var value180 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.bracesConfig.objectLiteralBraces.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.bracesConfig.objectLiteralBraces.removeInnerWhenEmpty",value180);
		} else {
			_g.h["whitespace.bracesConfig.objectLiteralBraces.removeInnerWhenEmpty"] = value180;
		}
		var value181 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.unknownBraces.openingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.unknownBraces.openingPolicy",value181);
		} else {
			_g.h["whitespace.bracesConfig.unknownBraces.openingPolicy"] = value181;
		}
		var value182 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.bracesConfig.unknownBraces.closingPolicy"] != null) {
			_g.setReserved("whitespace.bracesConfig.unknownBraces.closingPolicy",value182);
		} else {
			_g.h["whitespace.bracesConfig.unknownBraces.closingPolicy"] = value182;
		}
		var value183 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.bracesConfig.unknownBraces.removeInnerWhenEmpty"] != null) {
			_g.setReserved("whitespace.bracesConfig.unknownBraces.removeInnerWhenEmpty",value183);
		} else {
			_g.h["whitespace.bracesConfig.unknownBraces.removeInnerWhenEmpty"] = value183;
		}
		var value184 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.openingBracketPolicy"] != null) {
			_g.setReserved("whitespace.openingBracketPolicy",value184);
		} else {
			_g.h["whitespace.openingBracketPolicy"] = value184;
		}
		var value185 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.closingBracketPolicy"] != null) {
			_g.setReserved("whitespace.closingBracketPolicy",value185);
		} else {
			_g.h["whitespace.closingBracketPolicy"] = value185;
		}
		var value186 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.typeParamOpenPolicy"] != null) {
			_g.setReserved("whitespace.typeParamOpenPolicy",value186);
		} else {
			_g.h["whitespace.typeParamOpenPolicy"] = value186;
		}
		var value187 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.typeParamClosePolicy"] != null) {
			_g.setReserved("whitespace.typeParamClosePolicy",value187);
		} else {
			_g.h["whitespace.typeParamClosePolicy"] = value187;
		}
		var value188 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.typeExtensionPolicy"] != null) {
			_g.setReserved("whitespace.typeExtensionPolicy",value188);
		} else {
			_g.h["whitespace.typeExtensionPolicy"] = value188;
		}
		var value189 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.commaPolicy"] != null) {
			_g.setReserved("whitespace.commaPolicy",value189);
		} else {
			_g.h["whitespace.commaPolicy"] = value189;
		}
		var value190 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.dotPolicy"] != null) {
			_g.setReserved("whitespace.dotPolicy",value190);
		} else {
			_g.h["whitespace.dotPolicy"] = value190;
		}
		var value191 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.colonPolicy"] != null) {
			_g.setReserved("whitespace.colonPolicy",value191);
		} else {
			_g.h["whitespace.colonPolicy"] = value191;
		}
		var value192 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.caseColonPolicy"] != null) {
			_g.setReserved("whitespace.caseColonPolicy",value192);
		} else {
			_g.h["whitespace.caseColonPolicy"] = value192;
		}
		var value193 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.objectFieldColonPolicy"] != null) {
			_g.setReserved("whitespace.objectFieldColonPolicy",value193);
		} else {
			_g.h["whitespace.objectFieldColonPolicy"] = value193;
		}
		var value194 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.typeHintColonPolicy"] != null) {
			_g.setReserved("whitespace.typeHintColonPolicy",value194);
		} else {
			_g.h["whitespace.typeHintColonPolicy"] = value194;
		}
		var value195 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.typeCheckColonPolicy"] != null) {
			_g.setReserved("whitespace.typeCheckColonPolicy",value195);
		} else {
			_g.h["whitespace.typeCheckColonPolicy"] = value195;
		}
		var value196 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.ternaryPolicy"] != null) {
			_g.setReserved("whitespace.ternaryPolicy",value196);
		} else {
			_g.h["whitespace.ternaryPolicy"] = value196;
		}
		var value197 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.semicolonPolicy"] != null) {
			_g.setReserved("whitespace.semicolonPolicy",value197);
		} else {
			_g.h["whitespace.semicolonPolicy"] = value197;
		}
		var value198 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.ifPolicy"] != null) {
			_g.setReserved("whitespace.ifPolicy",value198);
		} else {
			_g.h["whitespace.ifPolicy"] = value198;
		}
		var value199 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.doPolicy"] != null) {
			_g.setReserved("whitespace.doPolicy",value199);
		} else {
			_g.h["whitespace.doPolicy"] = value199;
		}
		var value200 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.whilePolicy"] != null) {
			_g.setReserved("whitespace.whilePolicy",value200);
		} else {
			_g.h["whitespace.whilePolicy"] = value200;
		}
		var value201 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.forPolicy"] != null) {
			_g.setReserved("whitespace.forPolicy",value201);
		} else {
			_g.h["whitespace.forPolicy"] = value201;
		}
		var value202 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.switchPolicy"] != null) {
			_g.setReserved("whitespace.switchPolicy",value202);
		} else {
			_g.h["whitespace.switchPolicy"] = value202;
		}
		var value203 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.tryPolicy"] != null) {
			_g.setReserved("whitespace.tryPolicy",value203);
		} else {
			_g.h["whitespace.tryPolicy"] = value203;
		}
		var value204 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.catchPolicy"] != null) {
			_g.setReserved("whitespace.catchPolicy",value204);
		} else {
			_g.h["whitespace.catchPolicy"] = value204;
		}
		var value205 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.binopPolicy"] != null) {
			_g.setReserved("whitespace.binopPolicy",value205);
		} else {
			_g.h["whitespace.binopPolicy"] = value205;
		}
		var value206 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.intervalPolicy"] != null) {
			_g.setReserved("whitespace.intervalPolicy",value206);
		} else {
			_g.h["whitespace.intervalPolicy"] = value206;
		}
		var value207 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.arrowFunctionsPolicy"] != null) {
			_g.setReserved("whitespace.arrowFunctionsPolicy",value207);
		} else {
			_g.h["whitespace.arrowFunctionsPolicy"] = value207;
		}
		var value208 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.functionTypeHaxe3Policy"] != null) {
			_g.setReserved("whitespace.functionTypeHaxe3Policy",value208);
		} else {
			_g.h["whitespace.functionTypeHaxe3Policy"] = value208;
		}
		var value209 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("none" , String),js_Boot.__cast("before" , String),js_Boot.__cast("noneBefore" , String),js_Boot.__cast("onlyBefore" , String),js_Boot.__cast("after" , String),js_Boot.__cast("onlyAfter" , String),js_Boot.__cast("noneAfter" , String),js_Boot.__cast("around" , String)]);
		if(__map_reserved["whitespace.functionTypeHaxe4Policy"] != null) {
			_g.setReserved("whitespace.functionTypeHaxe4Policy",value209);
		} else {
			_g.h["whitespace.functionTypeHaxe4Policy"] = value209;
		}
		var value210 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.compressSuccessiveParenthesis"] != null) {
			_g.setReserved("whitespace.compressSuccessiveParenthesis",value210);
		} else {
			_g.h["whitespace.compressSuccessiveParenthesis"] = value210;
		}
		var value211 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.formatStringInterpolation"] != null) {
			_g.setReserved("whitespace.formatStringInterpolation",value211);
		} else {
			_g.h["whitespace.formatStringInterpolation"] = value211;
		}
		var value212 = codesamples_config_ConfigFieldType.Bool;
		if(__map_reserved["whitespace.addLineCommentSpace"] != null) {
			_g.setReserved("whitespace.addLineCommentSpace",value212);
		} else {
			_g.h["whitespace.addLineCommentSpace"] = value212;
		}
		var value213 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.maxLineLength"] != null) {
			_g.setReserved("wrapping.maxLineLength",value213);
		} else {
			_g.h["wrapping.maxLineLength"] = value213;
		}
		var value214 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("noMatrixWrap" , String),js_Boot.__cast("matrixWrapNoAlign" , String),js_Boot.__cast("matrixWrapWithAlign" , String)]);
		if(__map_reserved["wrapping.arrayMatrixWrap"] != null) {
			_g.setReserved("wrapping.arrayMatrixWrap",value214);
		} else {
			_g.h["wrapping.arrayMatrixWrap"] = value214;
		}
		var value215 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.arrayWrap.defaultWrap"] != null) {
			_g.setReserved("wrapping.arrayWrap.defaultWrap",value215);
		} else {
			_g.h["wrapping.arrayWrap.defaultWrap"] = value215;
		}
		var value216 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.arrayWrap.defaultLocation"] != null) {
			_g.setReserved("wrapping.arrayWrap.defaultLocation",value216);
		} else {
			_g.h["wrapping.arrayWrap.defaultLocation"] = value216;
		}
		var value217 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.arrayWrap.defaultAdditionalIndent",value217);
		} else {
			_g.h["wrapping.arrayWrap.defaultAdditionalIndent"] = value217;
		}
		var value218 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[0].conditions[0].cond",value218);
		} else {
			_g.h["wrapping.arrayWrap.rules[0].conditions[0].cond"] = value218;
		}
		var value219 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[0].conditions[0].value",value219);
		} else {
			_g.h["wrapping.arrayWrap.rules[0].conditions[0].value"] = value219;
		}
		var value220 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[0].conditions[1].cond",value220);
		} else {
			_g.h["wrapping.arrayWrap.rules[0].conditions[1].cond"] = value220;
		}
		var value221 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[0].conditions[1].value",value221);
		} else {
			_g.h["wrapping.arrayWrap.rules[0].conditions[1].value"] = value221;
		}
		var value222 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[0].type"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[0].type",value222);
		} else {
			_g.h["wrapping.arrayWrap.rules[0].type"] = value222;
		}
		var value223 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[0].location"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[0].location",value223);
		} else {
			_g.h["wrapping.arrayWrap.rules[0].location"] = value223;
		}
		var value224 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[0].additionalIndent",value224);
		} else {
			_g.h["wrapping.arrayWrap.rules[0].additionalIndent"] = value224;
		}
		var value225 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[1].conditions[0].cond",value225);
		} else {
			_g.h["wrapping.arrayWrap.rules[1].conditions[0].cond"] = value225;
		}
		var value226 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[1].conditions[0].value",value226);
		} else {
			_g.h["wrapping.arrayWrap.rules[1].conditions[0].value"] = value226;
		}
		var value227 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[1].conditions[1].cond",value227);
		} else {
			_g.h["wrapping.arrayWrap.rules[1].conditions[1].cond"] = value227;
		}
		var value228 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[1].conditions[1].value",value228);
		} else {
			_g.h["wrapping.arrayWrap.rules[1].conditions[1].value"] = value228;
		}
		var value229 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[1].type"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[1].type",value229);
		} else {
			_g.h["wrapping.arrayWrap.rules[1].type"] = value229;
		}
		var value230 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[1].location"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[1].location",value230);
		} else {
			_g.h["wrapping.arrayWrap.rules[1].location"] = value230;
		}
		var value231 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[1].additionalIndent",value231);
		} else {
			_g.h["wrapping.arrayWrap.rules[1].additionalIndent"] = value231;
		}
		var value232 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[2].conditions[0].cond",value232);
		} else {
			_g.h["wrapping.arrayWrap.rules[2].conditions[0].cond"] = value232;
		}
		var value233 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[2].conditions[0].value",value233);
		} else {
			_g.h["wrapping.arrayWrap.rules[2].conditions[0].value"] = value233;
		}
		var value234 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[2].conditions[1].cond",value234);
		} else {
			_g.h["wrapping.arrayWrap.rules[2].conditions[1].cond"] = value234;
		}
		var value235 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[2].conditions[1].value",value235);
		} else {
			_g.h["wrapping.arrayWrap.rules[2].conditions[1].value"] = value235;
		}
		var value236 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[2].type"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[2].type",value236);
		} else {
			_g.h["wrapping.arrayWrap.rules[2].type"] = value236;
		}
		var value237 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[2].location"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[2].location",value237);
		} else {
			_g.h["wrapping.arrayWrap.rules[2].location"] = value237;
		}
		var value238 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[2].additionalIndent",value238);
		} else {
			_g.h["wrapping.arrayWrap.rules[2].additionalIndent"] = value238;
		}
		var value239 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[3].conditions[0].cond",value239);
		} else {
			_g.h["wrapping.arrayWrap.rules[3].conditions[0].cond"] = value239;
		}
		var value240 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[3].conditions[0].value",value240);
		} else {
			_g.h["wrapping.arrayWrap.rules[3].conditions[0].value"] = value240;
		}
		var value241 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[3].conditions[1].cond",value241);
		} else {
			_g.h["wrapping.arrayWrap.rules[3].conditions[1].cond"] = value241;
		}
		var value242 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[3].conditions[1].value",value242);
		} else {
			_g.h["wrapping.arrayWrap.rules[3].conditions[1].value"] = value242;
		}
		var value243 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[3].type"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[3].type",value243);
		} else {
			_g.h["wrapping.arrayWrap.rules[3].type"] = value243;
		}
		var value244 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[3].location"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[3].location",value244);
		} else {
			_g.h["wrapping.arrayWrap.rules[3].location"] = value244;
		}
		var value245 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[3].additionalIndent",value245);
		} else {
			_g.h["wrapping.arrayWrap.rules[3].additionalIndent"] = value245;
		}
		var value246 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[4].conditions[0].cond",value246);
		} else {
			_g.h["wrapping.arrayWrap.rules[4].conditions[0].cond"] = value246;
		}
		var value247 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[4].conditions[0].value",value247);
		} else {
			_g.h["wrapping.arrayWrap.rules[4].conditions[0].value"] = value247;
		}
		var value248 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[4].conditions[1].cond",value248);
		} else {
			_g.h["wrapping.arrayWrap.rules[4].conditions[1].cond"] = value248;
		}
		var value249 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[4].conditions[1].value",value249);
		} else {
			_g.h["wrapping.arrayWrap.rules[4].conditions[1].value"] = value249;
		}
		var value250 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[4].type"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[4].type",value250);
		} else {
			_g.h["wrapping.arrayWrap.rules[4].type"] = value250;
		}
		var value251 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[4].location"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[4].location",value251);
		} else {
			_g.h["wrapping.arrayWrap.rules[4].location"] = value251;
		}
		var value252 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[4].additionalIndent",value252);
		} else {
			_g.h["wrapping.arrayWrap.rules[4].additionalIndent"] = value252;
		}
		var value253 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[5].conditions[0].cond",value253);
		} else {
			_g.h["wrapping.arrayWrap.rules[5].conditions[0].cond"] = value253;
		}
		var value254 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[5].conditions[0].value",value254);
		} else {
			_g.h["wrapping.arrayWrap.rules[5].conditions[0].value"] = value254;
		}
		var value255 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[5].conditions[1].cond",value255);
		} else {
			_g.h["wrapping.arrayWrap.rules[5].conditions[1].cond"] = value255;
		}
		var value256 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[5].conditions[1].value",value256);
		} else {
			_g.h["wrapping.arrayWrap.rules[5].conditions[1].value"] = value256;
		}
		var value257 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[5].type"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[5].type",value257);
		} else {
			_g.h["wrapping.arrayWrap.rules[5].type"] = value257;
		}
		var value258 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.arrayWrap.rules[5].location"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[5].location",value258);
		} else {
			_g.h["wrapping.arrayWrap.rules[5].location"] = value258;
		}
		var value259 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.arrayWrap.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.arrayWrap.rules[5].additionalIndent",value259);
		} else {
			_g.h["wrapping.arrayWrap.rules[5].additionalIndent"] = value259;
		}
		var value260 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.typeParameter.defaultWrap"] != null) {
			_g.setReserved("wrapping.typeParameter.defaultWrap",value260);
		} else {
			_g.h["wrapping.typeParameter.defaultWrap"] = value260;
		}
		var value261 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.typeParameter.defaultLocation"] != null) {
			_g.setReserved("wrapping.typeParameter.defaultLocation",value261);
		} else {
			_g.h["wrapping.typeParameter.defaultLocation"] = value261;
		}
		var value262 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.typeParameter.defaultAdditionalIndent",value262);
		} else {
			_g.h["wrapping.typeParameter.defaultAdditionalIndent"] = value262;
		}
		var value263 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[0].conditions[0].cond",value263);
		} else {
			_g.h["wrapping.typeParameter.rules[0].conditions[0].cond"] = value263;
		}
		var value264 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[0].conditions[0].value",value264);
		} else {
			_g.h["wrapping.typeParameter.rules[0].conditions[0].value"] = value264;
		}
		var value265 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[0].conditions[1].cond",value265);
		} else {
			_g.h["wrapping.typeParameter.rules[0].conditions[1].cond"] = value265;
		}
		var value266 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[0].conditions[1].value",value266);
		} else {
			_g.h["wrapping.typeParameter.rules[0].conditions[1].value"] = value266;
		}
		var value267 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[0].type"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[0].type",value267);
		} else {
			_g.h["wrapping.typeParameter.rules[0].type"] = value267;
		}
		var value268 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[0].location"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[0].location",value268);
		} else {
			_g.h["wrapping.typeParameter.rules[0].location"] = value268;
		}
		var value269 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[0].additionalIndent",value269);
		} else {
			_g.h["wrapping.typeParameter.rules[0].additionalIndent"] = value269;
		}
		var value270 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[1].conditions[0].cond",value270);
		} else {
			_g.h["wrapping.typeParameter.rules[1].conditions[0].cond"] = value270;
		}
		var value271 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[1].conditions[0].value",value271);
		} else {
			_g.h["wrapping.typeParameter.rules[1].conditions[0].value"] = value271;
		}
		var value272 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[1].conditions[1].cond",value272);
		} else {
			_g.h["wrapping.typeParameter.rules[1].conditions[1].cond"] = value272;
		}
		var value273 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[1].conditions[1].value",value273);
		} else {
			_g.h["wrapping.typeParameter.rules[1].conditions[1].value"] = value273;
		}
		var value274 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[1].type"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[1].type",value274);
		} else {
			_g.h["wrapping.typeParameter.rules[1].type"] = value274;
		}
		var value275 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[1].location"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[1].location",value275);
		} else {
			_g.h["wrapping.typeParameter.rules[1].location"] = value275;
		}
		var value276 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[1].additionalIndent",value276);
		} else {
			_g.h["wrapping.typeParameter.rules[1].additionalIndent"] = value276;
		}
		var value277 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[2].conditions[0].cond",value277);
		} else {
			_g.h["wrapping.typeParameter.rules[2].conditions[0].cond"] = value277;
		}
		var value278 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[2].conditions[0].value",value278);
		} else {
			_g.h["wrapping.typeParameter.rules[2].conditions[0].value"] = value278;
		}
		var value279 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[2].conditions[1].cond",value279);
		} else {
			_g.h["wrapping.typeParameter.rules[2].conditions[1].cond"] = value279;
		}
		var value280 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[2].conditions[1].value",value280);
		} else {
			_g.h["wrapping.typeParameter.rules[2].conditions[1].value"] = value280;
		}
		var value281 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[2].type"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[2].type",value281);
		} else {
			_g.h["wrapping.typeParameter.rules[2].type"] = value281;
		}
		var value282 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[2].location"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[2].location",value282);
		} else {
			_g.h["wrapping.typeParameter.rules[2].location"] = value282;
		}
		var value283 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[2].additionalIndent",value283);
		} else {
			_g.h["wrapping.typeParameter.rules[2].additionalIndent"] = value283;
		}
		var value284 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[3].conditions[0].cond",value284);
		} else {
			_g.h["wrapping.typeParameter.rules[3].conditions[0].cond"] = value284;
		}
		var value285 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[3].conditions[0].value",value285);
		} else {
			_g.h["wrapping.typeParameter.rules[3].conditions[0].value"] = value285;
		}
		var value286 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[3].conditions[1].cond",value286);
		} else {
			_g.h["wrapping.typeParameter.rules[3].conditions[1].cond"] = value286;
		}
		var value287 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[3].conditions[1].value",value287);
		} else {
			_g.h["wrapping.typeParameter.rules[3].conditions[1].value"] = value287;
		}
		var value288 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[3].type"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[3].type",value288);
		} else {
			_g.h["wrapping.typeParameter.rules[3].type"] = value288;
		}
		var value289 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[3].location"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[3].location",value289);
		} else {
			_g.h["wrapping.typeParameter.rules[3].location"] = value289;
		}
		var value290 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[3].additionalIndent",value290);
		} else {
			_g.h["wrapping.typeParameter.rules[3].additionalIndent"] = value290;
		}
		var value291 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[4].conditions[0].cond",value291);
		} else {
			_g.h["wrapping.typeParameter.rules[4].conditions[0].cond"] = value291;
		}
		var value292 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[4].conditions[0].value",value292);
		} else {
			_g.h["wrapping.typeParameter.rules[4].conditions[0].value"] = value292;
		}
		var value293 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[4].conditions[1].cond",value293);
		} else {
			_g.h["wrapping.typeParameter.rules[4].conditions[1].cond"] = value293;
		}
		var value294 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[4].conditions[1].value",value294);
		} else {
			_g.h["wrapping.typeParameter.rules[4].conditions[1].value"] = value294;
		}
		var value295 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[4].type"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[4].type",value295);
		} else {
			_g.h["wrapping.typeParameter.rules[4].type"] = value295;
		}
		var value296 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[4].location"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[4].location",value296);
		} else {
			_g.h["wrapping.typeParameter.rules[4].location"] = value296;
		}
		var value297 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[4].additionalIndent",value297);
		} else {
			_g.h["wrapping.typeParameter.rules[4].additionalIndent"] = value297;
		}
		var value298 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[5].conditions[0].cond",value298);
		} else {
			_g.h["wrapping.typeParameter.rules[5].conditions[0].cond"] = value298;
		}
		var value299 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[5].conditions[0].value",value299);
		} else {
			_g.h["wrapping.typeParameter.rules[5].conditions[0].value"] = value299;
		}
		var value300 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[5].conditions[1].cond",value300);
		} else {
			_g.h["wrapping.typeParameter.rules[5].conditions[1].cond"] = value300;
		}
		var value301 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[5].conditions[1].value",value301);
		} else {
			_g.h["wrapping.typeParameter.rules[5].conditions[1].value"] = value301;
		}
		var value302 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[5].type"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[5].type",value302);
		} else {
			_g.h["wrapping.typeParameter.rules[5].type"] = value302;
		}
		var value303 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.typeParameter.rules[5].location"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[5].location",value303);
		} else {
			_g.h["wrapping.typeParameter.rules[5].location"] = value303;
		}
		var value304 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.typeParameter.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.typeParameter.rules[5].additionalIndent",value304);
		} else {
			_g.h["wrapping.typeParameter.rules[5].additionalIndent"] = value304;
		}
		var value305 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.functionSignature.defaultWrap"] != null) {
			_g.setReserved("wrapping.functionSignature.defaultWrap",value305);
		} else {
			_g.h["wrapping.functionSignature.defaultWrap"] = value305;
		}
		var value306 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.functionSignature.defaultLocation"] != null) {
			_g.setReserved("wrapping.functionSignature.defaultLocation",value306);
		} else {
			_g.h["wrapping.functionSignature.defaultLocation"] = value306;
		}
		var value307 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.functionSignature.defaultAdditionalIndent",value307);
		} else {
			_g.h["wrapping.functionSignature.defaultAdditionalIndent"] = value307;
		}
		var value308 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[0].conditions[0].cond",value308);
		} else {
			_g.h["wrapping.functionSignature.rules[0].conditions[0].cond"] = value308;
		}
		var value309 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[0].conditions[0].value",value309);
		} else {
			_g.h["wrapping.functionSignature.rules[0].conditions[0].value"] = value309;
		}
		var value310 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[0].conditions[1].cond",value310);
		} else {
			_g.h["wrapping.functionSignature.rules[0].conditions[1].cond"] = value310;
		}
		var value311 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[0].conditions[1].value",value311);
		} else {
			_g.h["wrapping.functionSignature.rules[0].conditions[1].value"] = value311;
		}
		var value312 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[0].type"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[0].type",value312);
		} else {
			_g.h["wrapping.functionSignature.rules[0].type"] = value312;
		}
		var value313 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[0].location"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[0].location",value313);
		} else {
			_g.h["wrapping.functionSignature.rules[0].location"] = value313;
		}
		var value314 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[0].additionalIndent",value314);
		} else {
			_g.h["wrapping.functionSignature.rules[0].additionalIndent"] = value314;
		}
		var value315 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[1].conditions[0].cond",value315);
		} else {
			_g.h["wrapping.functionSignature.rules[1].conditions[0].cond"] = value315;
		}
		var value316 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[1].conditions[0].value",value316);
		} else {
			_g.h["wrapping.functionSignature.rules[1].conditions[0].value"] = value316;
		}
		var value317 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[1].conditions[1].cond",value317);
		} else {
			_g.h["wrapping.functionSignature.rules[1].conditions[1].cond"] = value317;
		}
		var value318 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[1].conditions[1].value",value318);
		} else {
			_g.h["wrapping.functionSignature.rules[1].conditions[1].value"] = value318;
		}
		var value319 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[1].type"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[1].type",value319);
		} else {
			_g.h["wrapping.functionSignature.rules[1].type"] = value319;
		}
		var value320 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[1].location"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[1].location",value320);
		} else {
			_g.h["wrapping.functionSignature.rules[1].location"] = value320;
		}
		var value321 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[1].additionalIndent",value321);
		} else {
			_g.h["wrapping.functionSignature.rules[1].additionalIndent"] = value321;
		}
		var value322 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[2].conditions[0].cond",value322);
		} else {
			_g.h["wrapping.functionSignature.rules[2].conditions[0].cond"] = value322;
		}
		var value323 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[2].conditions[0].value",value323);
		} else {
			_g.h["wrapping.functionSignature.rules[2].conditions[0].value"] = value323;
		}
		var value324 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[2].conditions[1].cond",value324);
		} else {
			_g.h["wrapping.functionSignature.rules[2].conditions[1].cond"] = value324;
		}
		var value325 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[2].conditions[1].value",value325);
		} else {
			_g.h["wrapping.functionSignature.rules[2].conditions[1].value"] = value325;
		}
		var value326 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[2].type"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[2].type",value326);
		} else {
			_g.h["wrapping.functionSignature.rules[2].type"] = value326;
		}
		var value327 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[2].location"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[2].location",value327);
		} else {
			_g.h["wrapping.functionSignature.rules[2].location"] = value327;
		}
		var value328 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[2].additionalIndent",value328);
		} else {
			_g.h["wrapping.functionSignature.rules[2].additionalIndent"] = value328;
		}
		var value329 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[3].conditions[0].cond",value329);
		} else {
			_g.h["wrapping.functionSignature.rules[3].conditions[0].cond"] = value329;
		}
		var value330 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[3].conditions[0].value",value330);
		} else {
			_g.h["wrapping.functionSignature.rules[3].conditions[0].value"] = value330;
		}
		var value331 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[3].conditions[1].cond",value331);
		} else {
			_g.h["wrapping.functionSignature.rules[3].conditions[1].cond"] = value331;
		}
		var value332 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[3].conditions[1].value",value332);
		} else {
			_g.h["wrapping.functionSignature.rules[3].conditions[1].value"] = value332;
		}
		var value333 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[3].type"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[3].type",value333);
		} else {
			_g.h["wrapping.functionSignature.rules[3].type"] = value333;
		}
		var value334 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[3].location"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[3].location",value334);
		} else {
			_g.h["wrapping.functionSignature.rules[3].location"] = value334;
		}
		var value335 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[3].additionalIndent",value335);
		} else {
			_g.h["wrapping.functionSignature.rules[3].additionalIndent"] = value335;
		}
		var value336 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[4].conditions[0].cond",value336);
		} else {
			_g.h["wrapping.functionSignature.rules[4].conditions[0].cond"] = value336;
		}
		var value337 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[4].conditions[0].value",value337);
		} else {
			_g.h["wrapping.functionSignature.rules[4].conditions[0].value"] = value337;
		}
		var value338 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[4].conditions[1].cond",value338);
		} else {
			_g.h["wrapping.functionSignature.rules[4].conditions[1].cond"] = value338;
		}
		var value339 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[4].conditions[1].value",value339);
		} else {
			_g.h["wrapping.functionSignature.rules[4].conditions[1].value"] = value339;
		}
		var value340 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[4].type"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[4].type",value340);
		} else {
			_g.h["wrapping.functionSignature.rules[4].type"] = value340;
		}
		var value341 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[4].location"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[4].location",value341);
		} else {
			_g.h["wrapping.functionSignature.rules[4].location"] = value341;
		}
		var value342 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[4].additionalIndent",value342);
		} else {
			_g.h["wrapping.functionSignature.rules[4].additionalIndent"] = value342;
		}
		var value343 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[5].conditions[0].cond",value343);
		} else {
			_g.h["wrapping.functionSignature.rules[5].conditions[0].cond"] = value343;
		}
		var value344 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[5].conditions[0].value",value344);
		} else {
			_g.h["wrapping.functionSignature.rules[5].conditions[0].value"] = value344;
		}
		var value345 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[5].conditions[1].cond",value345);
		} else {
			_g.h["wrapping.functionSignature.rules[5].conditions[1].cond"] = value345;
		}
		var value346 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[5].conditions[1].value",value346);
		} else {
			_g.h["wrapping.functionSignature.rules[5].conditions[1].value"] = value346;
		}
		var value347 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[5].type"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[5].type",value347);
		} else {
			_g.h["wrapping.functionSignature.rules[5].type"] = value347;
		}
		var value348 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.functionSignature.rules[5].location"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[5].location",value348);
		} else {
			_g.h["wrapping.functionSignature.rules[5].location"] = value348;
		}
		var value349 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.functionSignature.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.functionSignature.rules[5].additionalIndent",value349);
		} else {
			_g.h["wrapping.functionSignature.rules[5].additionalIndent"] = value349;
		}
		var value350 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.defaultWrap"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.defaultWrap",value350);
		} else {
			_g.h["wrapping.anonFunctionSignature.defaultWrap"] = value350;
		}
		var value351 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.defaultLocation"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.defaultLocation",value351);
		} else {
			_g.h["wrapping.anonFunctionSignature.defaultLocation"] = value351;
		}
		var value352 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.defaultAdditionalIndent",value352);
		} else {
			_g.h["wrapping.anonFunctionSignature.defaultAdditionalIndent"] = value352;
		}
		var value353 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[0].conditions[0].cond",value353);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[0].conditions[0].cond"] = value353;
		}
		var value354 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[0].conditions[0].value",value354);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[0].conditions[0].value"] = value354;
		}
		var value355 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[0].conditions[1].cond",value355);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[0].conditions[1].cond"] = value355;
		}
		var value356 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[0].conditions[1].value",value356);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[0].conditions[1].value"] = value356;
		}
		var value357 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[0].type"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[0].type",value357);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[0].type"] = value357;
		}
		var value358 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[0].location"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[0].location",value358);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[0].location"] = value358;
		}
		var value359 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[0].additionalIndent",value359);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[0].additionalIndent"] = value359;
		}
		var value360 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[1].conditions[0].cond",value360);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[1].conditions[0].cond"] = value360;
		}
		var value361 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[1].conditions[0].value",value361);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[1].conditions[0].value"] = value361;
		}
		var value362 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[1].conditions[1].cond",value362);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[1].conditions[1].cond"] = value362;
		}
		var value363 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[1].conditions[1].value",value363);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[1].conditions[1].value"] = value363;
		}
		var value364 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[1].type"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[1].type",value364);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[1].type"] = value364;
		}
		var value365 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[1].location"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[1].location",value365);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[1].location"] = value365;
		}
		var value366 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[1].additionalIndent",value366);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[1].additionalIndent"] = value366;
		}
		var value367 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[2].conditions[0].cond",value367);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[2].conditions[0].cond"] = value367;
		}
		var value368 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[2].conditions[0].value",value368);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[2].conditions[0].value"] = value368;
		}
		var value369 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[2].conditions[1].cond",value369);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[2].conditions[1].cond"] = value369;
		}
		var value370 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[2].conditions[1].value",value370);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[2].conditions[1].value"] = value370;
		}
		var value371 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[2].type"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[2].type",value371);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[2].type"] = value371;
		}
		var value372 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[2].location"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[2].location",value372);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[2].location"] = value372;
		}
		var value373 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[2].additionalIndent",value373);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[2].additionalIndent"] = value373;
		}
		var value374 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[3].conditions[0].cond",value374);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[3].conditions[0].cond"] = value374;
		}
		var value375 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[3].conditions[0].value",value375);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[3].conditions[0].value"] = value375;
		}
		var value376 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[3].conditions[1].cond",value376);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[3].conditions[1].cond"] = value376;
		}
		var value377 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[3].conditions[1].value",value377);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[3].conditions[1].value"] = value377;
		}
		var value378 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[3].type"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[3].type",value378);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[3].type"] = value378;
		}
		var value379 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[3].location"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[3].location",value379);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[3].location"] = value379;
		}
		var value380 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[3].additionalIndent",value380);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[3].additionalIndent"] = value380;
		}
		var value381 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[4].conditions[0].cond",value381);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[4].conditions[0].cond"] = value381;
		}
		var value382 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[4].conditions[0].value",value382);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[4].conditions[0].value"] = value382;
		}
		var value383 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[4].conditions[1].cond",value383);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[4].conditions[1].cond"] = value383;
		}
		var value384 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[4].conditions[1].value",value384);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[4].conditions[1].value"] = value384;
		}
		var value385 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[4].type"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[4].type",value385);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[4].type"] = value385;
		}
		var value386 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[4].location"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[4].location",value386);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[4].location"] = value386;
		}
		var value387 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[4].additionalIndent",value387);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[4].additionalIndent"] = value387;
		}
		var value388 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[5].conditions[0].cond",value388);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[5].conditions[0].cond"] = value388;
		}
		var value389 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[5].conditions[0].value",value389);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[5].conditions[0].value"] = value389;
		}
		var value390 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[5].conditions[1].cond",value390);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[5].conditions[1].cond"] = value390;
		}
		var value391 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[5].conditions[1].value",value391);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[5].conditions[1].value"] = value391;
		}
		var value392 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[5].type"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[5].type",value392);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[5].type"] = value392;
		}
		var value393 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonFunctionSignature.rules[5].location"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[5].location",value393);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[5].location"] = value393;
		}
		var value394 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonFunctionSignature.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonFunctionSignature.rules[5].additionalIndent",value394);
		} else {
			_g.h["wrapping.anonFunctionSignature.rules[5].additionalIndent"] = value394;
		}
		var value395 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.callParameter.defaultWrap"] != null) {
			_g.setReserved("wrapping.callParameter.defaultWrap",value395);
		} else {
			_g.h["wrapping.callParameter.defaultWrap"] = value395;
		}
		var value396 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.callParameter.defaultLocation"] != null) {
			_g.setReserved("wrapping.callParameter.defaultLocation",value396);
		} else {
			_g.h["wrapping.callParameter.defaultLocation"] = value396;
		}
		var value397 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.callParameter.defaultAdditionalIndent",value397);
		} else {
			_g.h["wrapping.callParameter.defaultAdditionalIndent"] = value397;
		}
		var value398 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[0].conditions[0].cond",value398);
		} else {
			_g.h["wrapping.callParameter.rules[0].conditions[0].cond"] = value398;
		}
		var value399 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[0].conditions[0].value",value399);
		} else {
			_g.h["wrapping.callParameter.rules[0].conditions[0].value"] = value399;
		}
		var value400 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[0].conditions[1].cond",value400);
		} else {
			_g.h["wrapping.callParameter.rules[0].conditions[1].cond"] = value400;
		}
		var value401 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[0].conditions[1].value",value401);
		} else {
			_g.h["wrapping.callParameter.rules[0].conditions[1].value"] = value401;
		}
		var value402 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[0].type"] != null) {
			_g.setReserved("wrapping.callParameter.rules[0].type",value402);
		} else {
			_g.h["wrapping.callParameter.rules[0].type"] = value402;
		}
		var value403 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[0].location"] != null) {
			_g.setReserved("wrapping.callParameter.rules[0].location",value403);
		} else {
			_g.h["wrapping.callParameter.rules[0].location"] = value403;
		}
		var value404 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.callParameter.rules[0].additionalIndent",value404);
		} else {
			_g.h["wrapping.callParameter.rules[0].additionalIndent"] = value404;
		}
		var value405 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[1].conditions[0].cond",value405);
		} else {
			_g.h["wrapping.callParameter.rules[1].conditions[0].cond"] = value405;
		}
		var value406 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[1].conditions[0].value",value406);
		} else {
			_g.h["wrapping.callParameter.rules[1].conditions[0].value"] = value406;
		}
		var value407 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[1].conditions[1].cond",value407);
		} else {
			_g.h["wrapping.callParameter.rules[1].conditions[1].cond"] = value407;
		}
		var value408 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[1].conditions[1].value",value408);
		} else {
			_g.h["wrapping.callParameter.rules[1].conditions[1].value"] = value408;
		}
		var value409 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[1].type"] != null) {
			_g.setReserved("wrapping.callParameter.rules[1].type",value409);
		} else {
			_g.h["wrapping.callParameter.rules[1].type"] = value409;
		}
		var value410 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[1].location"] != null) {
			_g.setReserved("wrapping.callParameter.rules[1].location",value410);
		} else {
			_g.h["wrapping.callParameter.rules[1].location"] = value410;
		}
		var value411 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.callParameter.rules[1].additionalIndent",value411);
		} else {
			_g.h["wrapping.callParameter.rules[1].additionalIndent"] = value411;
		}
		var value412 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[2].conditions[0].cond",value412);
		} else {
			_g.h["wrapping.callParameter.rules[2].conditions[0].cond"] = value412;
		}
		var value413 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[2].conditions[0].value",value413);
		} else {
			_g.h["wrapping.callParameter.rules[2].conditions[0].value"] = value413;
		}
		var value414 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[2].conditions[1].cond",value414);
		} else {
			_g.h["wrapping.callParameter.rules[2].conditions[1].cond"] = value414;
		}
		var value415 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[2].conditions[1].value",value415);
		} else {
			_g.h["wrapping.callParameter.rules[2].conditions[1].value"] = value415;
		}
		var value416 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[2].type"] != null) {
			_g.setReserved("wrapping.callParameter.rules[2].type",value416);
		} else {
			_g.h["wrapping.callParameter.rules[2].type"] = value416;
		}
		var value417 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[2].location"] != null) {
			_g.setReserved("wrapping.callParameter.rules[2].location",value417);
		} else {
			_g.h["wrapping.callParameter.rules[2].location"] = value417;
		}
		var value418 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.callParameter.rules[2].additionalIndent",value418);
		} else {
			_g.h["wrapping.callParameter.rules[2].additionalIndent"] = value418;
		}
		var value419 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[3].conditions[0].cond",value419);
		} else {
			_g.h["wrapping.callParameter.rules[3].conditions[0].cond"] = value419;
		}
		var value420 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[3].conditions[0].value",value420);
		} else {
			_g.h["wrapping.callParameter.rules[3].conditions[0].value"] = value420;
		}
		var value421 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[3].conditions[1].cond",value421);
		} else {
			_g.h["wrapping.callParameter.rules[3].conditions[1].cond"] = value421;
		}
		var value422 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[3].conditions[1].value",value422);
		} else {
			_g.h["wrapping.callParameter.rules[3].conditions[1].value"] = value422;
		}
		var value423 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[3].type"] != null) {
			_g.setReserved("wrapping.callParameter.rules[3].type",value423);
		} else {
			_g.h["wrapping.callParameter.rules[3].type"] = value423;
		}
		var value424 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[3].location"] != null) {
			_g.setReserved("wrapping.callParameter.rules[3].location",value424);
		} else {
			_g.h["wrapping.callParameter.rules[3].location"] = value424;
		}
		var value425 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.callParameter.rules[3].additionalIndent",value425);
		} else {
			_g.h["wrapping.callParameter.rules[3].additionalIndent"] = value425;
		}
		var value426 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[4].conditions[0].cond",value426);
		} else {
			_g.h["wrapping.callParameter.rules[4].conditions[0].cond"] = value426;
		}
		var value427 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[4].conditions[0].value",value427);
		} else {
			_g.h["wrapping.callParameter.rules[4].conditions[0].value"] = value427;
		}
		var value428 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[4].conditions[1].cond",value428);
		} else {
			_g.h["wrapping.callParameter.rules[4].conditions[1].cond"] = value428;
		}
		var value429 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[4].conditions[1].value",value429);
		} else {
			_g.h["wrapping.callParameter.rules[4].conditions[1].value"] = value429;
		}
		var value430 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[4].type"] != null) {
			_g.setReserved("wrapping.callParameter.rules[4].type",value430);
		} else {
			_g.h["wrapping.callParameter.rules[4].type"] = value430;
		}
		var value431 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[4].location"] != null) {
			_g.setReserved("wrapping.callParameter.rules[4].location",value431);
		} else {
			_g.h["wrapping.callParameter.rules[4].location"] = value431;
		}
		var value432 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.callParameter.rules[4].additionalIndent",value432);
		} else {
			_g.h["wrapping.callParameter.rules[4].additionalIndent"] = value432;
		}
		var value433 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[5].conditions[0].cond",value433);
		} else {
			_g.h["wrapping.callParameter.rules[5].conditions[0].cond"] = value433;
		}
		var value434 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[5].conditions[0].value",value434);
		} else {
			_g.h["wrapping.callParameter.rules[5].conditions[0].value"] = value434;
		}
		var value435 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.callParameter.rules[5].conditions[1].cond",value435);
		} else {
			_g.h["wrapping.callParameter.rules[5].conditions[1].cond"] = value435;
		}
		var value436 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.callParameter.rules[5].conditions[1].value",value436);
		} else {
			_g.h["wrapping.callParameter.rules[5].conditions[1].value"] = value436;
		}
		var value437 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[5].type"] != null) {
			_g.setReserved("wrapping.callParameter.rules[5].type",value437);
		} else {
			_g.h["wrapping.callParameter.rules[5].type"] = value437;
		}
		var value438 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.callParameter.rules[5].location"] != null) {
			_g.setReserved("wrapping.callParameter.rules[5].location",value438);
		} else {
			_g.h["wrapping.callParameter.rules[5].location"] = value438;
		}
		var value439 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.callParameter.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.callParameter.rules[5].additionalIndent",value439);
		} else {
			_g.h["wrapping.callParameter.rules[5].additionalIndent"] = value439;
		}
		var value440 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.defaultWrap"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.defaultWrap",value440);
		} else {
			_g.h["wrapping.metadataCallParameter.defaultWrap"] = value440;
		}
		var value441 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.defaultLocation"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.defaultLocation",value441);
		} else {
			_g.h["wrapping.metadataCallParameter.defaultLocation"] = value441;
		}
		var value442 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.defaultAdditionalIndent",value442);
		} else {
			_g.h["wrapping.metadataCallParameter.defaultAdditionalIndent"] = value442;
		}
		var value443 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[0].conditions[0].cond",value443);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[0].conditions[0].cond"] = value443;
		}
		var value444 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[0].conditions[0].value",value444);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[0].conditions[0].value"] = value444;
		}
		var value445 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[0].conditions[1].cond",value445);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[0].conditions[1].cond"] = value445;
		}
		var value446 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[0].conditions[1].value",value446);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[0].conditions[1].value"] = value446;
		}
		var value447 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[0].type"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[0].type",value447);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[0].type"] = value447;
		}
		var value448 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[0].location"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[0].location",value448);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[0].location"] = value448;
		}
		var value449 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[0].additionalIndent",value449);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[0].additionalIndent"] = value449;
		}
		var value450 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[1].conditions[0].cond",value450);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[1].conditions[0].cond"] = value450;
		}
		var value451 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[1].conditions[0].value",value451);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[1].conditions[0].value"] = value451;
		}
		var value452 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[1].conditions[1].cond",value452);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[1].conditions[1].cond"] = value452;
		}
		var value453 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[1].conditions[1].value",value453);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[1].conditions[1].value"] = value453;
		}
		var value454 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[1].type"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[1].type",value454);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[1].type"] = value454;
		}
		var value455 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[1].location"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[1].location",value455);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[1].location"] = value455;
		}
		var value456 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[1].additionalIndent",value456);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[1].additionalIndent"] = value456;
		}
		var value457 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[2].conditions[0].cond",value457);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[2].conditions[0].cond"] = value457;
		}
		var value458 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[2].conditions[0].value",value458);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[2].conditions[0].value"] = value458;
		}
		var value459 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[2].conditions[1].cond",value459);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[2].conditions[1].cond"] = value459;
		}
		var value460 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[2].conditions[1].value",value460);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[2].conditions[1].value"] = value460;
		}
		var value461 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[2].type"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[2].type",value461);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[2].type"] = value461;
		}
		var value462 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[2].location"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[2].location",value462);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[2].location"] = value462;
		}
		var value463 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[2].additionalIndent",value463);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[2].additionalIndent"] = value463;
		}
		var value464 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[3].conditions[0].cond",value464);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[3].conditions[0].cond"] = value464;
		}
		var value465 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[3].conditions[0].value",value465);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[3].conditions[0].value"] = value465;
		}
		var value466 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[3].conditions[1].cond",value466);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[3].conditions[1].cond"] = value466;
		}
		var value467 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[3].conditions[1].value",value467);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[3].conditions[1].value"] = value467;
		}
		var value468 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[3].type"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[3].type",value468);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[3].type"] = value468;
		}
		var value469 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[3].location"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[3].location",value469);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[3].location"] = value469;
		}
		var value470 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[3].additionalIndent",value470);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[3].additionalIndent"] = value470;
		}
		var value471 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[4].conditions[0].cond",value471);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[4].conditions[0].cond"] = value471;
		}
		var value472 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[4].conditions[0].value",value472);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[4].conditions[0].value"] = value472;
		}
		var value473 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[4].conditions[1].cond",value473);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[4].conditions[1].cond"] = value473;
		}
		var value474 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[4].conditions[1].value",value474);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[4].conditions[1].value"] = value474;
		}
		var value475 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[4].type"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[4].type",value475);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[4].type"] = value475;
		}
		var value476 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[4].location"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[4].location",value476);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[4].location"] = value476;
		}
		var value477 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[4].additionalIndent",value477);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[4].additionalIndent"] = value477;
		}
		var value478 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[5].conditions[0].cond",value478);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[5].conditions[0].cond"] = value478;
		}
		var value479 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[5].conditions[0].value",value479);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[5].conditions[0].value"] = value479;
		}
		var value480 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[5].conditions[1].cond",value480);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[5].conditions[1].cond"] = value480;
		}
		var value481 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[5].conditions[1].value",value481);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[5].conditions[1].value"] = value481;
		}
		var value482 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[5].type"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[5].type",value482);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[5].type"] = value482;
		}
		var value483 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.metadataCallParameter.rules[5].location"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[5].location",value483);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[5].location"] = value483;
		}
		var value484 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.metadataCallParameter.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.metadataCallParameter.rules[5].additionalIndent",value484);
		} else {
			_g.h["wrapping.metadataCallParameter.rules[5].additionalIndent"] = value484;
		}
		var value485 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.objectLiteral.defaultWrap"] != null) {
			_g.setReserved("wrapping.objectLiteral.defaultWrap",value485);
		} else {
			_g.h["wrapping.objectLiteral.defaultWrap"] = value485;
		}
		var value486 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.objectLiteral.defaultLocation"] != null) {
			_g.setReserved("wrapping.objectLiteral.defaultLocation",value486);
		} else {
			_g.h["wrapping.objectLiteral.defaultLocation"] = value486;
		}
		var value487 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.objectLiteral.defaultAdditionalIndent",value487);
		} else {
			_g.h["wrapping.objectLiteral.defaultAdditionalIndent"] = value487;
		}
		var value488 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[0].conditions[0].cond",value488);
		} else {
			_g.h["wrapping.objectLiteral.rules[0].conditions[0].cond"] = value488;
		}
		var value489 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[0].conditions[0].value",value489);
		} else {
			_g.h["wrapping.objectLiteral.rules[0].conditions[0].value"] = value489;
		}
		var value490 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[0].conditions[1].cond",value490);
		} else {
			_g.h["wrapping.objectLiteral.rules[0].conditions[1].cond"] = value490;
		}
		var value491 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[0].conditions[1].value",value491);
		} else {
			_g.h["wrapping.objectLiteral.rules[0].conditions[1].value"] = value491;
		}
		var value492 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[0].type"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[0].type",value492);
		} else {
			_g.h["wrapping.objectLiteral.rules[0].type"] = value492;
		}
		var value493 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[0].location"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[0].location",value493);
		} else {
			_g.h["wrapping.objectLiteral.rules[0].location"] = value493;
		}
		var value494 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[0].additionalIndent",value494);
		} else {
			_g.h["wrapping.objectLiteral.rules[0].additionalIndent"] = value494;
		}
		var value495 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[1].conditions[0].cond",value495);
		} else {
			_g.h["wrapping.objectLiteral.rules[1].conditions[0].cond"] = value495;
		}
		var value496 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[1].conditions[0].value",value496);
		} else {
			_g.h["wrapping.objectLiteral.rules[1].conditions[0].value"] = value496;
		}
		var value497 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[1].conditions[1].cond",value497);
		} else {
			_g.h["wrapping.objectLiteral.rules[1].conditions[1].cond"] = value497;
		}
		var value498 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[1].conditions[1].value",value498);
		} else {
			_g.h["wrapping.objectLiteral.rules[1].conditions[1].value"] = value498;
		}
		var value499 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[1].type"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[1].type",value499);
		} else {
			_g.h["wrapping.objectLiteral.rules[1].type"] = value499;
		}
		var value500 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[1].location"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[1].location",value500);
		} else {
			_g.h["wrapping.objectLiteral.rules[1].location"] = value500;
		}
		var value501 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[1].additionalIndent",value501);
		} else {
			_g.h["wrapping.objectLiteral.rules[1].additionalIndent"] = value501;
		}
		var value502 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[2].conditions[0].cond",value502);
		} else {
			_g.h["wrapping.objectLiteral.rules[2].conditions[0].cond"] = value502;
		}
		var value503 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[2].conditions[0].value",value503);
		} else {
			_g.h["wrapping.objectLiteral.rules[2].conditions[0].value"] = value503;
		}
		var value504 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[2].conditions[1].cond",value504);
		} else {
			_g.h["wrapping.objectLiteral.rules[2].conditions[1].cond"] = value504;
		}
		var value505 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[2].conditions[1].value",value505);
		} else {
			_g.h["wrapping.objectLiteral.rules[2].conditions[1].value"] = value505;
		}
		var value506 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[2].type"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[2].type",value506);
		} else {
			_g.h["wrapping.objectLiteral.rules[2].type"] = value506;
		}
		var value507 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[2].location"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[2].location",value507);
		} else {
			_g.h["wrapping.objectLiteral.rules[2].location"] = value507;
		}
		var value508 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[2].additionalIndent",value508);
		} else {
			_g.h["wrapping.objectLiteral.rules[2].additionalIndent"] = value508;
		}
		var value509 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[3].conditions[0].cond",value509);
		} else {
			_g.h["wrapping.objectLiteral.rules[3].conditions[0].cond"] = value509;
		}
		var value510 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[3].conditions[0].value",value510);
		} else {
			_g.h["wrapping.objectLiteral.rules[3].conditions[0].value"] = value510;
		}
		var value511 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[3].conditions[1].cond",value511);
		} else {
			_g.h["wrapping.objectLiteral.rules[3].conditions[1].cond"] = value511;
		}
		var value512 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[3].conditions[1].value",value512);
		} else {
			_g.h["wrapping.objectLiteral.rules[3].conditions[1].value"] = value512;
		}
		var value513 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[3].type"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[3].type",value513);
		} else {
			_g.h["wrapping.objectLiteral.rules[3].type"] = value513;
		}
		var value514 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[3].location"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[3].location",value514);
		} else {
			_g.h["wrapping.objectLiteral.rules[3].location"] = value514;
		}
		var value515 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[3].additionalIndent",value515);
		} else {
			_g.h["wrapping.objectLiteral.rules[3].additionalIndent"] = value515;
		}
		var value516 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[4].conditions[0].cond",value516);
		} else {
			_g.h["wrapping.objectLiteral.rules[4].conditions[0].cond"] = value516;
		}
		var value517 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[4].conditions[0].value",value517);
		} else {
			_g.h["wrapping.objectLiteral.rules[4].conditions[0].value"] = value517;
		}
		var value518 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[4].conditions[1].cond",value518);
		} else {
			_g.h["wrapping.objectLiteral.rules[4].conditions[1].cond"] = value518;
		}
		var value519 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[4].conditions[1].value",value519);
		} else {
			_g.h["wrapping.objectLiteral.rules[4].conditions[1].value"] = value519;
		}
		var value520 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[4].type"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[4].type",value520);
		} else {
			_g.h["wrapping.objectLiteral.rules[4].type"] = value520;
		}
		var value521 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[4].location"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[4].location",value521);
		} else {
			_g.h["wrapping.objectLiteral.rules[4].location"] = value521;
		}
		var value522 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[4].additionalIndent",value522);
		} else {
			_g.h["wrapping.objectLiteral.rules[4].additionalIndent"] = value522;
		}
		var value523 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[5].conditions[0].cond",value523);
		} else {
			_g.h["wrapping.objectLiteral.rules[5].conditions[0].cond"] = value523;
		}
		var value524 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[5].conditions[0].value",value524);
		} else {
			_g.h["wrapping.objectLiteral.rules[5].conditions[0].value"] = value524;
		}
		var value525 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[5].conditions[1].cond",value525);
		} else {
			_g.h["wrapping.objectLiteral.rules[5].conditions[1].cond"] = value525;
		}
		var value526 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[5].conditions[1].value",value526);
		} else {
			_g.h["wrapping.objectLiteral.rules[5].conditions[1].value"] = value526;
		}
		var value527 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[5].type"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[5].type",value527);
		} else {
			_g.h["wrapping.objectLiteral.rules[5].type"] = value527;
		}
		var value528 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.objectLiteral.rules[5].location"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[5].location",value528);
		} else {
			_g.h["wrapping.objectLiteral.rules[5].location"] = value528;
		}
		var value529 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.objectLiteral.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.objectLiteral.rules[5].additionalIndent",value529);
		} else {
			_g.h["wrapping.objectLiteral.rules[5].additionalIndent"] = value529;
		}
		var value530 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonType.defaultWrap"] != null) {
			_g.setReserved("wrapping.anonType.defaultWrap",value530);
		} else {
			_g.h["wrapping.anonType.defaultWrap"] = value530;
		}
		var value531 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonType.defaultLocation"] != null) {
			_g.setReserved("wrapping.anonType.defaultLocation",value531);
		} else {
			_g.h["wrapping.anonType.defaultLocation"] = value531;
		}
		var value532 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.anonType.defaultAdditionalIndent",value532);
		} else {
			_g.h["wrapping.anonType.defaultAdditionalIndent"] = value532;
		}
		var value533 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[0].conditions[0].cond",value533);
		} else {
			_g.h["wrapping.anonType.rules[0].conditions[0].cond"] = value533;
		}
		var value534 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[0].conditions[0].value",value534);
		} else {
			_g.h["wrapping.anonType.rules[0].conditions[0].value"] = value534;
		}
		var value535 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[0].conditions[1].cond",value535);
		} else {
			_g.h["wrapping.anonType.rules[0].conditions[1].cond"] = value535;
		}
		var value536 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[0].conditions[1].value",value536);
		} else {
			_g.h["wrapping.anonType.rules[0].conditions[1].value"] = value536;
		}
		var value537 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonType.rules[0].type"] != null) {
			_g.setReserved("wrapping.anonType.rules[0].type",value537);
		} else {
			_g.h["wrapping.anonType.rules[0].type"] = value537;
		}
		var value538 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonType.rules[0].location"] != null) {
			_g.setReserved("wrapping.anonType.rules[0].location",value538);
		} else {
			_g.h["wrapping.anonType.rules[0].location"] = value538;
		}
		var value539 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonType.rules[0].additionalIndent",value539);
		} else {
			_g.h["wrapping.anonType.rules[0].additionalIndent"] = value539;
		}
		var value540 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[1].conditions[0].cond",value540);
		} else {
			_g.h["wrapping.anonType.rules[1].conditions[0].cond"] = value540;
		}
		var value541 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[1].conditions[0].value",value541);
		} else {
			_g.h["wrapping.anonType.rules[1].conditions[0].value"] = value541;
		}
		var value542 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[1].conditions[1].cond",value542);
		} else {
			_g.h["wrapping.anonType.rules[1].conditions[1].cond"] = value542;
		}
		var value543 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[1].conditions[1].value",value543);
		} else {
			_g.h["wrapping.anonType.rules[1].conditions[1].value"] = value543;
		}
		var value544 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonType.rules[1].type"] != null) {
			_g.setReserved("wrapping.anonType.rules[1].type",value544);
		} else {
			_g.h["wrapping.anonType.rules[1].type"] = value544;
		}
		var value545 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonType.rules[1].location"] != null) {
			_g.setReserved("wrapping.anonType.rules[1].location",value545);
		} else {
			_g.h["wrapping.anonType.rules[1].location"] = value545;
		}
		var value546 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonType.rules[1].additionalIndent",value546);
		} else {
			_g.h["wrapping.anonType.rules[1].additionalIndent"] = value546;
		}
		var value547 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[2].conditions[0].cond",value547);
		} else {
			_g.h["wrapping.anonType.rules[2].conditions[0].cond"] = value547;
		}
		var value548 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[2].conditions[0].value",value548);
		} else {
			_g.h["wrapping.anonType.rules[2].conditions[0].value"] = value548;
		}
		var value549 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[2].conditions[1].cond",value549);
		} else {
			_g.h["wrapping.anonType.rules[2].conditions[1].cond"] = value549;
		}
		var value550 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[2].conditions[1].value",value550);
		} else {
			_g.h["wrapping.anonType.rules[2].conditions[1].value"] = value550;
		}
		var value551 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonType.rules[2].type"] != null) {
			_g.setReserved("wrapping.anonType.rules[2].type",value551);
		} else {
			_g.h["wrapping.anonType.rules[2].type"] = value551;
		}
		var value552 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonType.rules[2].location"] != null) {
			_g.setReserved("wrapping.anonType.rules[2].location",value552);
		} else {
			_g.h["wrapping.anonType.rules[2].location"] = value552;
		}
		var value553 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonType.rules[2].additionalIndent",value553);
		} else {
			_g.h["wrapping.anonType.rules[2].additionalIndent"] = value553;
		}
		var value554 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[3].conditions[0].cond",value554);
		} else {
			_g.h["wrapping.anonType.rules[3].conditions[0].cond"] = value554;
		}
		var value555 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[3].conditions[0].value",value555);
		} else {
			_g.h["wrapping.anonType.rules[3].conditions[0].value"] = value555;
		}
		var value556 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[3].conditions[1].cond",value556);
		} else {
			_g.h["wrapping.anonType.rules[3].conditions[1].cond"] = value556;
		}
		var value557 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[3].conditions[1].value",value557);
		} else {
			_g.h["wrapping.anonType.rules[3].conditions[1].value"] = value557;
		}
		var value558 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonType.rules[3].type"] != null) {
			_g.setReserved("wrapping.anonType.rules[3].type",value558);
		} else {
			_g.h["wrapping.anonType.rules[3].type"] = value558;
		}
		var value559 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonType.rules[3].location"] != null) {
			_g.setReserved("wrapping.anonType.rules[3].location",value559);
		} else {
			_g.h["wrapping.anonType.rules[3].location"] = value559;
		}
		var value560 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonType.rules[3].additionalIndent",value560);
		} else {
			_g.h["wrapping.anonType.rules[3].additionalIndent"] = value560;
		}
		var value561 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[4].conditions[0].cond",value561);
		} else {
			_g.h["wrapping.anonType.rules[4].conditions[0].cond"] = value561;
		}
		var value562 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[4].conditions[0].value",value562);
		} else {
			_g.h["wrapping.anonType.rules[4].conditions[0].value"] = value562;
		}
		var value563 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[4].conditions[1].cond",value563);
		} else {
			_g.h["wrapping.anonType.rules[4].conditions[1].cond"] = value563;
		}
		var value564 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[4].conditions[1].value",value564);
		} else {
			_g.h["wrapping.anonType.rules[4].conditions[1].value"] = value564;
		}
		var value565 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonType.rules[4].type"] != null) {
			_g.setReserved("wrapping.anonType.rules[4].type",value565);
		} else {
			_g.h["wrapping.anonType.rules[4].type"] = value565;
		}
		var value566 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonType.rules[4].location"] != null) {
			_g.setReserved("wrapping.anonType.rules[4].location",value566);
		} else {
			_g.h["wrapping.anonType.rules[4].location"] = value566;
		}
		var value567 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonType.rules[4].additionalIndent",value567);
		} else {
			_g.h["wrapping.anonType.rules[4].additionalIndent"] = value567;
		}
		var value568 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[5].conditions[0].cond",value568);
		} else {
			_g.h["wrapping.anonType.rules[5].conditions[0].cond"] = value568;
		}
		var value569 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[5].conditions[0].value",value569);
		} else {
			_g.h["wrapping.anonType.rules[5].conditions[0].value"] = value569;
		}
		var value570 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.anonType.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.anonType.rules[5].conditions[1].cond",value570);
		} else {
			_g.h["wrapping.anonType.rules[5].conditions[1].cond"] = value570;
		}
		var value571 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.anonType.rules[5].conditions[1].value",value571);
		} else {
			_g.h["wrapping.anonType.rules[5].conditions[1].value"] = value571;
		}
		var value572 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.anonType.rules[5].type"] != null) {
			_g.setReserved("wrapping.anonType.rules[5].type",value572);
		} else {
			_g.h["wrapping.anonType.rules[5].type"] = value572;
		}
		var value573 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.anonType.rules[5].location"] != null) {
			_g.setReserved("wrapping.anonType.rules[5].location",value573);
		} else {
			_g.h["wrapping.anonType.rules[5].location"] = value573;
		}
		var value574 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.anonType.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.anonType.rules[5].additionalIndent",value574);
		} else {
			_g.h["wrapping.anonType.rules[5].additionalIndent"] = value574;
		}
		var value575 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.methodChain.defaultWrap"] != null) {
			_g.setReserved("wrapping.methodChain.defaultWrap",value575);
		} else {
			_g.h["wrapping.methodChain.defaultWrap"] = value575;
		}
		var value576 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.methodChain.defaultLocation"] != null) {
			_g.setReserved("wrapping.methodChain.defaultLocation",value576);
		} else {
			_g.h["wrapping.methodChain.defaultLocation"] = value576;
		}
		var value577 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.methodChain.defaultAdditionalIndent",value577);
		} else {
			_g.h["wrapping.methodChain.defaultAdditionalIndent"] = value577;
		}
		var value578 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[0].conditions[0].cond",value578);
		} else {
			_g.h["wrapping.methodChain.rules[0].conditions[0].cond"] = value578;
		}
		var value579 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[0].conditions[0].value",value579);
		} else {
			_g.h["wrapping.methodChain.rules[0].conditions[0].value"] = value579;
		}
		var value580 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[0].conditions[1].cond",value580);
		} else {
			_g.h["wrapping.methodChain.rules[0].conditions[1].cond"] = value580;
		}
		var value581 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[0].conditions[1].value",value581);
		} else {
			_g.h["wrapping.methodChain.rules[0].conditions[1].value"] = value581;
		}
		var value582 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[0].type"] != null) {
			_g.setReserved("wrapping.methodChain.rules[0].type",value582);
		} else {
			_g.h["wrapping.methodChain.rules[0].type"] = value582;
		}
		var value583 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[0].location"] != null) {
			_g.setReserved("wrapping.methodChain.rules[0].location",value583);
		} else {
			_g.h["wrapping.methodChain.rules[0].location"] = value583;
		}
		var value584 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.methodChain.rules[0].additionalIndent",value584);
		} else {
			_g.h["wrapping.methodChain.rules[0].additionalIndent"] = value584;
		}
		var value585 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[1].conditions[0].cond",value585);
		} else {
			_g.h["wrapping.methodChain.rules[1].conditions[0].cond"] = value585;
		}
		var value586 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[1].conditions[0].value",value586);
		} else {
			_g.h["wrapping.methodChain.rules[1].conditions[0].value"] = value586;
		}
		var value587 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[1].conditions[1].cond",value587);
		} else {
			_g.h["wrapping.methodChain.rules[1].conditions[1].cond"] = value587;
		}
		var value588 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[1].conditions[1].value",value588);
		} else {
			_g.h["wrapping.methodChain.rules[1].conditions[1].value"] = value588;
		}
		var value589 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[1].type"] != null) {
			_g.setReserved("wrapping.methodChain.rules[1].type",value589);
		} else {
			_g.h["wrapping.methodChain.rules[1].type"] = value589;
		}
		var value590 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[1].location"] != null) {
			_g.setReserved("wrapping.methodChain.rules[1].location",value590);
		} else {
			_g.h["wrapping.methodChain.rules[1].location"] = value590;
		}
		var value591 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.methodChain.rules[1].additionalIndent",value591);
		} else {
			_g.h["wrapping.methodChain.rules[1].additionalIndent"] = value591;
		}
		var value592 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[2].conditions[0].cond",value592);
		} else {
			_g.h["wrapping.methodChain.rules[2].conditions[0].cond"] = value592;
		}
		var value593 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[2].conditions[0].value",value593);
		} else {
			_g.h["wrapping.methodChain.rules[2].conditions[0].value"] = value593;
		}
		var value594 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[2].conditions[1].cond",value594);
		} else {
			_g.h["wrapping.methodChain.rules[2].conditions[1].cond"] = value594;
		}
		var value595 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[2].conditions[1].value",value595);
		} else {
			_g.h["wrapping.methodChain.rules[2].conditions[1].value"] = value595;
		}
		var value596 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[2].type"] != null) {
			_g.setReserved("wrapping.methodChain.rules[2].type",value596);
		} else {
			_g.h["wrapping.methodChain.rules[2].type"] = value596;
		}
		var value597 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[2].location"] != null) {
			_g.setReserved("wrapping.methodChain.rules[2].location",value597);
		} else {
			_g.h["wrapping.methodChain.rules[2].location"] = value597;
		}
		var value598 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.methodChain.rules[2].additionalIndent",value598);
		} else {
			_g.h["wrapping.methodChain.rules[2].additionalIndent"] = value598;
		}
		var value599 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[3].conditions[0].cond",value599);
		} else {
			_g.h["wrapping.methodChain.rules[3].conditions[0].cond"] = value599;
		}
		var value600 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[3].conditions[0].value",value600);
		} else {
			_g.h["wrapping.methodChain.rules[3].conditions[0].value"] = value600;
		}
		var value601 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[3].conditions[1].cond",value601);
		} else {
			_g.h["wrapping.methodChain.rules[3].conditions[1].cond"] = value601;
		}
		var value602 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[3].conditions[1].value",value602);
		} else {
			_g.h["wrapping.methodChain.rules[3].conditions[1].value"] = value602;
		}
		var value603 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[3].type"] != null) {
			_g.setReserved("wrapping.methodChain.rules[3].type",value603);
		} else {
			_g.h["wrapping.methodChain.rules[3].type"] = value603;
		}
		var value604 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[3].location"] != null) {
			_g.setReserved("wrapping.methodChain.rules[3].location",value604);
		} else {
			_g.h["wrapping.methodChain.rules[3].location"] = value604;
		}
		var value605 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.methodChain.rules[3].additionalIndent",value605);
		} else {
			_g.h["wrapping.methodChain.rules[3].additionalIndent"] = value605;
		}
		var value606 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[4].conditions[0].cond",value606);
		} else {
			_g.h["wrapping.methodChain.rules[4].conditions[0].cond"] = value606;
		}
		var value607 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[4].conditions[0].value",value607);
		} else {
			_g.h["wrapping.methodChain.rules[4].conditions[0].value"] = value607;
		}
		var value608 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[4].conditions[1].cond",value608);
		} else {
			_g.h["wrapping.methodChain.rules[4].conditions[1].cond"] = value608;
		}
		var value609 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[4].conditions[1].value",value609);
		} else {
			_g.h["wrapping.methodChain.rules[4].conditions[1].value"] = value609;
		}
		var value610 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[4].type"] != null) {
			_g.setReserved("wrapping.methodChain.rules[4].type",value610);
		} else {
			_g.h["wrapping.methodChain.rules[4].type"] = value610;
		}
		var value611 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[4].location"] != null) {
			_g.setReserved("wrapping.methodChain.rules[4].location",value611);
		} else {
			_g.h["wrapping.methodChain.rules[4].location"] = value611;
		}
		var value612 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.methodChain.rules[4].additionalIndent",value612);
		} else {
			_g.h["wrapping.methodChain.rules[4].additionalIndent"] = value612;
		}
		var value613 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[5].conditions[0].cond",value613);
		} else {
			_g.h["wrapping.methodChain.rules[5].conditions[0].cond"] = value613;
		}
		var value614 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[5].conditions[0].value",value614);
		} else {
			_g.h["wrapping.methodChain.rules[5].conditions[0].value"] = value614;
		}
		var value615 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.methodChain.rules[5].conditions[1].cond",value615);
		} else {
			_g.h["wrapping.methodChain.rules[5].conditions[1].cond"] = value615;
		}
		var value616 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.methodChain.rules[5].conditions[1].value",value616);
		} else {
			_g.h["wrapping.methodChain.rules[5].conditions[1].value"] = value616;
		}
		var value617 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[5].type"] != null) {
			_g.setReserved("wrapping.methodChain.rules[5].type",value617);
		} else {
			_g.h["wrapping.methodChain.rules[5].type"] = value617;
		}
		var value618 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.methodChain.rules[5].location"] != null) {
			_g.setReserved("wrapping.methodChain.rules[5].location",value618);
		} else {
			_g.h["wrapping.methodChain.rules[5].location"] = value618;
		}
		var value619 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.methodChain.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.methodChain.rules[5].additionalIndent",value619);
		} else {
			_g.h["wrapping.methodChain.rules[5].additionalIndent"] = value619;
		}
		var value620 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opBoolChain.defaultWrap"] != null) {
			_g.setReserved("wrapping.opBoolChain.defaultWrap",value620);
		} else {
			_g.h["wrapping.opBoolChain.defaultWrap"] = value620;
		}
		var value621 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opBoolChain.defaultLocation"] != null) {
			_g.setReserved("wrapping.opBoolChain.defaultLocation",value621);
		} else {
			_g.h["wrapping.opBoolChain.defaultLocation"] = value621;
		}
		var value622 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.opBoolChain.defaultAdditionalIndent",value622);
		} else {
			_g.h["wrapping.opBoolChain.defaultAdditionalIndent"] = value622;
		}
		var value623 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[0].conditions[0].cond",value623);
		} else {
			_g.h["wrapping.opBoolChain.rules[0].conditions[0].cond"] = value623;
		}
		var value624 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[0].conditions[0].value",value624);
		} else {
			_g.h["wrapping.opBoolChain.rules[0].conditions[0].value"] = value624;
		}
		var value625 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[0].conditions[1].cond",value625);
		} else {
			_g.h["wrapping.opBoolChain.rules[0].conditions[1].cond"] = value625;
		}
		var value626 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[0].conditions[1].value",value626);
		} else {
			_g.h["wrapping.opBoolChain.rules[0].conditions[1].value"] = value626;
		}
		var value627 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[0].type"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[0].type",value627);
		} else {
			_g.h["wrapping.opBoolChain.rules[0].type"] = value627;
		}
		var value628 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[0].location"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[0].location",value628);
		} else {
			_g.h["wrapping.opBoolChain.rules[0].location"] = value628;
		}
		var value629 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[0].additionalIndent",value629);
		} else {
			_g.h["wrapping.opBoolChain.rules[0].additionalIndent"] = value629;
		}
		var value630 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[1].conditions[0].cond",value630);
		} else {
			_g.h["wrapping.opBoolChain.rules[1].conditions[0].cond"] = value630;
		}
		var value631 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[1].conditions[0].value",value631);
		} else {
			_g.h["wrapping.opBoolChain.rules[1].conditions[0].value"] = value631;
		}
		var value632 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[1].conditions[1].cond",value632);
		} else {
			_g.h["wrapping.opBoolChain.rules[1].conditions[1].cond"] = value632;
		}
		var value633 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[1].conditions[1].value",value633);
		} else {
			_g.h["wrapping.opBoolChain.rules[1].conditions[1].value"] = value633;
		}
		var value634 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[1].type"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[1].type",value634);
		} else {
			_g.h["wrapping.opBoolChain.rules[1].type"] = value634;
		}
		var value635 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[1].location"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[1].location",value635);
		} else {
			_g.h["wrapping.opBoolChain.rules[1].location"] = value635;
		}
		var value636 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[1].additionalIndent",value636);
		} else {
			_g.h["wrapping.opBoolChain.rules[1].additionalIndent"] = value636;
		}
		var value637 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[2].conditions[0].cond",value637);
		} else {
			_g.h["wrapping.opBoolChain.rules[2].conditions[0].cond"] = value637;
		}
		var value638 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[2].conditions[0].value",value638);
		} else {
			_g.h["wrapping.opBoolChain.rules[2].conditions[0].value"] = value638;
		}
		var value639 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[2].conditions[1].cond",value639);
		} else {
			_g.h["wrapping.opBoolChain.rules[2].conditions[1].cond"] = value639;
		}
		var value640 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[2].conditions[1].value",value640);
		} else {
			_g.h["wrapping.opBoolChain.rules[2].conditions[1].value"] = value640;
		}
		var value641 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[2].type"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[2].type",value641);
		} else {
			_g.h["wrapping.opBoolChain.rules[2].type"] = value641;
		}
		var value642 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[2].location"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[2].location",value642);
		} else {
			_g.h["wrapping.opBoolChain.rules[2].location"] = value642;
		}
		var value643 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[2].additionalIndent",value643);
		} else {
			_g.h["wrapping.opBoolChain.rules[2].additionalIndent"] = value643;
		}
		var value644 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[3].conditions[0].cond",value644);
		} else {
			_g.h["wrapping.opBoolChain.rules[3].conditions[0].cond"] = value644;
		}
		var value645 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[3].conditions[0].value",value645);
		} else {
			_g.h["wrapping.opBoolChain.rules[3].conditions[0].value"] = value645;
		}
		var value646 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[3].conditions[1].cond",value646);
		} else {
			_g.h["wrapping.opBoolChain.rules[3].conditions[1].cond"] = value646;
		}
		var value647 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[3].conditions[1].value",value647);
		} else {
			_g.h["wrapping.opBoolChain.rules[3].conditions[1].value"] = value647;
		}
		var value648 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[3].type"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[3].type",value648);
		} else {
			_g.h["wrapping.opBoolChain.rules[3].type"] = value648;
		}
		var value649 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[3].location"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[3].location",value649);
		} else {
			_g.h["wrapping.opBoolChain.rules[3].location"] = value649;
		}
		var value650 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[3].additionalIndent",value650);
		} else {
			_g.h["wrapping.opBoolChain.rules[3].additionalIndent"] = value650;
		}
		var value651 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[4].conditions[0].cond",value651);
		} else {
			_g.h["wrapping.opBoolChain.rules[4].conditions[0].cond"] = value651;
		}
		var value652 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[4].conditions[0].value",value652);
		} else {
			_g.h["wrapping.opBoolChain.rules[4].conditions[0].value"] = value652;
		}
		var value653 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[4].conditions[1].cond",value653);
		} else {
			_g.h["wrapping.opBoolChain.rules[4].conditions[1].cond"] = value653;
		}
		var value654 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[4].conditions[1].value",value654);
		} else {
			_g.h["wrapping.opBoolChain.rules[4].conditions[1].value"] = value654;
		}
		var value655 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[4].type"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[4].type",value655);
		} else {
			_g.h["wrapping.opBoolChain.rules[4].type"] = value655;
		}
		var value656 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[4].location"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[4].location",value656);
		} else {
			_g.h["wrapping.opBoolChain.rules[4].location"] = value656;
		}
		var value657 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[4].additionalIndent",value657);
		} else {
			_g.h["wrapping.opBoolChain.rules[4].additionalIndent"] = value657;
		}
		var value658 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[5].conditions[0].cond",value658);
		} else {
			_g.h["wrapping.opBoolChain.rules[5].conditions[0].cond"] = value658;
		}
		var value659 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[5].conditions[0].value",value659);
		} else {
			_g.h["wrapping.opBoolChain.rules[5].conditions[0].value"] = value659;
		}
		var value660 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[5].conditions[1].cond",value660);
		} else {
			_g.h["wrapping.opBoolChain.rules[5].conditions[1].cond"] = value660;
		}
		var value661 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[5].conditions[1].value",value661);
		} else {
			_g.h["wrapping.opBoolChain.rules[5].conditions[1].value"] = value661;
		}
		var value662 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[5].type"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[5].type",value662);
		} else {
			_g.h["wrapping.opBoolChain.rules[5].type"] = value662;
		}
		var value663 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opBoolChain.rules[5].location"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[5].location",value663);
		} else {
			_g.h["wrapping.opBoolChain.rules[5].location"] = value663;
		}
		var value664 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opBoolChain.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.opBoolChain.rules[5].additionalIndent",value664);
		} else {
			_g.h["wrapping.opBoolChain.rules[5].additionalIndent"] = value664;
		}
		var value665 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.implementsExtends.defaultWrap"] != null) {
			_g.setReserved("wrapping.implementsExtends.defaultWrap",value665);
		} else {
			_g.h["wrapping.implementsExtends.defaultWrap"] = value665;
		}
		var value666 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.implementsExtends.defaultLocation"] != null) {
			_g.setReserved("wrapping.implementsExtends.defaultLocation",value666);
		} else {
			_g.h["wrapping.implementsExtends.defaultLocation"] = value666;
		}
		var value667 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.implementsExtends.defaultAdditionalIndent",value667);
		} else {
			_g.h["wrapping.implementsExtends.defaultAdditionalIndent"] = value667;
		}
		var value668 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[0].conditions[0].cond",value668);
		} else {
			_g.h["wrapping.implementsExtends.rules[0].conditions[0].cond"] = value668;
		}
		var value669 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[0].conditions[0].value",value669);
		} else {
			_g.h["wrapping.implementsExtends.rules[0].conditions[0].value"] = value669;
		}
		var value670 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[0].conditions[1].cond",value670);
		} else {
			_g.h["wrapping.implementsExtends.rules[0].conditions[1].cond"] = value670;
		}
		var value671 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[0].conditions[1].value",value671);
		} else {
			_g.h["wrapping.implementsExtends.rules[0].conditions[1].value"] = value671;
		}
		var value672 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[0].type"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[0].type",value672);
		} else {
			_g.h["wrapping.implementsExtends.rules[0].type"] = value672;
		}
		var value673 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[0].location"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[0].location",value673);
		} else {
			_g.h["wrapping.implementsExtends.rules[0].location"] = value673;
		}
		var value674 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[0].additionalIndent",value674);
		} else {
			_g.h["wrapping.implementsExtends.rules[0].additionalIndent"] = value674;
		}
		var value675 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[1].conditions[0].cond",value675);
		} else {
			_g.h["wrapping.implementsExtends.rules[1].conditions[0].cond"] = value675;
		}
		var value676 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[1].conditions[0].value",value676);
		} else {
			_g.h["wrapping.implementsExtends.rules[1].conditions[0].value"] = value676;
		}
		var value677 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[1].conditions[1].cond",value677);
		} else {
			_g.h["wrapping.implementsExtends.rules[1].conditions[1].cond"] = value677;
		}
		var value678 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[1].conditions[1].value",value678);
		} else {
			_g.h["wrapping.implementsExtends.rules[1].conditions[1].value"] = value678;
		}
		var value679 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[1].type"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[1].type",value679);
		} else {
			_g.h["wrapping.implementsExtends.rules[1].type"] = value679;
		}
		var value680 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[1].location"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[1].location",value680);
		} else {
			_g.h["wrapping.implementsExtends.rules[1].location"] = value680;
		}
		var value681 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[1].additionalIndent",value681);
		} else {
			_g.h["wrapping.implementsExtends.rules[1].additionalIndent"] = value681;
		}
		var value682 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[2].conditions[0].cond",value682);
		} else {
			_g.h["wrapping.implementsExtends.rules[2].conditions[0].cond"] = value682;
		}
		var value683 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[2].conditions[0].value",value683);
		} else {
			_g.h["wrapping.implementsExtends.rules[2].conditions[0].value"] = value683;
		}
		var value684 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[2].conditions[1].cond",value684);
		} else {
			_g.h["wrapping.implementsExtends.rules[2].conditions[1].cond"] = value684;
		}
		var value685 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[2].conditions[1].value",value685);
		} else {
			_g.h["wrapping.implementsExtends.rules[2].conditions[1].value"] = value685;
		}
		var value686 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[2].type"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[2].type",value686);
		} else {
			_g.h["wrapping.implementsExtends.rules[2].type"] = value686;
		}
		var value687 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[2].location"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[2].location",value687);
		} else {
			_g.h["wrapping.implementsExtends.rules[2].location"] = value687;
		}
		var value688 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[2].additionalIndent",value688);
		} else {
			_g.h["wrapping.implementsExtends.rules[2].additionalIndent"] = value688;
		}
		var value689 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[3].conditions[0].cond",value689);
		} else {
			_g.h["wrapping.implementsExtends.rules[3].conditions[0].cond"] = value689;
		}
		var value690 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[3].conditions[0].value",value690);
		} else {
			_g.h["wrapping.implementsExtends.rules[3].conditions[0].value"] = value690;
		}
		var value691 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[3].conditions[1].cond",value691);
		} else {
			_g.h["wrapping.implementsExtends.rules[3].conditions[1].cond"] = value691;
		}
		var value692 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[3].conditions[1].value",value692);
		} else {
			_g.h["wrapping.implementsExtends.rules[3].conditions[1].value"] = value692;
		}
		var value693 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[3].type"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[3].type",value693);
		} else {
			_g.h["wrapping.implementsExtends.rules[3].type"] = value693;
		}
		var value694 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[3].location"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[3].location",value694);
		} else {
			_g.h["wrapping.implementsExtends.rules[3].location"] = value694;
		}
		var value695 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[3].additionalIndent",value695);
		} else {
			_g.h["wrapping.implementsExtends.rules[3].additionalIndent"] = value695;
		}
		var value696 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[4].conditions[0].cond",value696);
		} else {
			_g.h["wrapping.implementsExtends.rules[4].conditions[0].cond"] = value696;
		}
		var value697 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[4].conditions[0].value",value697);
		} else {
			_g.h["wrapping.implementsExtends.rules[4].conditions[0].value"] = value697;
		}
		var value698 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[4].conditions[1].cond",value698);
		} else {
			_g.h["wrapping.implementsExtends.rules[4].conditions[1].cond"] = value698;
		}
		var value699 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[4].conditions[1].value",value699);
		} else {
			_g.h["wrapping.implementsExtends.rules[4].conditions[1].value"] = value699;
		}
		var value700 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[4].type"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[4].type",value700);
		} else {
			_g.h["wrapping.implementsExtends.rules[4].type"] = value700;
		}
		var value701 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[4].location"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[4].location",value701);
		} else {
			_g.h["wrapping.implementsExtends.rules[4].location"] = value701;
		}
		var value702 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[4].additionalIndent",value702);
		} else {
			_g.h["wrapping.implementsExtends.rules[4].additionalIndent"] = value702;
		}
		var value703 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[5].conditions[0].cond",value703);
		} else {
			_g.h["wrapping.implementsExtends.rules[5].conditions[0].cond"] = value703;
		}
		var value704 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[5].conditions[0].value",value704);
		} else {
			_g.h["wrapping.implementsExtends.rules[5].conditions[0].value"] = value704;
		}
		var value705 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[5].conditions[1].cond",value705);
		} else {
			_g.h["wrapping.implementsExtends.rules[5].conditions[1].cond"] = value705;
		}
		var value706 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[5].conditions[1].value",value706);
		} else {
			_g.h["wrapping.implementsExtends.rules[5].conditions[1].value"] = value706;
		}
		var value707 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[5].type"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[5].type",value707);
		} else {
			_g.h["wrapping.implementsExtends.rules[5].type"] = value707;
		}
		var value708 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.implementsExtends.rules[5].location"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[5].location",value708);
		} else {
			_g.h["wrapping.implementsExtends.rules[5].location"] = value708;
		}
		var value709 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.implementsExtends.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.implementsExtends.rules[5].additionalIndent",value709);
		} else {
			_g.h["wrapping.implementsExtends.rules[5].additionalIndent"] = value709;
		}
		var value710 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.defaultWrap"] != null) {
			_g.setReserved("wrapping.opAddSubChain.defaultWrap",value710);
		} else {
			_g.h["wrapping.opAddSubChain.defaultWrap"] = value710;
		}
		var value711 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.defaultLocation"] != null) {
			_g.setReserved("wrapping.opAddSubChain.defaultLocation",value711);
		} else {
			_g.h["wrapping.opAddSubChain.defaultLocation"] = value711;
		}
		var value712 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.opAddSubChain.defaultAdditionalIndent",value712);
		} else {
			_g.h["wrapping.opAddSubChain.defaultAdditionalIndent"] = value712;
		}
		var value713 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[0].conditions[0].cond",value713);
		} else {
			_g.h["wrapping.opAddSubChain.rules[0].conditions[0].cond"] = value713;
		}
		var value714 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[0].conditions[0].value",value714);
		} else {
			_g.h["wrapping.opAddSubChain.rules[0].conditions[0].value"] = value714;
		}
		var value715 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[0].conditions[1].cond",value715);
		} else {
			_g.h["wrapping.opAddSubChain.rules[0].conditions[1].cond"] = value715;
		}
		var value716 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[0].conditions[1].value",value716);
		} else {
			_g.h["wrapping.opAddSubChain.rules[0].conditions[1].value"] = value716;
		}
		var value717 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[0].type"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[0].type",value717);
		} else {
			_g.h["wrapping.opAddSubChain.rules[0].type"] = value717;
		}
		var value718 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[0].location"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[0].location",value718);
		} else {
			_g.h["wrapping.opAddSubChain.rules[0].location"] = value718;
		}
		var value719 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[0].additionalIndent",value719);
		} else {
			_g.h["wrapping.opAddSubChain.rules[0].additionalIndent"] = value719;
		}
		var value720 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[1].conditions[0].cond",value720);
		} else {
			_g.h["wrapping.opAddSubChain.rules[1].conditions[0].cond"] = value720;
		}
		var value721 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[1].conditions[0].value",value721);
		} else {
			_g.h["wrapping.opAddSubChain.rules[1].conditions[0].value"] = value721;
		}
		var value722 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[1].conditions[1].cond",value722);
		} else {
			_g.h["wrapping.opAddSubChain.rules[1].conditions[1].cond"] = value722;
		}
		var value723 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[1].conditions[1].value",value723);
		} else {
			_g.h["wrapping.opAddSubChain.rules[1].conditions[1].value"] = value723;
		}
		var value724 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[1].type"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[1].type",value724);
		} else {
			_g.h["wrapping.opAddSubChain.rules[1].type"] = value724;
		}
		var value725 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[1].location"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[1].location",value725);
		} else {
			_g.h["wrapping.opAddSubChain.rules[1].location"] = value725;
		}
		var value726 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[1].additionalIndent",value726);
		} else {
			_g.h["wrapping.opAddSubChain.rules[1].additionalIndent"] = value726;
		}
		var value727 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[2].conditions[0].cond",value727);
		} else {
			_g.h["wrapping.opAddSubChain.rules[2].conditions[0].cond"] = value727;
		}
		var value728 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[2].conditions[0].value",value728);
		} else {
			_g.h["wrapping.opAddSubChain.rules[2].conditions[0].value"] = value728;
		}
		var value729 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[2].conditions[1].cond",value729);
		} else {
			_g.h["wrapping.opAddSubChain.rules[2].conditions[1].cond"] = value729;
		}
		var value730 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[2].conditions[1].value",value730);
		} else {
			_g.h["wrapping.opAddSubChain.rules[2].conditions[1].value"] = value730;
		}
		var value731 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[2].type"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[2].type",value731);
		} else {
			_g.h["wrapping.opAddSubChain.rules[2].type"] = value731;
		}
		var value732 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[2].location"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[2].location",value732);
		} else {
			_g.h["wrapping.opAddSubChain.rules[2].location"] = value732;
		}
		var value733 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[2].additionalIndent",value733);
		} else {
			_g.h["wrapping.opAddSubChain.rules[2].additionalIndent"] = value733;
		}
		var value734 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[3].conditions[0].cond",value734);
		} else {
			_g.h["wrapping.opAddSubChain.rules[3].conditions[0].cond"] = value734;
		}
		var value735 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[3].conditions[0].value",value735);
		} else {
			_g.h["wrapping.opAddSubChain.rules[3].conditions[0].value"] = value735;
		}
		var value736 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[3].conditions[1].cond",value736);
		} else {
			_g.h["wrapping.opAddSubChain.rules[3].conditions[1].cond"] = value736;
		}
		var value737 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[3].conditions[1].value",value737);
		} else {
			_g.h["wrapping.opAddSubChain.rules[3].conditions[1].value"] = value737;
		}
		var value738 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[3].type"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[3].type",value738);
		} else {
			_g.h["wrapping.opAddSubChain.rules[3].type"] = value738;
		}
		var value739 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[3].location"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[3].location",value739);
		} else {
			_g.h["wrapping.opAddSubChain.rules[3].location"] = value739;
		}
		var value740 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[3].additionalIndent",value740);
		} else {
			_g.h["wrapping.opAddSubChain.rules[3].additionalIndent"] = value740;
		}
		var value741 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[4].conditions[0].cond",value741);
		} else {
			_g.h["wrapping.opAddSubChain.rules[4].conditions[0].cond"] = value741;
		}
		var value742 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[4].conditions[0].value",value742);
		} else {
			_g.h["wrapping.opAddSubChain.rules[4].conditions[0].value"] = value742;
		}
		var value743 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[4].conditions[1].cond",value743);
		} else {
			_g.h["wrapping.opAddSubChain.rules[4].conditions[1].cond"] = value743;
		}
		var value744 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[4].conditions[1].value",value744);
		} else {
			_g.h["wrapping.opAddSubChain.rules[4].conditions[1].value"] = value744;
		}
		var value745 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[4].type"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[4].type",value745);
		} else {
			_g.h["wrapping.opAddSubChain.rules[4].type"] = value745;
		}
		var value746 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[4].location"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[4].location",value746);
		} else {
			_g.h["wrapping.opAddSubChain.rules[4].location"] = value746;
		}
		var value747 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[4].additionalIndent",value747);
		} else {
			_g.h["wrapping.opAddSubChain.rules[4].additionalIndent"] = value747;
		}
		var value748 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[5].conditions[0].cond",value748);
		} else {
			_g.h["wrapping.opAddSubChain.rules[5].conditions[0].cond"] = value748;
		}
		var value749 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[5].conditions[0].value",value749);
		} else {
			_g.h["wrapping.opAddSubChain.rules[5].conditions[0].value"] = value749;
		}
		var value750 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[5].conditions[1].cond",value750);
		} else {
			_g.h["wrapping.opAddSubChain.rules[5].conditions[1].cond"] = value750;
		}
		var value751 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[5].conditions[1].value",value751);
		} else {
			_g.h["wrapping.opAddSubChain.rules[5].conditions[1].value"] = value751;
		}
		var value752 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[5].type"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[5].type",value752);
		} else {
			_g.h["wrapping.opAddSubChain.rules[5].type"] = value752;
		}
		var value753 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.opAddSubChain.rules[5].location"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[5].location",value753);
		} else {
			_g.h["wrapping.opAddSubChain.rules[5].location"] = value753;
		}
		var value754 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.opAddSubChain.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.opAddSubChain.rules[5].additionalIndent",value754);
		} else {
			_g.h["wrapping.opAddSubChain.rules[5].additionalIndent"] = value754;
		}
		var value755 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.multiVar.defaultWrap"] != null) {
			_g.setReserved("wrapping.multiVar.defaultWrap",value755);
		} else {
			_g.h["wrapping.multiVar.defaultWrap"] = value755;
		}
		var value756 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.multiVar.defaultLocation"] != null) {
			_g.setReserved("wrapping.multiVar.defaultLocation",value756);
		} else {
			_g.h["wrapping.multiVar.defaultLocation"] = value756;
		}
		var value757 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.multiVar.defaultAdditionalIndent",value757);
		} else {
			_g.h["wrapping.multiVar.defaultAdditionalIndent"] = value757;
		}
		var value758 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[0].conditions[0].cond",value758);
		} else {
			_g.h["wrapping.multiVar.rules[0].conditions[0].cond"] = value758;
		}
		var value759 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[0].conditions[0].value",value759);
		} else {
			_g.h["wrapping.multiVar.rules[0].conditions[0].value"] = value759;
		}
		var value760 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[0].conditions[1].cond",value760);
		} else {
			_g.h["wrapping.multiVar.rules[0].conditions[1].cond"] = value760;
		}
		var value761 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[0].conditions[1].value",value761);
		} else {
			_g.h["wrapping.multiVar.rules[0].conditions[1].value"] = value761;
		}
		var value762 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[0].type"] != null) {
			_g.setReserved("wrapping.multiVar.rules[0].type",value762);
		} else {
			_g.h["wrapping.multiVar.rules[0].type"] = value762;
		}
		var value763 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[0].location"] != null) {
			_g.setReserved("wrapping.multiVar.rules[0].location",value763);
		} else {
			_g.h["wrapping.multiVar.rules[0].location"] = value763;
		}
		var value764 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.multiVar.rules[0].additionalIndent",value764);
		} else {
			_g.h["wrapping.multiVar.rules[0].additionalIndent"] = value764;
		}
		var value765 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[1].conditions[0].cond",value765);
		} else {
			_g.h["wrapping.multiVar.rules[1].conditions[0].cond"] = value765;
		}
		var value766 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[1].conditions[0].value",value766);
		} else {
			_g.h["wrapping.multiVar.rules[1].conditions[0].value"] = value766;
		}
		var value767 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[1].conditions[1].cond",value767);
		} else {
			_g.h["wrapping.multiVar.rules[1].conditions[1].cond"] = value767;
		}
		var value768 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[1].conditions[1].value",value768);
		} else {
			_g.h["wrapping.multiVar.rules[1].conditions[1].value"] = value768;
		}
		var value769 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[1].type"] != null) {
			_g.setReserved("wrapping.multiVar.rules[1].type",value769);
		} else {
			_g.h["wrapping.multiVar.rules[1].type"] = value769;
		}
		var value770 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[1].location"] != null) {
			_g.setReserved("wrapping.multiVar.rules[1].location",value770);
		} else {
			_g.h["wrapping.multiVar.rules[1].location"] = value770;
		}
		var value771 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.multiVar.rules[1].additionalIndent",value771);
		} else {
			_g.h["wrapping.multiVar.rules[1].additionalIndent"] = value771;
		}
		var value772 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[2].conditions[0].cond",value772);
		} else {
			_g.h["wrapping.multiVar.rules[2].conditions[0].cond"] = value772;
		}
		var value773 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[2].conditions[0].value",value773);
		} else {
			_g.h["wrapping.multiVar.rules[2].conditions[0].value"] = value773;
		}
		var value774 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[2].conditions[1].cond",value774);
		} else {
			_g.h["wrapping.multiVar.rules[2].conditions[1].cond"] = value774;
		}
		var value775 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[2].conditions[1].value",value775);
		} else {
			_g.h["wrapping.multiVar.rules[2].conditions[1].value"] = value775;
		}
		var value776 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[2].type"] != null) {
			_g.setReserved("wrapping.multiVar.rules[2].type",value776);
		} else {
			_g.h["wrapping.multiVar.rules[2].type"] = value776;
		}
		var value777 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[2].location"] != null) {
			_g.setReserved("wrapping.multiVar.rules[2].location",value777);
		} else {
			_g.h["wrapping.multiVar.rules[2].location"] = value777;
		}
		var value778 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.multiVar.rules[2].additionalIndent",value778);
		} else {
			_g.h["wrapping.multiVar.rules[2].additionalIndent"] = value778;
		}
		var value779 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[3].conditions[0].cond",value779);
		} else {
			_g.h["wrapping.multiVar.rules[3].conditions[0].cond"] = value779;
		}
		var value780 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[3].conditions[0].value",value780);
		} else {
			_g.h["wrapping.multiVar.rules[3].conditions[0].value"] = value780;
		}
		var value781 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[3].conditions[1].cond",value781);
		} else {
			_g.h["wrapping.multiVar.rules[3].conditions[1].cond"] = value781;
		}
		var value782 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[3].conditions[1].value",value782);
		} else {
			_g.h["wrapping.multiVar.rules[3].conditions[1].value"] = value782;
		}
		var value783 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[3].type"] != null) {
			_g.setReserved("wrapping.multiVar.rules[3].type",value783);
		} else {
			_g.h["wrapping.multiVar.rules[3].type"] = value783;
		}
		var value784 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[3].location"] != null) {
			_g.setReserved("wrapping.multiVar.rules[3].location",value784);
		} else {
			_g.h["wrapping.multiVar.rules[3].location"] = value784;
		}
		var value785 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.multiVar.rules[3].additionalIndent",value785);
		} else {
			_g.h["wrapping.multiVar.rules[3].additionalIndent"] = value785;
		}
		var value786 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[4].conditions[0].cond",value786);
		} else {
			_g.h["wrapping.multiVar.rules[4].conditions[0].cond"] = value786;
		}
		var value787 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[4].conditions[0].value",value787);
		} else {
			_g.h["wrapping.multiVar.rules[4].conditions[0].value"] = value787;
		}
		var value788 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[4].conditions[1].cond",value788);
		} else {
			_g.h["wrapping.multiVar.rules[4].conditions[1].cond"] = value788;
		}
		var value789 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[4].conditions[1].value",value789);
		} else {
			_g.h["wrapping.multiVar.rules[4].conditions[1].value"] = value789;
		}
		var value790 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[4].type"] != null) {
			_g.setReserved("wrapping.multiVar.rules[4].type",value790);
		} else {
			_g.h["wrapping.multiVar.rules[4].type"] = value790;
		}
		var value791 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[4].location"] != null) {
			_g.setReserved("wrapping.multiVar.rules[4].location",value791);
		} else {
			_g.h["wrapping.multiVar.rules[4].location"] = value791;
		}
		var value792 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.multiVar.rules[4].additionalIndent",value792);
		} else {
			_g.h["wrapping.multiVar.rules[4].additionalIndent"] = value792;
		}
		var value793 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[5].conditions[0].cond",value793);
		} else {
			_g.h["wrapping.multiVar.rules[5].conditions[0].cond"] = value793;
		}
		var value794 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[5].conditions[0].value",value794);
		} else {
			_g.h["wrapping.multiVar.rules[5].conditions[0].value"] = value794;
		}
		var value795 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.multiVar.rules[5].conditions[1].cond",value795);
		} else {
			_g.h["wrapping.multiVar.rules[5].conditions[1].cond"] = value795;
		}
		var value796 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.multiVar.rules[5].conditions[1].value",value796);
		} else {
			_g.h["wrapping.multiVar.rules[5].conditions[1].value"] = value796;
		}
		var value797 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[5].type"] != null) {
			_g.setReserved("wrapping.multiVar.rules[5].type",value797);
		} else {
			_g.h["wrapping.multiVar.rules[5].type"] = value797;
		}
		var value798 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.multiVar.rules[5].location"] != null) {
			_g.setReserved("wrapping.multiVar.rules[5].location",value798);
		} else {
			_g.h["wrapping.multiVar.rules[5].location"] = value798;
		}
		var value799 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.multiVar.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.multiVar.rules[5].additionalIndent",value799);
		} else {
			_g.h["wrapping.multiVar.rules[5].additionalIndent"] = value799;
		}
		var value800 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.casePattern.defaultWrap"] != null) {
			_g.setReserved("wrapping.casePattern.defaultWrap",value800);
		} else {
			_g.h["wrapping.casePattern.defaultWrap"] = value800;
		}
		var value801 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.casePattern.defaultLocation"] != null) {
			_g.setReserved("wrapping.casePattern.defaultLocation",value801);
		} else {
			_g.h["wrapping.casePattern.defaultLocation"] = value801;
		}
		var value802 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.defaultAdditionalIndent"] != null) {
			_g.setReserved("wrapping.casePattern.defaultAdditionalIndent",value802);
		} else {
			_g.h["wrapping.casePattern.defaultAdditionalIndent"] = value802;
		}
		var value803 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[0].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[0].conditions[0].cond",value803);
		} else {
			_g.h["wrapping.casePattern.rules[0].conditions[0].cond"] = value803;
		}
		var value804 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[0].conditions[0].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[0].conditions[0].value",value804);
		} else {
			_g.h["wrapping.casePattern.rules[0].conditions[0].value"] = value804;
		}
		var value805 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[0].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[0].conditions[1].cond",value805);
		} else {
			_g.h["wrapping.casePattern.rules[0].conditions[1].cond"] = value805;
		}
		var value806 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[0].conditions[1].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[0].conditions[1].value",value806);
		} else {
			_g.h["wrapping.casePattern.rules[0].conditions[1].value"] = value806;
		}
		var value807 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[0].type"] != null) {
			_g.setReserved("wrapping.casePattern.rules[0].type",value807);
		} else {
			_g.h["wrapping.casePattern.rules[0].type"] = value807;
		}
		var value808 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[0].location"] != null) {
			_g.setReserved("wrapping.casePattern.rules[0].location",value808);
		} else {
			_g.h["wrapping.casePattern.rules[0].location"] = value808;
		}
		var value809 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[0].additionalIndent"] != null) {
			_g.setReserved("wrapping.casePattern.rules[0].additionalIndent",value809);
		} else {
			_g.h["wrapping.casePattern.rules[0].additionalIndent"] = value809;
		}
		var value810 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[1].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[1].conditions[0].cond",value810);
		} else {
			_g.h["wrapping.casePattern.rules[1].conditions[0].cond"] = value810;
		}
		var value811 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[1].conditions[0].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[1].conditions[0].value",value811);
		} else {
			_g.h["wrapping.casePattern.rules[1].conditions[0].value"] = value811;
		}
		var value812 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[1].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[1].conditions[1].cond",value812);
		} else {
			_g.h["wrapping.casePattern.rules[1].conditions[1].cond"] = value812;
		}
		var value813 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[1].conditions[1].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[1].conditions[1].value",value813);
		} else {
			_g.h["wrapping.casePattern.rules[1].conditions[1].value"] = value813;
		}
		var value814 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[1].type"] != null) {
			_g.setReserved("wrapping.casePattern.rules[1].type",value814);
		} else {
			_g.h["wrapping.casePattern.rules[1].type"] = value814;
		}
		var value815 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[1].location"] != null) {
			_g.setReserved("wrapping.casePattern.rules[1].location",value815);
		} else {
			_g.h["wrapping.casePattern.rules[1].location"] = value815;
		}
		var value816 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[1].additionalIndent"] != null) {
			_g.setReserved("wrapping.casePattern.rules[1].additionalIndent",value816);
		} else {
			_g.h["wrapping.casePattern.rules[1].additionalIndent"] = value816;
		}
		var value817 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[2].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[2].conditions[0].cond",value817);
		} else {
			_g.h["wrapping.casePattern.rules[2].conditions[0].cond"] = value817;
		}
		var value818 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[2].conditions[0].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[2].conditions[0].value",value818);
		} else {
			_g.h["wrapping.casePattern.rules[2].conditions[0].value"] = value818;
		}
		var value819 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[2].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[2].conditions[1].cond",value819);
		} else {
			_g.h["wrapping.casePattern.rules[2].conditions[1].cond"] = value819;
		}
		var value820 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[2].conditions[1].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[2].conditions[1].value",value820);
		} else {
			_g.h["wrapping.casePattern.rules[2].conditions[1].value"] = value820;
		}
		var value821 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[2].type"] != null) {
			_g.setReserved("wrapping.casePattern.rules[2].type",value821);
		} else {
			_g.h["wrapping.casePattern.rules[2].type"] = value821;
		}
		var value822 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[2].location"] != null) {
			_g.setReserved("wrapping.casePattern.rules[2].location",value822);
		} else {
			_g.h["wrapping.casePattern.rules[2].location"] = value822;
		}
		var value823 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[2].additionalIndent"] != null) {
			_g.setReserved("wrapping.casePattern.rules[2].additionalIndent",value823);
		} else {
			_g.h["wrapping.casePattern.rules[2].additionalIndent"] = value823;
		}
		var value824 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[3].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[3].conditions[0].cond",value824);
		} else {
			_g.h["wrapping.casePattern.rules[3].conditions[0].cond"] = value824;
		}
		var value825 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[3].conditions[0].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[3].conditions[0].value",value825);
		} else {
			_g.h["wrapping.casePattern.rules[3].conditions[0].value"] = value825;
		}
		var value826 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[3].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[3].conditions[1].cond",value826);
		} else {
			_g.h["wrapping.casePattern.rules[3].conditions[1].cond"] = value826;
		}
		var value827 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[3].conditions[1].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[3].conditions[1].value",value827);
		} else {
			_g.h["wrapping.casePattern.rules[3].conditions[1].value"] = value827;
		}
		var value828 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[3].type"] != null) {
			_g.setReserved("wrapping.casePattern.rules[3].type",value828);
		} else {
			_g.h["wrapping.casePattern.rules[3].type"] = value828;
		}
		var value829 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[3].location"] != null) {
			_g.setReserved("wrapping.casePattern.rules[3].location",value829);
		} else {
			_g.h["wrapping.casePattern.rules[3].location"] = value829;
		}
		var value830 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[3].additionalIndent"] != null) {
			_g.setReserved("wrapping.casePattern.rules[3].additionalIndent",value830);
		} else {
			_g.h["wrapping.casePattern.rules[3].additionalIndent"] = value830;
		}
		var value831 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[4].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[4].conditions[0].cond",value831);
		} else {
			_g.h["wrapping.casePattern.rules[4].conditions[0].cond"] = value831;
		}
		var value832 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[4].conditions[0].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[4].conditions[0].value",value832);
		} else {
			_g.h["wrapping.casePattern.rules[4].conditions[0].value"] = value832;
		}
		var value833 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[4].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[4].conditions[1].cond",value833);
		} else {
			_g.h["wrapping.casePattern.rules[4].conditions[1].cond"] = value833;
		}
		var value834 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[4].conditions[1].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[4].conditions[1].value",value834);
		} else {
			_g.h["wrapping.casePattern.rules[4].conditions[1].value"] = value834;
		}
		var value835 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[4].type"] != null) {
			_g.setReserved("wrapping.casePattern.rules[4].type",value835);
		} else {
			_g.h["wrapping.casePattern.rules[4].type"] = value835;
		}
		var value836 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[4].location"] != null) {
			_g.setReserved("wrapping.casePattern.rules[4].location",value836);
		} else {
			_g.h["wrapping.casePattern.rules[4].location"] = value836;
		}
		var value837 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[4].additionalIndent"] != null) {
			_g.setReserved("wrapping.casePattern.rules[4].additionalIndent",value837);
		} else {
			_g.h["wrapping.casePattern.rules[4].additionalIndent"] = value837;
		}
		var value838 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[5].conditions[0].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[5].conditions[0].cond",value838);
		} else {
			_g.h["wrapping.casePattern.rules[5].conditions[0].cond"] = value838;
		}
		var value839 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[5].conditions[0].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[5].conditions[0].value",value839);
		} else {
			_g.h["wrapping.casePattern.rules[5].conditions[0].value"] = value839;
		}
		var value840 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("itemCount >= n" , String),js_Boot.__cast("itemCount <= n" , String),js_Boot.__cast("anyItemLength >= n" , String),js_Boot.__cast("anyItemLength <= n" , String),js_Boot.__cast("totalItemLength >= n" , String),js_Boot.__cast("totalItemLength <= n" , String),js_Boot.__cast("lineLength >= n" , String),js_Boot.__cast("lineLength <= n" , String),js_Boot.__cast("hasMultilineItems" , String),js_Boot.__cast("exceedsMaxLineLength" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[5].conditions[1].cond"] != null) {
			_g.setReserved("wrapping.casePattern.rules[5].conditions[1].cond",value840);
		} else {
			_g.h["wrapping.casePattern.rules[5].conditions[1].cond"] = value840;
		}
		var value841 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[5].conditions[1].value"] != null) {
			_g.setReserved("wrapping.casePattern.rules[5].conditions[1].value",value841);
		} else {
			_g.h["wrapping.casePattern.rules[5].conditions[1].value"] = value841;
		}
		var value842 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("onePerLine" , String),js_Boot.__cast("onePerLineAfterFirst" , String),js_Boot.__cast("equalNumber" , String),js_Boot.__cast("fillLine" , String),js_Boot.__cast("fillLineWithLeadingBreak" , String),js_Boot.__cast("noWrap" , String),js_Boot.__cast("keep" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[5].type"] != null) {
			_g.setReserved("wrapping.casePattern.rules[5].type",value842);
		} else {
			_g.h["wrapping.casePattern.rules[5].type"] = value842;
		}
		var value843 = codesamples_config_ConfigFieldType.Combo([js_Boot.__cast("beforeLast" , String),js_Boot.__cast("afterLast" , String)]);
		if(__map_reserved["wrapping.casePattern.rules[5].location"] != null) {
			_g.setReserved("wrapping.casePattern.rules[5].location",value843);
		} else {
			_g.h["wrapping.casePattern.rules[5].location"] = value843;
		}
		var value844 = codesamples_config_ConfigFieldType.Number;
		if(__map_reserved["wrapping.casePattern.rules[5].additionalIndent"] != null) {
			_g.setReserved("wrapping.casePattern.rules[5].additionalIndent",value844);
		} else {
			_g.h["wrapping.casePattern.rules[5].additionalIndent"] = value844;
		}
		this.configFields = _g;
		this.currentConfig = new formatter_config_Config();
		this.configFieldValues = new haxe_ds_StringMap();
		var _g1 = new haxe_iterators_MapKeyValueIterator(this.configFields);
		while(_g1.hasNext()) {
			var _g11 = _g1.next();
			var fieldPath = _g11.key;
			var _ = _g11.value;
			var this1 = this.configFieldValues;
			var value845 = { defaultValue : this.getConfigFieldValue(this.currentConfig,fieldPath)};
			var _this = this1;
			if(__map_reserved[fieldPath] != null) {
				_this.setReserved(fieldPath,value845);
			} else {
				_this.h[fieldPath] = value845;
			}
		}
	}
	setCurrentSampleConfig(text) {
		if(text == null || text.length <= 0) {
			text = "{}";
		}
		this.sampleConfigText = text;
		this.sampleConfig = JSON.parse(text);
		this.currentConfig.readConfigFromString(this.sampleConfigText,"hxformat.json");
		var _g = new haxe_iterators_MapKeyValueIterator(this.configFields);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var fieldPath = _g1.key;
			var _ = _g1.value;
			var _this = this.configFieldValues;
			(__map_reserved[fieldPath] != null ? _this.getReserved(fieldPath) : _this.h[fieldPath]).sampleValue = this.getConfigFieldValue(this.currentConfig,fieldPath);
		}
	}
	setFieldValue(fieldPath,value) {
		this.setConfigFieldValue(this.currentConfig,fieldPath,value);
	}
	setConfigFieldValue(object,fieldPath,value) {
		var parts = fieldPath.split(".");
		var fieldName = parts.pop();
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			object = Reflect.field(object,part);
		}
		if(object == null) {
			return;
		}
		object[fieldName] = value;
		var _this = this.configFieldValues;
		(__map_reserved[fieldPath] != null ? _this.getReserved(fieldPath) : _this.h[fieldPath]).userValue = value;
	}
	getConfigFieldValue(object,fieldPath) {
		var parts = fieldPath.split(".");
		var fieldName = parts.pop();
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			object = Reflect.field(object,part);
		}
		return Reflect.field(object,fieldName);
	}
	makeCustomConfig() {
		var copyConfig = JSON.parse(JSON.stringify(this.sampleConfig));
		var _g = new haxe_iterators_MapKeyValueIterator(this.configFieldValues);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var fieldPath = _g1.key;
			var values = _g1.value;
			if(values.userValue == null) {
				continue;
			}
			this.setConfigFieldValue(copyConfig,fieldPath,values.userValue);
		}
		return JSON.stringify(copyConfig,null,"  ");
	}
	buildConfigHtml() {
		return "{\n" + this.buildConfigFields(this.sampleConfig,"    ","") + "\n}\n";
	}
	buildConfigFields(config,indent,fieldPath) {
		var lines = [];
		var _g = 0;
		var _g1 = Reflect.fields(config);
		while(_g < _g1.length) {
			var fieldName = _g1[_g];
			++_g;
			var field = Reflect.field(config,fieldName);
			var newPath = fieldName;
			if(fieldPath.length > 0) {
				newPath = fieldPath + "." + fieldName;
			}
			switch(typeof(field)) {
			case "boolean":case "number":case "string":
				lines.push(indent + fieldName + ": " + this.buildFieldValue(field,newPath) + ",");
				break;
			case "object":
				if(Array.isArray(field)) {
					lines.push(indent + fieldName + ": [");
					var arrayField = field;
					var _g2 = 0;
					var _g11 = arrayField.length;
					while(_g2 < _g11) {
						var index = _g2++;
						lines.push(this.buildConfigFields(arrayField[index],indent + "    ",newPath + ("[" + index + "]")));
					}
					lines.push(indent + "],");
					continue;
				}
				lines.push(indent + fieldName + ": {");
				lines.push(this.buildConfigFields(field,indent + "    ",newPath));
				lines.push(indent + "},");
				break;
			default:
				console.log("src/codesamples/config/ConfigFieldRegistry.hx:116:","unhandled" + typeof(field));
			}
		}
		if(lines.length > 0) {
			var lastEntry = lines[lines.length - 1];
			if(StringTools.endsWith(lastEntry,",")) {
				lines[lines.length - 1] = HxOverrides.substr(lastEntry,0,lastEntry.length - 1);
			}
		}
		return lines.join("\n");
	}
	buildFieldValue(field,fieldPath) {
		var _this = this.configFields;
		if(__map_reserved[fieldPath] != null ? _this.existsReserved(fieldPath) : _this.h.hasOwnProperty(fieldPath)) {
			return this.buildInputFieldValue(field,fieldPath);
		}
		var _g = Type.typeof(field);
		if(_g._hx_index == 6) {
			var s = _g.c;
			return "\"" + Std.string(field) + "\"";
		} else {
			return "" + Std.string(field);
		}
	}
	buildInputFieldValue(field,fieldPath) {
		var _this = this.configFields;
		var _g = __map_reserved[fieldPath] != null ? _this.getReserved(fieldPath) : _this.h[fieldPath];
		switch(_g._hx_index) {
		case 0:
			var abstractValues = _g.abstractValues;
			var combo = "<select class=\"config-field-combo\" data-field-path=\"" + fieldPath + "\">";
			var _g1 = 0;
			while(_g1 < abstractValues.length) {
				var option = abstractValues[_g1];
				++_g1;
				var selected = "";
				if(option == "" + Std.string(field)) {
					selected = " selected";
				}
				combo += "<option value=\"" + option + "\"" + selected + ">" + option + "</option>";
			}
			combo += "</select>";
			return combo;
		case 1:
			return "<input type=\"number\" value=\"" + Std.string(field) + "\" class=\"config-field-number\" data-field-path=\"" + fieldPath + "\" />";
		case 2:
			var checked = "";
			var label = "false";
			if("" + Std.string(field) == "true") {
				checked = "checked";
				label = "true";
			}
			return "<input type=\"checkbox\" value=\"1\" class=\"config-field-bool\" data-field-path=\"" + fieldPath + "\" " + checked + "/>" + ("<label class=\"config-field-bool-label\" data-field-path=\"" + fieldPath + "\">" + label + "</label>");
		case 3:
			return "<input type=\"text\" value=\"" + Std.string(field) + "\" class=\"config-field-text\" data-field-path=\"" + fieldPath + "\" />";
		}
	}
}
$hxClasses["codesamples.config.ConfigFieldRegistry"] = codesamples_config_ConfigFieldRegistry;
codesamples_config_ConfigFieldRegistry.__name__ = "codesamples.config.ConfigFieldRegistry";
Object.assign(codesamples_config_ConfigFieldRegistry.prototype, {
	__class__: codesamples_config_ConfigFieldRegistry
	,configFields: null
	,configFieldValues: null
	,sampleConfig: null
	,sampleConfigText: null
	,currentConfig: null
});
var codesamples_config_ConfigFieldType = $hxEnums["codesamples.config.ConfigFieldType"] = { __ename__ : true, __constructs__ : ["Combo","Number","Bool","Text"]
	,Combo: ($_=function(abstractValues) { return {_hx_index:0,abstractValues:abstractValues,__enum__:"codesamples.config.ConfigFieldType",toString:$estr}; },$_.__params__ = ["abstractValues"],$_)
	,Number: {_hx_index:1,__enum__:"codesamples.config.ConfigFieldType",toString:$estr}
	,Bool: {_hx_index:2,__enum__:"codesamples.config.ConfigFieldType",toString:$estr}
	,Text: {_hx_index:3,__enum__:"codesamples.config.ConfigFieldType",toString:$estr}
};
class doc_DocBase {
	buildDocPage(container,docName,docText) {
		var content = "<h1>" + StringTools.replace(docName,"."," ") + "</h1>\n";
		content += "<div id=\"markdownContainer\">" + Markdown.markdownToHtml(docText) + "</div>";
		$(container).html(content);
	}
}
$hxClasses["doc.DocBase"] = doc_DocBase;
doc_DocBase.__name__ = "doc.DocBase";
Object.assign(doc_DocBase.prototype, {
	__class__: doc_DocBase
});
class doc_Docs extends doc_DocBase {
	constructor() {
		super();
	}
	compile_dev_version(container) {
		this.buildDocPage(container,"compile.dev.version","### compile command line version (Haxe 4)\n\n- `git clone https://github.com/HaxeCheckstyle/haxe-formatter.git`\n- `cd haxe-formatter`\n- `npm install`\n- `npx lix download`\n- `npx haxe buildAll.hxml` - for Neko, NodeJS and Java version + JSON schema\n- `npx haxe buildCpp.hxml` - for C++ version\n\n### compile command line version (Haxe 3)\n\n- `git clone https://github.com/HaxeCheckstyle/haxe-formatter.git`\n- `cd haxe-formatter`\n- `npm install`\n- `mv haxe_libraries haxe4_libraries`\n- `mv haxe3_libraries haxe_libraries`\n- `npx lix install haxe 3.4.7`\n- `npx lix download`\n- `npx haxe buildAll.hxml` - for Neko, NodeJS and Java version + JSON schema\n- `npx haxe buildCpp.hxml` - for C++ version\n\n### compile haxe-language server\n\n- `git clone https://github.com/vshaxe/haxe-languageserver.git`\n- `cd haxe-languageserver`\n- `npm install`\n- `npx lix download`\n- `npx lix install gh:HaxeCheckstyle/tokentree`\n- `npx lix install gh:HaxeCheckstyle/haxe-formatter`\n- `npx lix run vshaxe-build --target language-server`\n- `cp bin/server.js ~/.vscode/extensions/nadako.vshaxe-$VSHAXE_VERSION/server/bin/` - replace `$VSHAXE_VERSION` with actual version (assuming you have it installed)\n- restart Haxe language server or restart VSCode\n\n> **Note**: You will have to replace `server.js` whenever there is a new marketplace release, since it will wipe your `~/.vscode/extensions/nadako.vshaxe-$VSHAXE_VERSION` folder.\n");
	}
}
$hxClasses["doc.Docs"] = doc_Docs;
doc_Docs.__name__ = "doc.Docs";
doc_Docs.__super__ = doc_DocBase;
Object.assign(doc_Docs.prototype, {
	__class__: doc_Docs
});
class formatter_FormatStats {
}
$hxClasses["formatter.FormatStats"] = formatter_FormatStats;
formatter_FormatStats.__name__ = "formatter.FormatStats";
var formatter_Result = $hxEnums["formatter.Result"] = { __ename__ : true, __constructs__ : ["Success","Failure","Disabled"]
	,Success: ($_=function(formattedCode) { return {_hx_index:0,formattedCode:formattedCode,__enum__:"formatter.Result",toString:$estr}; },$_.__params__ = ["formattedCode"],$_)
	,Failure: ($_=function(errorMessage) { return {_hx_index:1,errorMessage:errorMessage,__enum__:"formatter.Result",toString:$estr}; },$_.__params__ = ["errorMessage"],$_)
	,Disabled: {_hx_index:2,__enum__:"formatter.Result",toString:$estr}
};
class formatter_Formatter {
	static format(input,config,lineSeparator,entryPoint,range) {
		if(config == null) {
			config = new formatter_config_Config();
		}
		var inputData;
		switch(input._hx_index) {
		case 0:
			var code = input.code;
			var content = haxe_io_Bytes.ofString(code);
			inputData = { fileName : "code snippet", content : content, config : config, lineSeparator : lineSeparator, entryPoint : entryPoint, range : range};
			return formatter_Formatter.formatInputData(inputData);
		case 1:
			var code1 = input.code;
			var tokenTree = input.tokenTree;
			var tokenList = input.tokenList;
			inputData = { fileName : "<unknown.hx>", content : code1, tokenList : tokenList, tokenTree : tokenTree, config : config, lineSeparator : lineSeparator, entryPoint : entryPoint, range : range};
			return formatter_Formatter.formatInputData(inputData);
		}
	}
	static formatInputData(inputData) {
		try {
			var config = inputData.config;
			if(config.disableFormatting) {
				return formatter_Result.Disabled;
			}
			if(config.isExcluded(inputData.fileName)) {
				return formatter_Result.Disabled;
			}
			tokentree_TokenStream.MODE = tokentree_TokenStreamMode.RELAXED;
			var parsedCode = new formatter_codedata_ParsedCode(inputData);
			formatter_FormatStats.totalLinesOrig += parsedCode.lines.length;
			var indenter = new formatter_marker_Indenter(config.indentation);
			indenter.setParsedCode(parsedCode);
			var markTokenText = new formatter_marker_MarkTokenText(config,parsedCode,indenter);
			var markWhitespace = new formatter_marker_MarkWhitespace(config,parsedCode,indenter);
			var markLineEnds = new formatter_marker_MarkLineEnds(config,parsedCode,indenter);
			var markSameLine = new formatter_marker_MarkSameLine(config,parsedCode,indenter);
			var markWrapping = new formatter_marker_wrapping_MarkWrapping(config,parsedCode,indenter);
			var markEmptyLines = new formatter_marker_MarkEmptyLines(config,parsedCode,indenter);
			var markAdditionalIndent = new formatter_marker_MarkAdditionalIndentation(config,parsedCode,indenter);
			markTokenText.run();
			markWhitespace.run();
			markLineEnds.run();
			markSameLine.run();
			markWrapping.run();
			markEmptyLines.run();
			markTokenText.finalRun();
			markAdditionalIndent.run();
			var lines = new formatter_codedata_CodeLines(parsedCode,indenter,inputData.range);
			lines.applyWrapping(config.wrapping);
			markEmptyLines.finalRun(lines);
			var formatted = lines.print(parsedCode.lineSeparator);
			formatter_FormatStats.totalLinesFormatted += formatted.split(parsedCode.lineSeparator).length;
			return formatter_Result.Success(formatted);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			var callstack = haxe_CallStack.toString(haxe_CallStack.exceptionStack());
			return formatter_Result.Failure(Std.string(e1) + "\n" + callstack + "\n\n");
		}
	}
}
$hxClasses["formatter.Formatter"] = formatter_Formatter;
formatter_Formatter.__name__ = "formatter.Formatter";
var formatter_FormatterInput = $hxEnums["formatter.FormatterInput"] = { __ename__ : true, __constructs__ : ["Code","Tokens"]
	,Code: ($_=function(code) { return {_hx_index:0,code:code,__enum__:"formatter.FormatterInput",toString:$estr}; },$_.__params__ = ["code"],$_)
	,Tokens: ($_=function(tokenList,tokenTree,code) { return {_hx_index:1,tokenList:tokenList,tokenTree:tokenTree,code:code,__enum__:"formatter.FormatterInput",toString:$estr}; },$_.__params__ = ["tokenList","tokenTree","code"],$_)
};
class formatter_codedata_CodeLine {
	constructor(indent) {
		this.indent = indent;
		this.parts = [];
		this.emptyLinesAfter = 0;
		this.verbatim = false;
		this.partialLine = false;
	}
	addToken(tokenInfo,lineSeparator) {
		if(tokenInfo.emptyLinesAfter > this.emptyLinesAfter) {
			this.emptyLinesAfter = tokenInfo.emptyLinesAfter;
		}
		if(this.currentPart == null) {
			this.currentPart = { firstToken : tokenInfo.token, lastToken : tokenInfo.token, text : "", multiLine : false, firstLineLength : -1, lastLineLength : -1};
			this.parts.push(this.currentPart);
		}
		this.currentPart.lastToken = tokenInfo.token;
		if(tokenInfo.spacesBefore > 0) {
			this.currentPart.text += StringTools.lpad(""," ",tokenInfo.spacesBefore);
		}
		if(tokenInfo.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Space && tokenInfo.spacesAfter > 0) {
			this.currentPart.text += tokenInfo.text + StringTools.lpad(""," ",tokenInfo.spacesAfter);
		} else {
			this.currentPart.text += tokenInfo.text;
		}
		if(tokenInfo.wrapAfter) {
			this.currentPart = null;
		}
	}
	applyWrapping(config,parsedCode,indenter) {
		var lineLength = indenter.calcAbsoluteIndent(this.indent);
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var part = _g1[_g];
			++_g;
			this.calcLineLengths(part,parsedCode.lineSeparator);
		}
		var _g2 = 0;
		var _g3 = this.parts.length;
		while(_g2 < _g3) {
			var index = _g2++;
			var part1 = this.parts[index];
			if(part1.multiLine) {
				if(lineLength + part1.firstLineLength > config.maxLineLength) {
					return this.wrappedAt(index,config,parsedCode,indenter);
				}
				lineLength = part1.lastLineLength;
				continue;
			}
			lineLength += part1.text.length;
			if(lineLength > config.maxLineLength) {
				return this.wrappedAt(index,config,parsedCode,indenter);
			}
		}
		return [this];
	}
	calcLineLengths(part,lineSeparator) {
		var lines = part.text.split(lineSeparator);
		part.multiLine = lines.length > 1;
		if(part.multiLine) {
			part.firstLineLength = lines[0].length;
			part.lastLineLength = lines[lines.length - 1].length;
		} else {
			part.firstLineLength = part.text.length;
			part.lastLineLength = -1;
		}
	}
	wrappedAt(index,config,parsedCode,indenter) {
		return this.wrapNormal(config,parsedCode,indenter);
	}
	wrapNormal(config,parsedCode,indenter) {
		if(this.parts.length <= 0) {
			return [this];
		}
		var line = new formatter_codedata_CodeLine(this.indent);
		var part = this.parts.shift();
		line.parts = [part];
		var lineLength = indenter.calcAbsoluteIndent(this.indent) + part.text.length;
		var lines = [line];
		var lastPart = part;
		while(this.parts.length > 0) {
			var p = this.parts.shift();
			var partLength = p.firstLineLength;
			if(!p.multiLine) {
				partLength = StringTools.rtrim(p.text).length;
			}
			if(lineLength + partLength >= config.maxLineLength) {
				parsedCode.tokenList.lineEndAfter(lastPart.lastToken);
				var info = parsedCode.tokenList.getTokenAt(p.firstToken.index);
				var additionalIndent = 0;
				if(info != null) {
					additionalIndent = info.additionalIndent;
				}
				var newIndent = indenter.calcIndent(p.firstToken) + additionalIndent;
				line = new formatter_codedata_CodeLine(newIndent);
				lineLength = indenter.calcAbsoluteIndent(newIndent);
				lines.push(line);
			}
			line.parts.push(p);
			if(p.lastLineLength <= 0) {
				lineLength += p.firstLineLength;
			} else {
				lineLength += p.lastLineLength;
			}
			lastPart = p;
		}
		line.emptyLinesAfter = this.emptyLinesAfter;
		return lines;
	}
	print(indenter,lineSeparator) {
		var line = "";
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var part = _g1[_g];
			++_g;
			line += part.text;
		}
		if(this.partialLine) {
			line = indenter.makeIndentString(this.indent) + line;
		} else {
			line = indenter.makeIndentString(this.indent) + StringTools.rtrim(line);
		}
		var _g2 = 0;
		var _g3 = this.emptyLinesAfter;
		while(_g2 < _g3) {
			var index = _g2++;
			line += lineSeparator;
			if(indenter.shouldAddTrailingWhitespace()) {
				line += indenter.makeIndentString(this.indent);
			}
		}
		return line;
	}
}
$hxClasses["formatter.codedata.CodeLine"] = formatter_codedata_CodeLine;
formatter_codedata_CodeLine.__name__ = "formatter.codedata.CodeLine";
Object.assign(formatter_codedata_CodeLine.prototype, {
	__class__: formatter_codedata_CodeLine
	,parts: null
	,currentPart: null
	,indent: null
	,emptyLinesAfter: null
	,verbatim: null
	,partialLine: null
});
class formatter_codedata_CodeLines {
	constructor(parsedCode,indenter,range) {
		this.lines = [];
		this.indenter = indenter;
		this.parsedCode = parsedCode;
		this.range = null;
		this.posRange = range;
		this.trailingWhitespaceAfterRange = "";
		this.rangeStartOffset = 0;
		this.rangeEndOffset = 0;
		if(range != null) {
			var start = parsedCode.tokenList.getTokenAtOffset(range.startPos);
			var end = parsedCode.tokenList.getTokenAtOffset(range.endPos);
			if(end != null && range.endPos - 1 < end.token.pos.min) {
				end = parsedCode.tokenList.getPreviousToken(end.token);
			}
			if(start != null && end != null) {
				var _g = start.token.tok;
				if(_g._hx_index == 6) {
					var s = _g.s;
					this.rangeStartOffset = this.calcStartCommentOffset(start);
				} else {
					var startLine = parsedCode.getLinePos(start.token.pos.min);
					var rangeStartLine = parsedCode.getLinePos(range.startPos);
					var endLine = parsedCode.getLinePos(start.token.pos.max);
					if(startLine.line != rangeStartLine.line) {
						this.rangeStartOffset = range.startPos - rangeStartLine.ofs - start.token.pos.min;
					}
				}
				var _g2 = end.token.tok;
				if(_g2._hx_index == 6) {
					var s1 = _g2.s;
					this.rangeEndOffset = this.calcEndCommentOffset(end);
				} else if(this.posRange.endPos >= end.token.pos.min && this.posRange.endPos < end.token.pos.max) {
					this.rangeEndOffset = end.text.length - (end.token.pos.max - this.posRange.endPos);
				}
				this.range = { startPos : start.token.index, endPos : end.token.index};
			}
		}
		this.buildLines();
	}
	calcStartCommentOffset(info) {
		var comment = this.parsedCode.getString(info.token.pos.min,info.token.pos.max);
		var commentLines = comment.split(this.parsedCode.lineSeparator);
		var index = 0;
		var offset = 0;
		var sepLength = this.parsedCode.lineSeparator.length;
		var pos = this.posRange.startPos - info.token.pos.min;
		var _g = 0;
		while(_g < commentLines.length) {
			var line = commentLines[_g];
			++_g;
			if(line.length + offset + sepLength > pos) {
				break;
			}
			offset += line.length + sepLength;
			++index;
		}
		commentLines = info.text.split(this.parsedCode.lineSeparator);
		offset = 0;
		var _g1 = 0;
		var _g2 = index;
		while(_g1 < _g2) {
			var j = _g1++;
			offset += commentLines[j].length + sepLength;
		}
		return offset;
	}
	calcEndCommentOffset(info) {
		var comment = this.parsedCode.getString(info.token.pos.min,info.token.pos.max);
		var commentLines = comment.split(this.parsedCode.lineSeparator);
		var index = 0;
		var offset = 0;
		var trailCount = 0;
		var pos = this.posRange.endPos - info.token.pos.min;
		var sepLength = this.parsedCode.lineSeparator.length;
		var _g = 0;
		while(_g < commentLines.length) {
			var line = commentLines[_g];
			++_g;
			if(line.length + offset + sepLength > pos) {
				trailCount = line.length - (pos - offset);
				break;
			}
			offset += line.length + sepLength;
			++index;
		}
		commentLines = info.text.split(this.parsedCode.lineSeparator);
		offset = 0;
		var _g1 = 0;
		var _g2 = index;
		while(_g1 < _g2) {
			var j = _g1++;
			offset += commentLines[j].length + sepLength;
		}
		var lastLine = commentLines[index];
		return offset + lastLine.length - trailCount;
	}
	buildLines() {
		var line = null;
		var index = 0;
		while(index < this.parsedCode.tokenList.tokens.length) {
			if(this.range != null) {
				if(index > this.range.endPos) {
					break;
				}
			}
			var tokenInfo = this.parsedCode.tokenList.getTokenAt(index);
			if(tokenInfo == null) {
				++index;
				continue;
			}
			var _g = tokenInfo.token.tok;
			if(_g._hx_index == 7) {
				if(_g.s == " @formatter:off") {
					line = null;
					index = this.skipFormatterOff(index);
					continue;
				}
			}
			if(this.range != null) {
				if(index < this.range.startPos) {
					++index;
					continue;
				}
			}
			if(line == null) {
				line = new formatter_codedata_CodeLine(this.indenter.calcIndent(tokenInfo.token) + tokenInfo.additionalIndent);
				this.lines.push(line);
			}
			if(this.range != null) {
				if(index == this.range.startPos && this.rangeStartOffset > 0) {
					tokenInfo.text = HxOverrides.substr(tokenInfo.text,this.rangeStartOffset,null);
					line.indent = 0;
				}
			}
			if(this.range != null && index == this.range.endPos) {
				if(this.posRange.endPos >= tokenInfo.token.pos.min && this.posRange.endPos < tokenInfo.token.pos.max) {
					var index1 = 0;
					if(this.range.endPos == this.range.startPos) {
						index1 = this.rangeStartOffset;
					}
					tokenInfo.text = HxOverrides.substr(tokenInfo.text,0,this.rangeEndOffset - index1);
					tokenInfo.spacesAfter = 0;
					tokenInfo.whitespaceAfter = formatter_codedata_WhitespaceAfterType.None;
					tokenInfo.emptyLinesAfter = 0;
					line.partialLine = true;
				}
				if(this.posRange.endPos > tokenInfo.token.pos.max) {
					this.trailingWhitespaceAfterRange = this.parsedCode.getString(tokenInfo.token.pos.max,this.posRange.endPos);
					line.partialLine = true;
				}
			}
			line.addToken(tokenInfo,this.parsedCode.lineSeparator);
			if(tokenInfo.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
				line = null;
			}
			++index;
		}
	}
	skipFormatterOff(index) {
		var startIndex = index++;
		var startInfo = this.parsedCode.tokenList.getTokenAt(startIndex);
		var startLine = this.parsedCode.getLinePos(startInfo.token.pos.min).line;
		while(index < this.parsedCode.tokenList.tokens.length) {
			var endIndex = index++;
			var tokenInfo = this.parsedCode.tokenList.getTokenAt(endIndex);
			if(tokenInfo == null) {
				continue;
			}
			if(this.range != null) {
				if(endIndex < this.range.startPos) {
					continue;
				}
				if(endIndex == this.range.startPos) {
					startInfo = this.parsedCode.tokenList.getTokenAt(endIndex);
					startLine = this.parsedCode.getLinePos(startInfo.token.pos.min).line;
				}
				if(endIndex >= this.range.endPos) {
					this.copyVerbatimChars(startInfo.token.pos.min,tokenInfo.token.pos.max);
					return index;
				}
			}
			var _g = tokenInfo.token.tok;
			if(_g._hx_index == 7) {
				if(_g.s == " @formatter:on") {
					if(this.range != null) {
						if(startIndex < this.range.startPos) {
							this.copyVerbatimChars(startInfo.token.pos.min,tokenInfo.token.pos.max);
							return index;
						}
					}
					var endLine = this.parsedCode.getLinePos(tokenInfo.token.pos.max).line;
					this.copyVerbatimLines(startLine,endLine);
					return index;
				}
			}
		}
		var endLine1 = this.parsedCode.lines.length - 1;
		this.copyVerbatimLines(startLine,endLine1);
		return index;
	}
	copyVerbatimLines(startLine,endLine) {
		var startOffs = this.parsedCode.linesIdx[startLine].l;
		var endOffs = this.parsedCode.linesIdx[endLine].r;
		var content = this.parsedCode.getString(startOffs,endOffs);
		if(endLine < this.parsedCode.lines.length - 1) {
			content = StringTools.rtrim(content);
		}
		this.lines.push(new formatter_codedata_VerbatimCodeLine(content));
	}
	copyVerbatimChars(startPos,endPos) {
		var content = this.parsedCode.getString(startPos,endPos);
		this.lines.push(new formatter_codedata_VerbatimCodeLine(content));
	}
	applyWrapping(config) {
		var wrappedLines = [];
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var wrappedCode = line.applyWrapping(config,this.parsedCode,this.indenter);
			wrappedLines = wrappedLines.concat(wrappedCode);
		}
		this.lines = wrappedLines;
	}
	print(lineSeparator) {
		var prefix = "";
		var _gthis = this;
		if(this.parsedCode.tokenList.leadingEmptyLInes > 0) {
			prefix = StringTools.lpad("",lineSeparator,lineSeparator.length * this.parsedCode.tokenList.leadingEmptyLInes);
		}
		var rangeNewLine = "";
		if(this.range != null) {
			if(this.range.startPos > 0) {
				prefix = "";
			}
			if(this.lines.length > 0) {
				var line = this.lines[this.lines.length - 1];
				line.emptyLinesAfter = 0;
			}
		}
		var _this = this.lines;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].print(_gthis.indenter,lineSeparator);
		}
		return prefix + result.join(lineSeparator) + this.trailingWhitespaceAfterRange;
	}
}
$hxClasses["formatter.codedata.CodeLines"] = formatter_codedata_CodeLines;
formatter_codedata_CodeLines.__name__ = "formatter.codedata.CodeLines";
Object.assign(formatter_codedata_CodeLines.prototype, {
	__class__: formatter_codedata_CodeLines
	,indenter: null
	,parsedCode: null
	,range: null
	,posRange: null
	,trailingWhitespaceAfterRange: null
	,rangeStartOffset: null
	,rangeEndOffset: null
	,lines: null
});
class formatter_codedata_ParsedCode {
	constructor(inputData) {
		this.file = { name : inputData.fileName, content : inputData.content};
		try {
			this.removeBOM();
			if(inputData.lineSeparator == null) {
				this.detectLineSeparator();
			} else {
				this.lineSeparator = inputData.lineSeparator;
			}
			this.makeLines();
			this.makePosIndices();
			if(inputData.tokenList == null) {
				this.makeTokens();
				this.getTokenTree(inputData.entryPoint);
			} else {
				this.tokens = inputData.tokenList;
				this.root = inputData.tokenTree;
				this.makeTokenList();
			}
			this.checkTokens();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			throw new js__$Boot_HaxeError("failed to create parser context: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
		}
	}
	checkTokens() {
		if(this.tokens.length != this.tokenList.tokens.length) {
			throw new js__$Boot_HaxeError("token count mismatch");
		}
		var skipCount = 0;
		var _g = 0;
		var _g1 = this.tokens.length;
		while(_g < _g1) {
			var index = _g++;
			var info = this.tokenList.tokens[index];
			if(info == null) {
				if(skipCount <= 0) {
					throw new js__$Boot_HaxeError("missing token \"" + Std.string(this.tokens[index]) + "\" [" + index + "] detected!");
				}
				--skipCount;
				continue;
			}
			var token = info.token;
			var _g2 = token.tok;
			switch(_g2._hx_index) {
			case 1:
				var _g3 = _g2.c;
				switch(_g3._hx_index) {
				case 0:
					var v = _g3.v;
					if(StringTools.startsWith(v,"-")) {
						skipCount = 1;
					}
					break;
				case 1:
					var v1 = _g3.f;
					if(StringTools.startsWith(v1,"-")) {
						skipCount = 1;
					}
					break;
				default:
					skipCount = 0;
				}
				break;
			case 5:
				var _g11 = _g2.op;
				switch(_g11._hx_index) {
				case 8:
					skipCount = 1;
					break;
				case 17:
					skipCount = 1;
					break;
				case 18:
					skipCount = 2;
					break;
				case 20:
					switch(_g11.op._hx_index) {
					case 17:
						skipCount = 2;
						break;
					case 18:
						skipCount = 3;
						break;
					default:
						skipCount = 0;
					}
					break;
				default:
					skipCount = 0;
				}
				break;
			default:
				skipCount = 0;
			}
		}
	}
	getTokenTree(entryPoint) {
		if(this.tokens == null) {
			return null;
		}
		if(entryPoint == null) {
			entryPoint = tokentree_TokenTreeEntryPoint.TYPE_LEVEL;
		}
		if(this.root == null) {
			var this1 = this.file.content;
			this.root = tokentree_TokenTreeBuilder.buildTokenTree(this.tokens,this1,entryPoint);
			this.makeTokenList();
		}
		return this.root;
	}
	removeBOM() {
		if(this.file.content == null || this.file.content.length <= 2) {
			return;
		}
		if(this.file.content.b[0] == 239 && this.file.content.b[1] == 187 && this.file.content.b[2] == 191) {
			var withBOM = this.file.content;
			this.file.content = withBOM.sub(3,this.file.content.length - 3);
		}
	}
	makeTokenList() {
		this.tokenList = new formatter_codedata_TokenList();
		this.tokenList.buildList(this.root);
	}
	makePosIndices() {
		var code = this.file.content;
		this.linesIdx = [];
		var last = 0;
		var left = false;
		var _g = 0;
		var _g1 = code.length;
		while(_g < _g1) {
			var i = _g++;
			if(code.b[i] == 10) {
				this.linesIdx.push({ l : last, r : i});
				last = i + 1;
				left = false;
			}
			left = true;
		}
		if(left) {
			this.linesIdx.push({ l : last, r : code.length});
		}
	}
	getLinePos(off) {
		var lowerBound = 0;
		var upperBound = this.linesIdx.length - 1;
		if(this.linesIdx.length <= 0) {
			throw new js__$Boot_HaxeError("Bad offset");
		}
		if(off < 0) {
			throw new js__$Boot_HaxeError("Bad offset");
		}
		if(off > this.linesIdx[upperBound].r) {
			throw new js__$Boot_HaxeError("Bad offset");
		}
		while(true) {
			if(lowerBound > upperBound) {
				throw new js__$Boot_HaxeError("Bad offset");
			}
			var center = lowerBound + Math.floor((upperBound - lowerBound) / 2);
			var matchLeft = this.linesIdx[center].l <= off;
			var matchRight = this.linesIdx[center].r >= off;
			if(matchLeft && matchRight) {
				return { line : center, ofs : off - this.linesIdx[center].l};
			}
			if(matchLeft) {
				lowerBound = center + 1;
				continue;
			}
			if(matchRight) {
				upperBound = center - 1;
				continue;
			}
		}
	}
	getString(off,off2) {
		var code = this.file.content;
		var len = off2 - off;
		if(off >= code.length || off + len > code.length) {
			return "";
		}
		return code.sub(off,off2 - off).toString();
	}
	isOriginalNewlineBefore(token) {
		if(token == null) {
			return false;
		}
		var prev = this.tokenList.getPreviousToken(token);
		if(prev == null) {
			return false;
		}
		return !this.isOriginalSameLine(prev.token,token);
	}
	isOriginalSameLine(first,second) {
		var startLine = this.getLinePos(first.pos.max).line;
		var endLine = this.getLinePos(second.pos.min).line;
		return startLine == endLine;
	}
	linesBetweenOriginal(first,second) {
		var startLine = this.getLinePos(first.pos.min).line;
		var endLine = this.getLinePos(second.pos.min).line;
		return endLine - startLine;
	}
	detectLineSeparator() {
		var codeBytes = this.file.content;
		var code = codeBytes.toString();
		var _g = 0;
		var _g1 = code.length;
		while(_g < _g1) {
			var i = _g++;
			var char = code.charAt(i);
			if(char == "\r" || char == "\n") {
				this.lineSeparator = char;
				if(char == "\r" && i + 1 < code.length) {
					char = code.charAt(i + 1);
					if(char == "\n") {
						this.lineSeparator += char;
					}
				}
				return;
			}
		}
		this.lineSeparator = "\n";
	}
	makeLines() {
		var code = this.file.content;
		var textCode = code.toString();
		this.lines = textCode.split(this.lineSeparator);
		this.emptyLines = [];
		var _g = 0;
		var _g1 = this.lines.length;
		while(_g < _g1) {
			var index = _g++;
			var line = this.lines[index];
			if(StringTools.startsWith(line,"<<<<<<<")) {
				throw new js__$Boot_HaxeError("not formatting \"" + this.file.name + "\" - file contains a merge conflict");
			}
			if(new EReg("^\\s*$","").match(line)) {
				this.emptyLines.push(index);
			}
		}
	}
	makeTokens() {
		try {
			this.tokens = [];
			this.root = null;
			var this1 = this.file.content;
			var lexer = new haxeparser_HaxeLexer(this1,this.file.name);
			var t = lexer.token(haxeparser_HaxeLexer.tok);
			while(t.tok != haxeparser_TokenDef.Eof) {
				this.tokens.push(t);
				t = lexer.token(haxeparser_HaxeLexer.tok);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			throw new js__$Boot_HaxeError("failed to make tokens " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
		}
	}
}
$hxClasses["formatter.codedata.ParsedCode"] = formatter_codedata_ParsedCode;
formatter_codedata_ParsedCode.__name__ = "formatter.codedata.ParsedCode";
Object.assign(formatter_codedata_ParsedCode.prototype, {
	__class__: formatter_codedata_ParsedCode
	,file: null
	,tokens: null
	,linesIdx: null
	,lines: null
	,lineSeparator: null
	,root: null
	,tokenList: null
	,emptyLines: null
});
class formatter_codedata_TokenList {
	constructor() {
		this.tokens = [];
		this.leadingEmptyLInes = 0;
		this.closeTokenCache = new haxe_ds_IntMap();
	}
	buildList(token) {
		if(token.children == null) {
			return;
		}
		var _g = 0;
		var _g1 = token.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var index = child.index;
			if(index < 0 || child.inserted) {
				continue;
			}
			if(child.index >= this.tokens.length) {
				this.fill(child.index - this.tokens.length);
			}
			this.tokens[index] = { token : child, whitespaceAfter : formatter_codedata_WhitespaceAfterType.None, spacesBefore : 0, spacesAfter : 0, emptyLinesAfter : 0, wrapAfter : false, text : null, additionalIndent : 0};
			this.buildList(child);
		}
	}
	fill(count) {
		while(count-- > 0) this.tokens.push(null);
	}
	getCloseToken(token) {
		if(token == null || token.tok == null) {
			return null;
		}
		if(token.index < 0 || token.index >= this.tokens.length) {
			return null;
		}
		if(this.closeTokenCache.h.hasOwnProperty(token.index)) {
			return this.closeTokenCache.h[token.index];
		}
		var result;
		switch(token.tok._hx_index) {
		case 14:
			result = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.BkClose);
			break;
		case 16:
			result = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.BrClose);
			break;
		case 18:
			result = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.PClose);
			break;
		default:
			return null;
		}
		if(result == null) {
			return null;
		}
		this.closeTokenCache.h[token.index] = result;
		return result;
	}
	getTokenAtOffset(off) {
		if(this.tokens.length <= 0) {
			throw new js__$Boot_HaxeError("Bad offset");
		}
		if(off < 0) {
			throw new js__$Boot_HaxeError("Bad offset");
		}
		if(off > this.tokens[this.tokens.length - 1].token.pos.max) {
			throw new js__$Boot_HaxeError("Bad offset");
		}
		var _g = 0;
		var _g1 = this.tokens;
		while(_g < _g1.length) {
			var token = _g1[_g];
			++_g;
			if(token == null) {
				continue;
			}
			if(token.token.pos.max >= off) {
				return token;
			}
		}
		throw new js__$Boot_HaxeError("Bad offset");
	}
	getTokenAt(index) {
		if(index < 0 || index >= this.tokens.length) {
			return null;
		}
		return this.tokens[index];
	}
	getPreviousToken(token) {
		if(token == null || token.index <= 0) {
			return null;
		}
		var prevToken = null;
		var prevIndex = token.index - 1;
		if(prevIndex >= this.tokens.length) {
			return null;
		}
		while(prevToken == null) {
			prevToken = this.tokens[prevIndex--];
			if(prevIndex < 0) {
				return null;
			}
		}
		return prevToken;
	}
	getNextToken(token) {
		if(token == null || token.index <= 0) {
			return null;
		}
		var nextToken = null;
		var nextIndex = token.index + 1;
		if(nextIndex >= this.tokens.length) {
			return null;
		}
		while(nextToken == null) {
			nextToken = this.tokens[nextIndex++];
			if(nextIndex < 0) {
				return null;
			}
		}
		return nextToken;
	}
	whitespace(token,where) {
		if(token.index < 0) {
			return;
		}
		var info = this.tokens[token.index];
		if(info == null) {
			return;
		}
		var prev = null;
		var prevIndex = token.index - 1;
		while(prev == null) {
			if(prevIndex < 0) {
				break;
			}
			prev = this.tokens[prevIndex--];
		}
		if(prev != null && this.needsLineBreak(prev.token)) {
			prev = null;
		}
		switch(where) {
		case "after":
			this.applyWhitespace(info,formatter_codedata_WhitespaceAfterType.Space);
			break;
		case "around":
			this.applyWhitespace(info,formatter_codedata_WhitespaceAfterType.Space);
			this.applyWhitespace(prev,formatter_codedata_WhitespaceAfterType.Space);
			break;
		case "before":
			this.applyWhitespace(prev,formatter_codedata_WhitespaceAfterType.Space);
			break;
		case "none":
			this.applyWhitespace(info,formatter_codedata_WhitespaceAfterType.None);
			this.applyWhitespace(prev,formatter_codedata_WhitespaceAfterType.None);
			break;
		case "noneAfter":
			this.applyWhitespace(info,formatter_codedata_WhitespaceAfterType.None);
			break;
		case "noneBefore":
			this.applyWhitespace(prev,formatter_codedata_WhitespaceAfterType.None);
			break;
		case "onlyAfter":
			this.applyWhitespace(prev,formatter_codedata_WhitespaceAfterType.None);
			this.applyWhitespace(info,formatter_codedata_WhitespaceAfterType.Space);
			break;
		case "onlyBefore":
			this.applyWhitespace(prev,formatter_codedata_WhitespaceAfterType.Space);
			this.applyWhitespace(info,formatter_codedata_WhitespaceAfterType.None);
			break;
		}
	}
	applyWhitespace(info,policy) {
		if(info == null) {
			return;
		}
		switch(info.whitespaceAfter._hx_index) {
		case 0:
			info.whitespaceAfter = policy;
			switch(policy._hx_index) {
			case 0:
				info.spacesAfter = 0;
				break;
			case 1:
				this.shouldHaveOneSpaceAfter(info);
				break;
			case 2:
				break;
			}
			break;
		case 1:
			switch(policy._hx_index) {
			case 0:
				info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.None;
				info.spacesAfter = 0;
				break;
			case 1:
				this.shouldHaveOneSpaceAfter(info);
				break;
			case 2:
				info.whitespaceAfter = policy;
				break;
			}
			break;
		case 2:
			switch(policy._hx_index) {
			case 0:
				if(info.spacesAfter > 0) {
					info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Space;
				} else {
					info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.None;
					info.spacesAfter = 0;
				}
				break;
			case 1:
				info.whitespaceAfter = policy;
				this.shouldHaveOneSpaceAfter(info);
				break;
			case 2:
				break;
			}
			break;
		}
	}
	shouldHaveOneSpaceAfter(info) {
		if(info == null) {
			return;
		}
		if(info.spacesAfter <= 0) {
			info.spacesAfter = 1;
		}
	}
	spacesBefore(token,count) {
		if(token.index < 0) {
			return;
		}
		var info = this.tokens[token.index];
		if(info == null) {
			return;
		}
		info.spacesBefore = count;
	}
	lineEndAfter(token) {
		if(token.index < 0) {
			return;
		}
		var info = this.tokens[token.index];
		if(info == null) {
			return;
		}
		switch(info.whitespaceAfter._hx_index) {
		case 0:
			info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Newline;
			break;
		case 1:
			info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Newline;
			break;
		case 2:
			break;
		}
	}
	lineEndBefore(token) {
		var info = this.getPreviousToken(token);
		if(info == null) {
			return;
		}
		switch(info.whitespaceAfter._hx_index) {
		case 0:
			info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Newline;
			break;
		case 1:
			info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Newline;
			break;
		case 2:
			break;
		}
	}
	needsLineBreak(token) {
		if(token == null) {
			return false;
		}
		var _g = token.tok;
		if(_g._hx_index == 7) {
			var _g1 = _g.s;
			return true;
		}
		return false;
	}
	noLineEndAfter(token) {
		if(token.index < 0) {
			return;
		}
		var info = this.tokens[token.index];
		if(info == null) {
			return;
		}
		if(this.needsLineBreak(info.token)) {
			info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Newline;
			return;
		}
		switch(info.whitespaceAfter._hx_index) {
		case 0:
			return;
		case 1:
			break;
		case 2:
			if(info.spacesAfter <= 0) {
				info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.None;
			} else {
				info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Space;
				this.shouldHaveOneSpaceAfter(info);
			}
			break;
		}
	}
	noLineEndBefore(token) {
		var info = this.getPreviousToken(token);
		if(info == null) {
			return;
		}
		if(this.needsLineBreak(info.token)) {
			info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Newline;
			return;
		}
		switch(info.whitespaceAfter._hx_index) {
		case 0:
			return;
		case 1:
			break;
		case 2:
			if(info.spacesAfter <= 0) {
				info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.None;
			} else {
				info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Space;
				this.shouldHaveOneSpaceAfter(info);
			}
			break;
		}
	}
	emptyLinesAfter(token,count) {
		if(token.index < 0) {
			return;
		}
		var info = this.tokens[token.index];
		if(info == null) {
			return;
		}
		info.emptyLinesAfter = count;
	}
	emptyLinesBefore(token,count) {
		if(token.index <= 0) {
			this.leadingEmptyLInes = count;
			return;
		}
		var info = this.getPreviousToken(token);
		if(info == null) {
			return;
		}
		info.emptyLinesAfter = count;
	}
	emptyLinesAfterSubTree(token,count) {
		var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(token);
		if(lastToken == null) {
			return;
		}
		var info = this.tokens[lastToken.index];
		if(info == null) {
			return;
		}
		info.emptyLinesAfter = count;
	}
	tokenText(token,text) {
		if(token.index < 0) {
			return;
		}
		var info = this.tokens[token.index];
		if(info == null) {
			return;
		}
		info.text = text;
	}
	wrapAfter(token,wrap) {
		if(token.index < 0) {
			return;
		}
		var info = this.tokens[token.index];
		if(info == null) {
			return;
		}
		info.wrapAfter = wrap;
	}
	wrapBefore(token,wrap) {
		var prev = this.getPreviousToken(token);
		if(prev == null) {
			return;
		}
		prev.wrapAfter = wrap;
	}
	noWrappingBetween(tokenStart,tokenEnd,config,allowCommas) {
		if(allowCommas == null) {
			allowCommas = true;
		}
		if(tokenStart == null || tokenEnd == null) {
			return;
		}
		var index = tokenStart.index;
		while(index < tokenEnd.index) {
			var first = index == tokenStart.index;
			var info = this.tokens[index++];
			var next = this.tokens[index];
			if(info == null) {
				continue;
			}
			var _g = info.token.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:case 40:
					var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(info.token);
					if(lastChild != null) {
						if(lastChild.index > index) {
							index = lastChild.index;
						}
						continue;
					}
					break;
				default:
				}
				break;
			case 7:
				var _g2 = _g.s;
				continue;
			case 12:
				var lastChild1 = tokentree_utils_TokenTreeCheckUtils.getLastToken(info.token);
				if(lastChild1 != null) {
					if(lastChild1.index > index) {
						index = lastChild1.index;
					}
					continue;
				}
				break;
			case 13:
				if(allowCommas) {
					continue;
				}
				break;
			case 14:
				if(!first) {
					var close = this.getCloseToken(info.token);
					if(close != null) {
						index = close.index;
						continue;
					}
				}
				break;
			case 16:
				if(!first) {
					var close1 = this.getCloseToken(info.token);
					if(close1 != null) {
						index = close1.index;
						continue;
					}
				}
				break;
			case 18:
				if(!first) {
					var close2 = this.getCloseToken(info.token);
					if(close2 != null) {
						index = close2.index;
						continue;
					}
				}
				break;
			default:
			}
			info.wrapAfter = false;
			if(next != null) {
				switch(next.token.tok._hx_index) {
				case 16:
					switch(config.lineEnds.leftCurly) {
					case "after":case "none":
						break;
					case "before":case "both":
						continue;
					}
					break;
				case 17:
					switch(config.lineEnds.rightCurly) {
					case "after":case "both":
						continue;
					case "before":case "none":
						break;
					}
					break;
				default:
				}
			}
			switch(info.whitespaceAfter._hx_index) {
			case 0:
				break;
			case 1:
				break;
			case 2:
				if(info.spacesAfter <= 0) {
					info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.None;
				} else {
					info.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Space;
					this.shouldHaveOneSpaceAfter(info);
				}
				break;
			}
		}
	}
	additionalIndent(token,indent) {
		if(indent == null || token == null || token.index < 0) {
			return;
		}
		var info = this.tokens[token.index];
		if(info == null) {
			return;
		}
		info.additionalIndent = indent;
	}
	increaseIndentBetween(start,end,depth) {
		if(depth == 0 || start == null || start.index < 0 || end == null || end.index < 0) {
			return;
		}
		var startIndex = start.index;
		if(depth > 0) {
			++startIndex;
		}
		var endIndex = end.index;
		var _g = startIndex;
		var _g1 = endIndex;
		while(_g < _g1) {
			var index = _g++;
			var info = this.tokens[index];
			if(info == null) {
				continue;
			}
			info.additionalIndent += depth;
		}
	}
	findTokenAtOffset(offset) {
		var lastInfo = null;
		var _g = 0;
		var _g1 = this.tokens;
		while(_g < _g1.length) {
			var info = _g1[_g];
			++_g;
			if(info == null) {
				continue;
			}
			if(info.token.pos.min >= offset) {
				return lastInfo;
			}
			lastInfo = info;
		}
		return lastInfo;
	}
	isSameLine(first,second) {
		var startIndex = first.index;
		var endIndex = second.index;
		if(startIndex == endIndex) {
			return true;
		}
		if(startIndex < 0 || endIndex < 0) {
			return false;
		}
		if(startIndex > endIndex) {
			startIndex = second.index;
			endIndex = first.index;
		}
		while(startIndex < endIndex) {
			var currTok = this.tokens[startIndex++];
			if(currTok == null) {
				continue;
			}
			if(currTok.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
				return false;
			}
		}
		return true;
	}
	findLowestIndex(start) {
		var lowest = start;
		if(!start.hasChildren()) {
			return lowest;
		}
		var _g = 0;
		var _g1 = start.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var token = this.findLowestIndex(child);
			if(token.index < lowest.index) {
				lowest = token;
			}
		}
		return lowest;
	}
	calcLength(token) {
		if(token == null || token.index < 0) {
			return 0;
		}
		var current = this.tokens[token.index];
		if(current == null) {
			return 0;
		}
		var spaceAdd = 0;
		if(current.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Space) {
			spaceAdd = 1;
		}
		if(current.text == null) {
			current.text = "" + Std.string(current.token);
		}
		var length = current.text.length + spaceAdd;
		if(token.children == null || token.children.length <= 0) {
			return length;
		}
		var _g = 0;
		var _g1 = token.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			length += this.calcLength(child);
		}
		return length;
	}
	isMultilineToken(token) {
		if(token == null || token.index < 0) {
			return false;
		}
		var current = this.tokens[token.index];
		if(current == null) {
			return false;
		}
		if(current.text.indexOf("\r") >= 0 || current.text.indexOf("\n") >= 0) {
			return true;
		}
		return false;
	}
	calcLengthUntilNewline(token,stop) {
		if(token == null || token.index < 0) {
			return 0;
		}
		var endIndex = this.tokens.length - 1;
		if(stop != null) {
			endIndex = stop.index;
		}
		var index = token.index;
		var length = 0;
		while(index <= endIndex) {
			var current = this.tokens[index++];
			if(current == null) {
				continue;
			}
			if(current.text == null) {
				current.text = "" + Std.string(current.token);
			}
			if(current.text.indexOf("\r") >= 0) {
				length += current.text.indexOf("\r");
				break;
			}
			if(current.text.indexOf("\n") >= 0) {
				length += current.text.indexOf("\n");
				break;
			}
			length += current.spacesBefore;
			if(current.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Space) {
				length += current.spacesAfter;
			}
			length += current.text.length;
			if(current.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
				break;
			}
		}
		return length;
	}
	calcLengthBetween(tokenStart,tokenEnd) {
		if(tokenStart == null || tokenEnd == null) {
			return 0;
		}
		if(tokenStart.index < 0 || tokenEnd.index < 0) {
			return 0;
		}
		var length = 0;
		var _g = tokenStart.index;
		var _g1 = tokenEnd.index;
		while(_g < _g1) {
			var index = _g++;
			var current = this.tokens[index];
			if(current == null) {
				continue;
			}
			if(current.text == null) {
				current.text = "" + Std.string(current.token);
			}
			length += current.text.length;
			if(current.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Space) {
				++length;
			}
		}
		return length;
	}
	calcLineLength(token) {
		if(token == null || token.index < 0) {
			return 0;
		}
		var start = token.index - 1;
		while(start >= 0) {
			var info = this.tokens[start--];
			if(info == null) {
				continue;
			}
			if(info.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
				start += 2;
				break;
			}
		}
		var length = 0;
		_hx_loop2: while(start < this.tokens.length) {
			var info1 = this.tokens[start++];
			if(info1 == null) {
				continue;
			}
			length += info1.text.length;
			switch(info1.whitespaceAfter._hx_index) {
			case 0:
				break;
			case 1:
				length += info1.spacesAfter;
				break;
			case 2:
				break _hx_loop2;
			}
		}
		return length;
	}
	calcLineLengthBefore(token) {
		if(token == null || token.index < 0) {
			return 0;
		}
		var start = token.index - 1;
		var length = 0;
		_hx_loop1: while(start >= 0) {
			var info = this.tokens[start--];
			if(info == null) {
				continue;
			}
			switch(info.whitespaceAfter._hx_index) {
			case 0:
				break;
			case 1:
				length += info.spacesAfter;
				break;
			case 2:
				break _hx_loop1;
			}
			length += info.text.length;
		}
		return length;
	}
	calcLineLengthAfter(token) {
		if(token == null || token.index < 0) {
			return 0;
		}
		var start = token.index + 1;
		var length = 0;
		_hx_loop1: while(start < this.tokens.length) {
			var info = this.tokens[start++];
			if(info == null) {
				continue;
			}
			var tokenLength = info.text.length;
			var linefeed = info.text.lastIndexOf("\r");
			if(linefeed >= 0) {
				tokenLength -= linefeed;
			}
			linefeed = info.text.lastIndexOf("\n");
			if(linefeed >= 0) {
				tokenLength -= linefeed;
			}
			length += tokenLength;
			switch(info.whitespaceAfter._hx_index) {
			case 0:
				break;
			case 1:
				length += info.spacesAfter;
				break;
			case 2:
				break _hx_loop1;
			}
		}
		return length;
	}
	calcTokenLength(token) {
		if(token == null || token.index < 0) {
			return 0;
		}
		var info = this.tokens[token.index];
		if(info == null) {
			return 0;
		}
		var length = info.text.length;
		switch(info.whitespaceAfter._hx_index) {
		case 0:
			break;
		case 1:
			length += info.spacesAfter;
			break;
		case 2:
			break;
		}
		return length;
	}
	isNewLineBefore(token) {
		var info = this.getPreviousToken(token);
		if(info == null) {
			return false;
		}
		return info.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline;
	}
	isNewLineAfter(token) {
		var info = this.getTokenAt(token.index);
		if(info == null) {
			return false;
		}
		return info.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline;
	}
	isSameLineBetween(tokenStart,tokenEnd,exclude) {
		if(tokenStart == null || tokenEnd == null) {
			return true;
		}
		var start = tokenStart.index;
		var end = tokenEnd.index;
		if(exclude) {
			++start;
		}
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var index = _g++;
			var info = this.tokens[index];
			if(info == null) {
				continue;
			}
			if(info.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
				return false;
			}
			if(info.text == null) {
				continue;
			}
			if(info.text.indexOf("\r") >= 0 || info.text.indexOf("\n") >= 0) {
				return false;
			}
		}
		return true;
	}
	findLineStartToken(token) {
		if(token == null || token.index < 0) {
			return null;
		}
		var start = token.index - 1;
		while(true) {
			if(start < 0) {
				return this.tokens[0].token;
			}
			var info = this.tokens[start--];
			if(info == null) {
				continue;
			}
			switch(info.whitespaceAfter._hx_index) {
			case 0:
				break;
			case 1:
				break;
			case 2:
				return token;
			}
			token = info.token;
		}
	}
}
$hxClasses["formatter.codedata.TokenList"] = formatter_codedata_TokenList;
formatter_codedata_TokenList.__name__ = "formatter.codedata.TokenList";
Object.assign(formatter_codedata_TokenList.prototype, {
	__class__: formatter_codedata_TokenList
	,tokens: null
	,leadingEmptyLInes: null
	,closeTokenCache: null
});
class formatter_codedata_VerbatimCodeLine extends formatter_codedata_CodeLine {
	constructor(content) {
		super(0);
		this.content = content;
		this.verbatim = true;
	}
	applyWrapping(config,parsedCode,indenter) {
		return [this];
	}
	print(indenter,lineSeparator) {
		return this.content;
	}
}
$hxClasses["formatter.codedata.VerbatimCodeLine"] = formatter_codedata_VerbatimCodeLine;
formatter_codedata_VerbatimCodeLine.__name__ = "formatter.codedata.VerbatimCodeLine";
formatter_codedata_VerbatimCodeLine.__super__ = formatter_codedata_CodeLine;
Object.assign(formatter_codedata_VerbatimCodeLine.prototype, {
	__class__: formatter_codedata_VerbatimCodeLine
	,content: null
});
var formatter_codedata_WhitespaceAfterType = $hxEnums["formatter.codedata.WhitespaceAfterType"] = { __ename__ : true, __constructs__ : ["None","Space","Newline"]
	,None: {_hx_index:0,__enum__:"formatter.codedata.WhitespaceAfterType",toString:$estr}
	,Space: {_hx_index:1,__enum__:"formatter.codedata.WhitespaceAfterType",toString:$estr}
	,Newline: {_hx_index:2,__enum__:"formatter.codedata.WhitespaceAfterType",toString:$estr}
};
class formatter_config_Config {
	constructor() {
		this.excludes = [];
		this.readConfigFromString("{}","hxformat.json");
	}
	readConfigFromString(jsonContent,fileName) {
		var parser = new JsonParser_$1();
		var data = parser.fromJson(jsonContent,fileName);
		this.emptyLines = data.emptyLines;
		this.indentation = data.indentation;
		this.lineEnds = data.lineEnds;
		this.sameLine = data.sameLine;
		this.whitespace = data.whitespace;
		this.wrapping = data.wrapping;
		this.disableFormatting = data.disableFormatting;
		this.excludes = [];
		this.configFileName = fileName;
		var _g = 0;
		var _g1 = data.excludes;
		while(_g < _g1.length) {
			var exclude = _g1[_g];
			++_g;
			this.excludes.push(new EReg(exclude,""));
		}
	}
	isExcluded(fileName) {
		var _g = 0;
		var _g1 = this.excludes;
		while(_g < _g1.length) {
			var exclude = _g1[_g];
			++_g;
			if(exclude.match(fileName)) {
				return true;
			}
		}
		return false;
	}
}
$hxClasses["formatter.config.Config"] = formatter_config_Config;
formatter_config_Config.__name__ = "formatter.config.Config";
Object.assign(formatter_config_Config.prototype, {
	__class__: formatter_config_Config
	,emptyLines: null
	,indentation: null
	,lineEnds: null
	,sameLine: null
	,whitespace: null
	,wrapping: null
	,disableFormatting: null
	,excludes: null
	,configFileName: null
});
class formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$ {
	static remove(policy,removePolicy) {
		switch(removePolicy) {
		case "after":
			break;
		case "around":
			return "none";
		case "before":
			break;
		case "none":
			return policy;
		case "noneAfter":
			removePolicy = "after";
			break;
		case "noneBefore":
			removePolicy = "before";
			break;
		case "onlyAfter":
			removePolicy = "after";
			break;
		case "onlyBefore":
			removePolicy = "before";
			break;
		}
		switch(policy) {
		case "after":
			if(removePolicy == "after") {
				return "none";
			}
			break;
		case "around":
			if(removePolicy == "before") {
				return "after";
			}
			if(removePolicy == "after") {
				return "before";
			}
			break;
		case "before":
			if(removePolicy == "before") {
				return "none";
			}
			break;
		case "none":
			return "none";
		case "noneAfter":
			return "noneAfter";
		case "noneBefore":
			return "noneBefore";
		case "onlyAfter":
			if(removePolicy == "after") {
				return "none";
			}
			break;
		case "onlyBefore":
			if(removePolicy == "before") {
				return "none";
			}
			break;
		}
		return policy;
	}
	static add(policy,addPolicy) {
		switch(addPolicy) {
		case "after":
			break;
		case "around":
			return "none";
		case "before":
			break;
		case "none":
			return policy;
		case "noneAfter":
			addPolicy = "after";
			break;
		case "noneBefore":
			addPolicy = "before";
			break;
		case "onlyAfter":
			addPolicy = "after";
			break;
		case "onlyBefore":
			addPolicy = "before";
			break;
		}
		switch(policy) {
		case "after":
			if(addPolicy == "before") {
				return "around";
			}
			break;
		case "around":
			break;
		case "before":
			if(addPolicy == "after") {
				return "around";
			}
			break;
		case "none":
			return addPolicy;
		case "noneAfter":
			if(addPolicy == "before") {
				return "onlyBefore";
			}
			if(addPolicy == "after") {
				return "onlyAfter";
			}
			break;
		case "noneBefore":
			if(addPolicy == "before") {
				return "onlyBefore";
			}
			if(addPolicy == "after") {
				return "onlyAfter";
			}
			break;
		case "onlyAfter":
			if(addPolicy == "before") {
				return "around";
			}
			break;
		case "onlyBefore":
			if(addPolicy == "after") {
				return "around";
			}
			break;
		}
		return policy;
	}
}
$hxClasses["formatter.config._WhitespacePolicy.WhitespacePolicy_Impl_"] = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$;
formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.__name__ = "formatter.config._WhitespacePolicy.WhitespacePolicy_Impl_";
class formatter_marker_Indenter {
	constructor(config) {
		this.config = config;
		if(config.character.toLowerCase() == "tab") {
			config.character = "\t";
		}
	}
	setParsedCode(parsedCode) {
		this.parsedCode = parsedCode;
	}
	makeIndentString(count) {
		return StringTools.lpad("",this.config.character,this.config.character.length * count);
	}
	calcAbsoluteIndent(indent) {
		if(this.config.character == "\t") {
			return indent * this.config.tabWidth;
		}
		return indent * this.config.character.length;
	}
	calcIndent(token) {
		if(token == null) {
			return 0;
		}
		var _g = token.tok;
		if(_g._hx_index == 2) {
			var _g1 = _g.s;
			if(this.config.conditionalPolicy == "fixedZero") {
				return 0;
			}
			if(this.config.conditionalPolicy == "fixedZeroIncrease") {
				return this.calcConditionalLevel(token);
			}
			if(this.config.conditionalPolicy == "fixedZeroIncreaseBlocks") {
				if(this.hasBlockParent(token)) {
					return this.calcConditionalLevel(token);
				}
				return 0;
			}
		}
		token = this.findEffectiveParent(token);
		return this.calcFromCandidates(token);
	}
	calcConditionalLevel(token) {
		var count = -1;
		while(token != null && token.tok != null) {
			var _g = token.tok;
			if(_g._hx_index == 2) {
				if(_g.s == "if") {
					++count;
				}
			}
			token = token.parent;
		}
		if(count <= 0) {
			return 0;
		}
		return count;
	}
	calcConsecutiveConditionalLevel(token) {
		var count = -1;
		var maxCount = -1;
		while(token != null && token.tok != null) {
			var _g = token.tok;
			if(_g._hx_index == 2) {
				if(_g.s == "if") {
					++count;
				}
			} else {
				if(count > maxCount) {
					maxCount = count;
				}
				count = -1;
			}
			token = token.parent;
		}
		if(count > maxCount) {
			maxCount = count;
		}
		if(maxCount <= 0) {
			return 0;
		}
		return maxCount;
	}
	shouldAddTrailingWhitespace() {
		return this.config.trailingWhitespace;
	}
	findEffectiveParent(token) {
		if(token.tok == null) {
			return token.getFirstChild();
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				var parent = token.parent;
				if(parent.tok == null) {
					return token;
				}
				if(parent.tok._hx_index == 18) {
					if(this.parsedCode.tokenList.isNewLineBefore(token)) {
						return token;
					}
					return this.findEffectiveParent(token.parent);
				}
				break;
			case 3:
				var prev = this.parsedCode.tokenList.getPreviousToken(token);
				if(prev == null) {
					return token;
				}
				if(prev.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
					return token;
				}
				var metadata = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.At);
				if(metadata != null) {
					if(!this.parsedCode.tokenList.isSameLineBetween(metadata,token,false)) {
						return token;
					}
					prev = this.parsedCode.tokenList.getPreviousToken(metadata);
					if(prev == null) {
						return token;
					}
					if(prev.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
						return token;
					}
				}
				var parent1 = token.parent;
				if(parent1.tok == null) {
					return token;
				}
				var _g1 = parent1.tok;
				switch(_g1._hx_index) {
				case 0:
					if(_g1.k._hx_index != 4) {
						return token;
					}
					break;
				case 5:
					var _g11 = _g1.op;
					return token;
				default:
				}
				return this.findEffectiveParent(token.parent);
			case 5:
				var parent2 = token.parent;
				if(parent2.tok == null) {
					return token;
				}
				if(parent2 != null && parent2.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo))) {
					return this.findEffectiveParent(token.parent);
				}
				break;
			case 4:case 21:
				return this.findEffectiveParent(token.parent);
			default:
			}
			break;
		case 2:
			switch(_g.s) {
			case "else":case "elseif":case "end":
				return this.findEffectiveParent(token.parent);
			default:
			}
			break;
		case 6:
			var _g4 = _g.s;
			var next = this.parsedCode.tokenList.getNextToken(token);
			if(next == null) {
				return token;
			}
			var _g2 = next.token.tok;
			if(_g2._hx_index == 0) {
				switch(_g2.k._hx_index) {
				case 4:
					return this.findEffectiveParent(next.token);
				case 21:
					return this.findEffectiveParent(next.token);
				default:
					return token;
				}
			} else {
				return token;
			}
			break;
		case 7:
			var _g3 = _g.s;
			var next1 = this.parsedCode.tokenList.getNextToken(token);
			if(next1 == null) {
				return token;
			}
			var _g5 = next1.token.tok;
			if(_g5._hx_index == 0) {
				switch(_g5.k._hx_index) {
				case 4:
					return this.findEffectiveParent(next1.token);
				case 21:
					return this.findEffectiveParent(next1.token);
				default:
					return token;
				}
			} else {
				return token;
			}
			break;
		case 12:
			return this.findEffectiveParent(token.parent);
		case 16:
			var parent3 = token.parent;
			if(parent3.tok == null) {
				return token;
			}
			var type = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(token);
			switch(type._hx_index) {
			case 0:
				break;
			case 1:
				return token.parent;
			case 2:
				return token;
			case 3:
				return token;
			case 4:
				break;
			}
			var _g6 = parent3.tok;
			switch(_g6._hx_index) {
			case 0:
				switch(_g6.k._hx_index) {
				case 0:
					if(this.parsedCode.tokenList.isNewLineBefore(parent3)) {
						return parent3;
					}
					return this.findEffectiveParent(parent3);
				case 3:case 4:
					return this.findEffectiveParent(parent3);
				case 5:case 6:case 7:
					return this.findEffectiveParent(parent3);
				case 14:
					return this.findEffectiveParent(parent3);
				case 20:case 21:
					return this.findEffectiveParent(parent3);
				case 22:
					if(parent3.parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction))) {
						return this.findEffectiveParent(parent3.parent);
					}
					break;
				default:
				}
				break;
			case 1:
				var _g41 = _g6.c;
				if(_g41._hx_index == 3) {
					var _g51 = _g41.s;
					if(parent3.parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction))) {
						return this.findEffectiveParent(parent3.parent);
					}
				}
				break;
			case 5:
				var _g12 = _g6.op;
				switch(_g12._hx_index) {
				case 4:
					var access = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(parent3)),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef));
					if(access != null) {
						return access;
					}
					break;
				case 20:
					var _g21 = _g12.op;
					var access1 = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(parent3)),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef));
					if(access1 != null) {
						return access1;
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 15:case 17:
			return this.findEffectiveParent(token.parent);
		case 19:
			return this.findEffectiveParent(token.parent);
		default:
		}
		return token;
	}
	countLineBreaks(indentingTokensCandidates,indentComplexValueExpressions) {
		var count = 0;
		var prevToken = null;
		var currentToken = null;
		var mustIndent;
		var lastIndentingToken = null;
		var _g = 0;
		while(_g < indentingTokensCandidates.length) {
			var token = indentingTokensCandidates[_g];
			++_g;
			prevToken = currentToken;
			if(prevToken == null) {
				prevToken = token;
			}
			currentToken = token;
			mustIndent = false;
			var _g1 = prevToken.tok;
			switch(_g1._hx_index) {
			case 0:
				switch(_g1.k._hx_index) {
				case 0:
					if(currentToken.tok._hx_index == 18) {
						if(this.parsedCode.tokenList.isSameLineBetween(currentToken,prevToken,false)) {
							continue;
						}
						if(!this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
							var firstToken = this.parsedCode.tokenList.getPreviousToken(prevToken);
							while(firstToken != null && !this.parsedCode.tokenList.isNewLineBefore(firstToken.token)) firstToken = this.parsedCode.tokenList.getPreviousToken(firstToken.token);
							var brOpen = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(prevToken,haxeparser_TokenDef.BrOpen);
							if(brOpen != null) {
								if(!this.parsedCode.tokenList.isSameLineBetween(prevToken,brOpen,false)) {
									continue;
								}
							}
							return count + this.calcIndent(firstToken.token);
						}
					}
					break;
				case 3:
					if(prevToken.index == currentToken.index) {
						continue;
					}
					var _g2 = currentToken.tok;
					if(_g2._hx_index == 5) {
						if(_g2.op._hx_index == 4) {
							if(indentComplexValueExpressions) {
								mustIndent = true;
							}
						} else if(this.parsedCode.tokenList.isSameLineBetween(currentToken,prevToken,false)) {
							var elseTok = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(prevToken,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse));
							if(elseTok != null) {
								if(this.parsedCode.tokenList.isSameLineBetween(prevToken,elseTok,false)) {
									continue;
								}
								if(indentComplexValueExpressions) {
									mustIndent = true;
								}
							}
							var brOpen1 = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(prevToken,haxeparser_TokenDef.BrOpen);
							if(brOpen1 != null) {
								var type = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(brOpen1);
								if(type._hx_index == 0) {
									continue;
								}
							}
						}
					} else if(this.parsedCode.tokenList.isSameLineBetween(currentToken,prevToken,false)) {
						var elseTok1 = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(prevToken,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse));
						if(elseTok1 != null) {
							if(this.parsedCode.tokenList.isSameLineBetween(prevToken,elseTok1,false)) {
								continue;
							}
							if(indentComplexValueExpressions) {
								mustIndent = true;
							}
						}
						var brOpen2 = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(prevToken,haxeparser_TokenDef.BrOpen);
						if(brOpen2 != null) {
							var type1 = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(brOpen2);
							if(type1._hx_index == 0) {
								continue;
							}
						}
					}
					break;
				case 4:
					continue;
				case 14:
					var _g3 = currentToken.tok;
					switch(_g3._hx_index) {
					case 5:
						var op = _g3.op;
						if(indentComplexValueExpressions) {
							mustIndent = true;
						}
						break;
					case 18:
						var type2 = tokentree_utils_TokenTreeCheckUtils.getPOpenType(currentToken);
						switch(type2._hx_index) {
						case 0:
							break;
						case 1:
							mustIndent = true;
							break;
						case 2:
							break;
						case 3:
							mustIndent = true;
							break;
						case 4:
							mustIndent = true;
							break;
						case 5:
							mustIndent = true;
							break;
						case 6:
							mustIndent = true;
							break;
						case 7:
							mustIndent = true;
							break;
						case 8:
							break;
						case 9:
							break;
						}
						break;
					default:
					}
					break;
				case 15:case 16:
					if(!this.config.indentCaseLabels) {
						continue;
					}
					break;
				case 21:
					if(currentToken.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTry))) {
						continue;
					}
					break;
				default:
				}
				break;
			case 1:
				var _g21 = _g1.c;
				if(_g21._hx_index == 3) {
					switch(_g21.s) {
					case "from":case "to":
						if(this.isAbstractFromTo(token) && this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
							mustIndent = true;
						}
						break;
					default:
					}
				}
				break;
			case 10:
				var _g4 = currentToken.tok;
				switch(_g4._hx_index) {
				case 0:
					switch(_g4.k._hx_index) {
					case 15:case 16:
						continue;
					case 10:case 22:case 28:
						if(!this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
							continue;
						}
						break;
					default:
						if(this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
							++count;
							continue;
						}
					}
					break;
				case 5:
					var _g11 = _g4.op;
					switch(_g11._hx_index) {
					case 4:
						if(this.parsedCode.tokenList.isSameLineBetween(currentToken,prevToken,false)) {
							continue;
						}
						if(!this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
							var firstToken1 = this.parsedCode.tokenList.getPreviousToken(prevToken);
							while(firstToken1 != null && !this.parsedCode.tokenList.isNewLineBefore(firstToken1.token)) firstToken1 = this.parsedCode.tokenList.getPreviousToken(firstToken1.token);
							return count + this.calcIndent(firstToken1.token);
						}
						break;
					case 20:
						var _g22 = _g11.op;
						if(this.parsedCode.tokenList.isSameLineBetween(currentToken,prevToken,false)) {
							continue;
						}
						if(!this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
							var firstToken2 = this.parsedCode.tokenList.getPreviousToken(prevToken);
							while(firstToken2 != null && !this.parsedCode.tokenList.isNewLineBefore(firstToken2.token)) firstToken2 = this.parsedCode.tokenList.getPreviousToken(firstToken2.token);
							return count + this.calcIndent(firstToken2.token);
						}
						break;
					default:
						if(this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
							++count;
							continue;
						}
					}
					break;
				case 10:
					if(!(prevToken.pos.min == currentToken.pos.min && this.parsedCode.tokenList.isNewLineBefore(currentToken))) {
						continue;
					}
					break;
				case 16:case 18:
					if(this.parsedCode.tokenList.isSameLine(currentToken,prevToken)) {
						continue;
					}
					mustIndent = true;
					break;
				default:
					if(this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
						++count;
						continue;
					}
				}
				break;
			case 11:
				var _g5 = currentToken.tok;
				if(_g5._hx_index == 0) {
					switch(_g5.k._hx_index) {
					case 15:case 16:
						if(lastIndentingToken != null && lastIndentingToken.pos.min == prevToken.pos.min) {
							continue;
						}
						mustIndent = true;
						break;
					default:
					}
				}
				break;
			case 12:case 14:
				if(currentToken.tok._hx_index == 18) {
					if(this.parsedCode.tokenList.isSameLineBetween(currentToken,prevToken,false)) {
						continue;
					}
					if(!this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
						var firstToken3 = this.parsedCode.tokenList.getPreviousToken(prevToken);
						while(firstToken3 != null && !this.parsedCode.tokenList.isNewLineBefore(firstToken3.token)) firstToken3 = this.parsedCode.tokenList.getPreviousToken(firstToken3.token);
						var brOpen3 = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(prevToken,haxeparser_TokenDef.BrOpen);
						if(brOpen3 != null) {
							if(!this.parsedCode.tokenList.isSameLineBetween(prevToken,brOpen3,false)) {
								continue;
							}
						}
						return count + this.calcIndent(firstToken3.token);
					}
				}
				break;
			case 16:
				var _g6 = currentToken.tok;
				switch(_g6._hx_index) {
				case 0:
					switch(_g6.k._hx_index) {
					case 0:case 3:case 4:case 5:case 6:case 7:case 10:case 14:case 20:case 21:case 28:
						var type3 = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(prevToken);
						if(type3._hx_index == 2) {
							var brClose = this.parsedCode.tokenList.getCloseToken(prevToken);
							if(brClose != null && !this.parsedCode.tokenList.isSameLine(prevToken,brClose) && !this.config.indentObjectLiteral) {
								continue;
							}
						} else {
							continue;
						}
						break;
					default:
					}
					break;
				case 5:
					var _g12 = _g6.op;
					switch(_g12._hx_index) {
					case 4:
						var type4 = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(prevToken);
						switch(type4._hx_index) {
						case 1:
							continue;
						case 2:
							var brClose1 = this.parsedCode.tokenList.getCloseToken(prevToken);
							if(brClose1 != null && !this.parsedCode.tokenList.isSameLine(prevToken,brClose1) && !this.config.indentObjectLiteral) {
								continue;
							}
							break;
						default:
						}
						break;
					case 20:
						var _g23 = _g12.op;
						var type5 = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(prevToken);
						switch(type5._hx_index) {
						case 1:
							continue;
						case 2:
							var brClose2 = this.parsedCode.tokenList.getCloseToken(prevToken);
							if(brClose2 != null && !this.parsedCode.tokenList.isSameLine(prevToken,brClose2) && !this.config.indentObjectLiteral) {
								continue;
							}
							break;
						default:
						}
						break;
					default:
					}
					break;
				case 11:
					var type6 = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(prevToken);
					switch(type6._hx_index) {
					case 1:
						continue;
					case 2:
						var brClose3 = this.parsedCode.tokenList.getCloseToken(prevToken);
						if(brClose3 != null && !this.parsedCode.tokenList.isSameLine(prevToken,brClose3) && !this.config.indentObjectLiteral) {
							continue;
						}
						break;
					default:
					}
					break;
				case 12:
					var type7 = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(prevToken);
					if(type7._hx_index == 2) {
						var brClose4 = this.parsedCode.tokenList.getCloseToken(prevToken);
						if(brClose4 != null && !this.parsedCode.tokenList.isSameLine(prevToken,brClose4) && !this.config.indentObjectLiteral) {
							continue;
						}
					} else {
						continue;
					}
					break;
				case 14:case 18:
					if(!this.parsedCode.tokenList.isNewLineBefore(prevToken)) {
						continue;
					}
					break;
				default:
				}
				break;
			default:
			}
			if(!mustIndent && this.parsedCode.tokenList.isSameLineBetween(currentToken,prevToken,false)) {
				continue;
			}
			if(!this.isIndentingToken(currentToken)) {
				continue;
			}
			lastIndentingToken = currentToken;
			++count;
		}
		return count;
	}
	isFieldLevelVar(indentingTokensCandidates) {
		var tokens = indentingTokensCandidates.slice();
		tokens.reverse();
		var _g = 0;
		while(_g < tokens.length) {
			var token = tokens[_g];
			++_g;
			var _g1 = token.tok;
			switch(_g1._hx_index) {
			case 0:
				switch(_g1.k._hx_index) {
				case 0:
					return false;
				case 2:
					return true;
				case 41:
					break;
				default:
				}
				break;
			case 1:
				var _g3 = _g1.c;
				var tmp = _g3._hx_index == 3;
				break;
			case 5:
				if(_g1.op._hx_index == 4) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	calcFromCandidates(token) {
		var indentingTokensCandidates = this.findIndentingCandidates(token);
		if(indentingTokensCandidates.length <= 0) {
			return 0;
		}
		var indentComplexValueExpressions = this.config.indentComplexValueExpressions;
		if(this.isFieldLevelVar(indentingTokensCandidates)) {
			indentComplexValueExpressions = true;
		}
		if(indentComplexValueExpressions) {
			indentingTokensCandidates = this.compressElseIfCandidates(indentingTokensCandidates);
		}
		var count = this.countLineBreaks(indentingTokensCandidates,indentComplexValueExpressions);
		if(this.hasConditional(indentingTokensCandidates)) {
			switch(this.config.conditionalPolicy) {
			case "aligned":
				break;
			case "alignedDecrease":
				--count;
				break;
			case "alignedIncrease":
				break;
			case "alignedNestedIncrease":
				count += this.calcConsecutiveConditionalLevel(token);
				break;
			case "fixedZero":
				break;
			case "fixedZeroIncrease":
				--count;
				var conditionalLevel = this.calcConditionalLevel(token);
				if(conditionalLevel == count) {
					++count;
				}
				break;
			case "fixedZeroIncreaseBlocks":
				if(this.hasBlock(indentingTokensCandidates)) {
					--count;
					var conditionalLevel1 = this.calcConditionalLevel(token);
					if(conditionalLevel1 == count) {
						++count;
					}
				}
				break;
			}
		}
		return count;
	}
	hasConditional(tokens) {
		var _g = 0;
		while(_g < tokens.length) {
			var token = tokens[_g];
			++_g;
			var _g1 = token.tok;
			if(_g1._hx_index == 2) {
				if(_g1.s == "if") {
					return true;
				}
			}
		}
		return false;
	}
	hasBlock(tokens) {
		var _g = 0;
		while(_g < tokens.length) {
			var token = tokens[_g];
			++_g;
			if(token.tok._hx_index == 16) {
				return true;
			}
		}
		return false;
	}
	hasBlockParent(token) {
		var parent = token.parent;
		while(parent != null && parent.tok != null) if(parent.tok._hx_index == 16) {
			return true;
		} else {
			parent = parent.parent;
		}
		return false;
	}
	findIndentingCandidates(token) {
		var indentingTokensCandidates = [];
		var lastIndentingToken = null;
		if(token.tok._hx_index == 10) {
			lastIndentingToken = token;
		}
		indentingTokensCandidates.push(token);
		var parent = token;
		while(parent.parent != null && parent.parent.tok != null) {
			parent = parent.parent;
			if(parent.pos.min > token.pos.min) {
				continue;
			}
			if(this.isIndentingToken(parent)) {
				if(lastIndentingToken != null) {
					if(lastIndentingToken.is(haxeparser_TokenDef.Dot) && parent.is(haxeparser_TokenDef.Dot)) {
						continue;
					}
				}
				indentingTokensCandidates.push(parent);
				lastIndentingToken = parent;
			} else if(this.parsedCode.tokenList.isNewLineBefore(parent)) {
				indentingTokensCandidates.push(parent);
				lastIndentingToken = parent;
			}
		}
		return indentingTokensCandidates;
	}
	compressElseIfCandidates(indentingTokensCandidates) {
		var compressedCandidates = [];
		var state = formatter_marker_IndentationCompressElseIf.Copy;
		var _g = 0;
		while(_g < indentingTokensCandidates.length) {
			var token = indentingTokensCandidates[_g];
			++_g;
			var _g1 = token.tok;
			if(_g1._hx_index == 0) {
				switch(_g1.k._hx_index) {
				case 3:
					switch(state._hx_index) {
					case 0:
						if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse)) != null) {
							state = formatter_marker_IndentationCompressElseIf.SkipElseIf;
						}
						break;
					case 1:
						state = formatter_marker_IndentationCompressElseIf.SkipElseIf;
						break;
					case 2:
						continue;
					}
					break;
				case 4:
					if(state == formatter_marker_IndentationCompressElseIf.SeenElse || state == formatter_marker_IndentationCompressElseIf.SkipElseIf) {
						state = formatter_marker_IndentationCompressElseIf.SkipElseIf;
						continue;
					}
					state = formatter_marker_IndentationCompressElseIf.SeenElse;
					break;
				default:
					state = formatter_marker_IndentationCompressElseIf.Copy;
				}
			} else {
				state = formatter_marker_IndentationCompressElseIf.Copy;
			}
			compressedCandidates.push(token);
		}
		return compressedCandidates;
	}
	isIndentingToken(token) {
		if(token == null) {
			return false;
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return true;
			case 2:
				return true;
			case 3:case 4:
				return true;
			case 5:
				var parent = token.parent;
				if(parent != null && parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo))) {
					return false;
				}
				return true;
			case 6:case 7:
				return true;
			case 10:case 28:
				return true;
			case 14:case 15:case 16:
				return true;
			case 20:case 21:case 24:
				return true;
			case 22:
				var _g1 = token.parent.tok;
				if(_g1._hx_index == 0) {
					if(_g1.k._hx_index == 0) {
						return false;
					} else {
						return true;
					}
				} else {
					return true;
				}
				break;
			default:
			}
			break;
		case 1:
			var _g5 = _g.c;
			if(_g5._hx_index == 3) {
				switch(_g5.s) {
				case "from":case "to":
					return this.isAbstractFromTo(token);
				default:
				}
			}
			break;
		case 2:
			if(_g.s == "if") {
				switch(this.config.conditionalPolicy) {
				case "aligned":
					return false;
				case "alignedDecrease":case "alignedIncrease":
					return true;
				case "alignedNestedIncrease":
					return false;
				case "fixedZero":
					return false;
				case "fixedZeroIncrease":
					return true;
				case "fixedZeroIncreaseBlocks":
					return this.hasBlockParent(token);
				}
			}
			break;
		case 5:
			var _g11 = _g.op;
			switch(_g11._hx_index) {
			case 4:
				return true;
			case 9:
				return tokentree_utils_TokenTreeCheckUtils.isTypeParameter(token);
			case 20:
				var _g2 = _g11.op;
				return true;
			default:
			}
			break;
		case 11:
			if(token.parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCase)) || token.parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDefault))) {
				return true;
			}
			var info = this.parsedCode.tokenList.getTokenAt(token.index);
			if(info == null) {
				return false;
			}
			switch(info.whitespaceAfter._hx_index) {
			case 0:case 1:
				return false;
			case 2:
				return true;
			}
			break;
		case 12:
			return true;
		case 10:case 14:case 16:case 18:
			return true;
		default:
		}
		return false;
	}
	isAbstractFromTo(token) {
		var parent = token.parent;
		if(parent == null || parent.tok == null) {
			return false;
		}
		var _g = parent.tok;
		if(_g._hx_index == 1) {
			var _g1 = _g.c;
			if(_g1._hx_index == 3) {
				var _g2 = _g1.s;
			} else {
				return false;
			}
		} else {
			return false;
		}
		parent = parent.parent;
		if(parent == null || parent.tok == null) {
			return false;
		}
		var _g3 = parent.tok;
		if(_g3._hx_index == 0) {
			if(_g3.k._hx_index == 39) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
}
$hxClasses["formatter.marker.Indenter"] = formatter_marker_Indenter;
formatter_marker_Indenter.__name__ = "formatter.marker.Indenter";
Object.assign(formatter_marker_Indenter.prototype, {
	__class__: formatter_marker_Indenter
	,config: null
	,parsedCode: null
});
var formatter_marker_IndentationCompressElseIf = $hxEnums["formatter.marker.IndentationCompressElseIf"] = { __ename__ : true, __constructs__ : ["Copy","SeenElse","SkipElseIf"]
	,Copy: {_hx_index:0,__enum__:"formatter.marker.IndentationCompressElseIf",toString:$estr}
	,SeenElse: {_hx_index:1,__enum__:"formatter.marker.IndentationCompressElseIf",toString:$estr}
	,SkipElseIf: {_hx_index:2,__enum__:"formatter.marker.IndentationCompressElseIf",toString:$estr}
};
class formatter_marker_MarkerBase {
	constructor(config,parsedCode,indenter) {
		this.config = config;
		this.parsedCode = parsedCode;
		this.indenter = indenter;
	}
	getCloseToken(token) {
		return this.parsedCode.tokenList.getCloseToken(token);
	}
	getNextToken(token) {
		return this.parsedCode.tokenList.getNextToken(token);
	}
	getPreviousToken(token) {
		return this.parsedCode.tokenList.getPreviousToken(token);
	}
	getTokenAt(index) {
		return this.parsedCode.tokenList.getTokenAt(index);
	}
	whitespace(token,where) {
		this.parsedCode.tokenList.whitespace(token,where);
	}
	spacesBefore(token,count) {
		this.parsedCode.tokenList.spacesBefore(token,count);
	}
	lineEndAfter(token) {
		this.parsedCode.tokenList.lineEndAfter(token);
	}
	lineEndBefore(token) {
		this.parsedCode.tokenList.lineEndBefore(token);
	}
	noLineEndAfter(token) {
		this.parsedCode.tokenList.noLineEndAfter(token);
	}
	noLineEndBefore(token) {
		this.parsedCode.tokenList.noLineEndBefore(token);
	}
	emptyLinesAfter(token,count) {
		this.parsedCode.tokenList.emptyLinesAfter(token,count);
	}
	emptyLinesBefore(token,count) {
		this.parsedCode.tokenList.emptyLinesBefore(token,count);
	}
	emptyLinesAfterSubTree(token,count) {
		this.parsedCode.tokenList.emptyLinesAfterSubTree(token,count);
	}
	tokenText(token,text) {
		this.parsedCode.tokenList.tokenText(token,text);
	}
	wrapAfter(token,wrap) {
		this.parsedCode.tokenList.wrapAfter(token,wrap);
	}
	wrapBefore(token,wrap) {
		this.parsedCode.tokenList.wrapBefore(token,wrap);
	}
	noWrappingBetween(tokenStart,tokenEnd,allowCommas) {
		if(allowCommas == null) {
			allowCommas = true;
		}
		this.parsedCode.tokenList.noWrappingBetween(tokenStart,tokenEnd,this.config,allowCommas);
	}
	additionalIndent(token,indent) {
		this.parsedCode.tokenList.additionalIndent(token,indent);
	}
	increaseIndentBetween(start,end,depth) {
		this.parsedCode.tokenList.increaseIndentBetween(start,end,depth);
	}
	findTokenAtOffset(offset) {
		return this.parsedCode.tokenList.findTokenAtOffset(offset);
	}
	isSameLine(first,second) {
		return this.parsedCode.tokenList.isSameLine(first,second);
	}
	calcLength(token) {
		return this.parsedCode.tokenList.calcLength(token);
	}
	isMultilineToken(token) {
		return this.parsedCode.tokenList.isMultilineToken(token);
	}
	calcLengthUntilNewline(token,stop) {
		return this.parsedCode.tokenList.calcLengthUntilNewline(token,stop);
	}
	calcLengthBetween(tokenStart,tokenEnd) {
		return this.parsedCode.tokenList.calcLengthBetween(tokenStart,tokenEnd);
	}
	calcLineLength(token) {
		return this.parsedCode.tokenList.calcLineLength(token);
	}
	calcLineLengthBefore(token) {
		return this.parsedCode.tokenList.calcLineLengthBefore(token);
	}
	calcLineLengthAfter(token) {
		return this.parsedCode.tokenList.calcLineLengthAfter(token);
	}
	calcTokenLength(token) {
		return this.parsedCode.tokenList.calcTokenLength(token);
	}
	isNewLineBefore(token) {
		return this.parsedCode.tokenList.isNewLineBefore(token);
	}
	isNewLineAfter(token) {
		return this.parsedCode.tokenList.isNewLineAfter(token);
	}
	isSameLineBetween(tokenStart,tokenEnd,exclude) {
		return this.parsedCode.tokenList.isSameLineBetween(tokenStart,tokenEnd,exclude);
	}
	findLineStartToken(token) {
		return this.parsedCode.tokenList.findLineStartToken(token);
	}
}
$hxClasses["formatter.marker.MarkerBase"] = formatter_marker_MarkerBase;
formatter_marker_MarkerBase.__name__ = "formatter.marker.MarkerBase";
Object.assign(formatter_marker_MarkerBase.prototype, {
	__class__: formatter_marker_MarkerBase
	,config: null
	,parsedCode: null
	,indenter: null
});
class formatter_marker_MarkAdditionalIndentation extends formatter_marker_MarkerBase {
	constructor(config,parsedCode,indenter) {
		super(config,parsedCode,indenter);
	}
	run() {
		var _gthis = this;
		this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 2) {
				if(_g.s == "if") {
					var tmp = _gthis.calcDepthDifferenceLeftCurly(token);
					_gthis.markBlockBreakingConditional(token,tmp);
					var tmp1 = _gthis.calcDepthDifferenceRightCurly(token);
					_gthis.markBlockBreakingConditional(token,tmp1);
				}
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
	}
	markBlockBreakingConditional(token,depthDifference) {
		if(token.children == null) {
			return;
		}
		var start = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.Sharp("end"));
		if(start == null) {
			return;
		}
		if(depthDifference == 0) {
			return;
		}
		if(depthDifference < 0) {
			start = token;
		}
		var parent = token.parent;
		var topLevelToken = null;
		while(parent != null && parent.tok != null) {
			topLevelToken = parent;
			parent = parent.parent;
		}
		if(topLevelToken == null) {
			return;
		}
		var sibling = topLevelToken.nextSibling;
		while(sibling != null) if(sibling.tok._hx_index == 17) {
			this.increaseIndentBetween(start,sibling,depthDifference);
			return;
		} else {
			sibling = sibling.nextSibling;
		}
		this.increaseIndentBetween(start,tokentree_utils_TokenTreeCheckUtils.getLastToken(topLevelToken),depthDifference);
	}
	calcDepthDifferenceLeftCurly(token) {
		if(token.children == null) {
			return 0;
		}
		var depthIncrease = 0;
		var _g = 0;
		var _g1 = token.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var brOpens = child.filterCallback(function(token1,index) {
				var _g2 = token1.tok;
				switch(_g2._hx_index) {
				case 2:
					var _g11 = _g2.s;
					return tokentree_FilterResult.SKIP_SUBTREE;
				case 16:
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				default:
					return tokentree_FilterResult.GO_DEEPER;
				}
			});
			if(brOpens.length <= 0) {
				continue;
			}
			var depth = 0;
			var _g3 = 0;
			while(_g3 < brOpens.length) {
				var brOpen = brOpens[_g3];
				++_g3;
				if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(brOpen,haxeparser_TokenDef.BrClose) != null) {
					continue;
				}
				++depth;
			}
			if(depth > depthIncrease) {
				depthIncrease = depth;
			}
		}
		return depthIncrease;
	}
	calcDepthDifferenceRightCurly(token) {
		if(token.children == null) {
			return 0;
		}
		var depthDecrease = 0;
		var _g = 0;
		var _g1 = token.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var brClose = child.filterCallback(function(token1,index) {
				if(token1.tok._hx_index == 17) {
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
			});
			if(brClose.length <= 0) {
				continue;
			}
			var depth = 0;
			var _g2 = 0;
			while(_g2 < brClose.length) {
				var brClose1 = brClose[_g2];
				++_g2;
				if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(brClose1),haxeparser_TokenDef.BrOpen) != null) {
					continue;
				}
				++depth;
			}
			if(depth > depthDecrease) {
				depthDecrease = depth;
			}
		}
		return -depthDecrease;
	}
}
$hxClasses["formatter.marker.MarkAdditionalIndentation"] = formatter_marker_MarkAdditionalIndentation;
formatter_marker_MarkAdditionalIndentation.__name__ = "formatter.marker.MarkAdditionalIndentation";
formatter_marker_MarkAdditionalIndentation.__super__ = formatter_marker_MarkerBase;
Object.assign(formatter_marker_MarkAdditionalIndentation.prototype, {
	__class__: formatter_marker_MarkAdditionalIndentation
});
class formatter_marker_MarkEmptyLines extends formatter_marker_MarkerBase {
	constructor(config,parsedCode,indenter) {
		super(config,parsedCode,indenter);
	}
	run() {
		this.keepExistingEmptyLines();
		var packs = this.parsedCode.root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdPackage)],tokentree_TokenFilterMode.ALL);
		packs.reverse();
		var _g = 0;
		while(_g < packs.length) {
			var pack = packs[_g];
			++_g;
			if(tokentree_utils_TokenTreeCheckUtils.isMetadata(pack)) {
				continue;
			}
			this.emptyLinesBefore(pack,this.config.emptyLines.beforePackage);
			this.emptyLinesAfter(pack,this.config.emptyLines.afterPackage);
		}
		this.betweenTypes();
		this.markImports();
		this.markClassesAndAbstracts();
		this.markMacroClasses();
		this.markInterfaces();
		this.markEnums();
		this.markTypedefs();
		this.markSharp();
		if(this.config.emptyLines.beforeDocCommentEmptyLines != "ignore" || this.config.emptyLines.afterFieldsWithDocComments != "ignore") {
			this.markDocComments();
		}
		this.markMultilineComments();
		this.markFileHeader();
		if(this.config.emptyLines.beforeRightCurly == "remove") {
			this.markRightCurly();
		}
		if(this.config.emptyLines.afterLeftCurly == "remove") {
			this.markLeftCurly();
		}
		if(this.config.emptyLines.afterReturn == "remove") {
			this.markReturn();
		}
		if(this.config.emptyLines.beforeBlocks == "remove" || this.config.emptyLines.afterBlocks == "remove") {
			this.markAroundBlocks();
		}
	}
	finalRun(codeLines) {
		if(codeLines.lines.length <= 0) {
			return;
		}
		var _g = 0;
		var _g1 = codeLines.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			if(line.verbatim) {
				continue;
			}
			if(line.emptyLinesAfter > this.config.emptyLines.maxAnywhereInFile) {
				line.emptyLinesAfter = this.config.emptyLines.maxAnywhereInFile;
			}
		}
		var lastLine = codeLines.lines[codeLines.lines.length - 1];
		if(lastLine.verbatim) {
			return;
		}
		lastLine.emptyLinesAfter = this.config.emptyLines.finalNewline ? 1 : 0;
	}
	markImports() {
		var imports = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 0) {
				switch(_g.k._hx_index) {
				case 13:case 35:
					if(tokentree_utils_TokenTreeCheckUtils.isMetadata(token)) {
						return tokentree_FilterResult.SKIP_SUBTREE;
					} else {
						return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
					}
					break;
				default:
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		if(imports.length <= 0) {
			return;
		}
		var lastImport = imports[imports.length - 1];
		var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(lastImport);
		var afterImport = this.getNextToken(lastChild);
		if(afterImport != null) {
			var _g1 = afterImport.token.tok;
			if(_g1._hx_index == 2) {
				switch(_g1.s) {
				case "else":case "elseif":
					break;
				case "end":
					this.emptyLinesAfterSubTree(afterImport.token,this.config.emptyLines.importAndUsing.beforeType);
					break;
				default:
					this.emptyLinesAfterSubTree(lastImport,this.config.emptyLines.importAndUsing.beforeType);
				}
			} else {
				this.emptyLinesAfterSubTree(lastImport,this.config.emptyLines.importAndUsing.beforeType);
			}
		}
		lastImport = null;
		var prevInfo = null;
		var _g2 = 0;
		while(_g2 < imports.length) {
			var token1 = imports[_g2];
			++_g2;
			var newInfo = this.getImportInfo(token1);
			var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(token1);
			var next = this.getNextToken(lastToken);
			if(next != null) {
				var _g3 = next.token.tok;
				if(_g3._hx_index == 2) {
					if(_g3.s == "end") {
						newInfo.token = next.token;
					}
				}
			}
			if(prevInfo == null) {
				prevInfo = newInfo;
				continue;
			}
			if(prevInfo.isImport == newInfo.isImport) {
				switch(this.config.emptyLines.importAndUsing.betweenImportsLevel) {
				case "all":
					this.emptyLinesAfterSubTree(prevInfo.token,this.config.emptyLines.importAndUsing.betweenImports);
					break;
				case "fifthLevelPackage":
					if(prevInfo.fifthLevelPackage != newInfo.fifthLevelPackage) {
						this.emptyLinesAfterSubTree(prevInfo.token,this.config.emptyLines.importAndUsing.betweenImports);
					}
					break;
				case "firstLevelPackage":
					if(prevInfo.firstLevelPackage != newInfo.firstLevelPackage) {
						this.emptyLinesAfterSubTree(prevInfo.token,this.config.emptyLines.importAndUsing.betweenImports);
					}
					break;
				case "fourthLevelPackage":
					if(prevInfo.fourthLevelPackage != newInfo.fourthLevelPackage) {
						this.emptyLinesAfterSubTree(prevInfo.token,this.config.emptyLines.importAndUsing.betweenImports);
					}
					break;
				case "fullPackage":
					if(prevInfo.fullPackage != newInfo.fullPackage) {
						this.emptyLinesAfterSubTree(prevInfo.token,this.config.emptyLines.importAndUsing.betweenImports);
					}
					break;
				case "secondLevelPackage":
					if(prevInfo.secondLevelPackage != newInfo.secondLevelPackage) {
						this.emptyLinesAfterSubTree(prevInfo.token,this.config.emptyLines.importAndUsing.betweenImports);
					}
					break;
				case "thirdLevelPackage":
					if(prevInfo.thirdLevelPackage != newInfo.thirdLevelPackage) {
						this.emptyLinesAfterSubTree(prevInfo.token,this.config.emptyLines.importAndUsing.betweenImports);
					}
					break;
				}
			} else {
				this.emptyLinesAfterSubTree(prevInfo.token,this.config.emptyLines.importAndUsing.beforeUsing);
			}
			prevInfo = newInfo;
		}
	}
	getImportInfo(token) {
		var info = { token : token, isImport : false, firstLevelPackage : "", secondLevelPackage : "", thirdLevelPackage : "", fourthLevelPackage : "", fifthLevelPackage : "", fullPackage : "", moduleName : ""};
		var _g = token.tok;
		if(_g._hx_index == 0) {
			switch(_g.k._hx_index) {
			case 13:
				info.isImport = true;
				break;
			case 35:
				info.isImport = false;
				break;
			default:
			}
		}
		var parts = [];
		token = token.getFirstChild();
		while(true) {
			var _g2 = token.tok;
			switch(_g2._hx_index) {
			case 0:
				var _g5 = _g2.k;
				parts.push("" + Std.string(token));
				break;
			case 1:
				var _g3 = _g2.c;
				if(_g3._hx_index == 3) {
					var text = _g3.s;
					parts.push(text);
				}
				break;
			default:
			}
			token = token.getFirstChild();
			if(token == null || !token.is(haxeparser_TokenDef.Dot)) {
				break;
			}
			token = token.getFirstChild();
			if(token == null) {
				break;
			}
		}
		info.moduleName = parts.pop();
		info.fullPackage = parts.join(".");
		if(parts.length > 0) {
			info.firstLevelPackage = parts[0];
		}
		if(parts.length > 1) {
			info.secondLevelPackage = parts.slice(0,2).join(".");
		} else {
			info.secondLevelPackage = info.firstLevelPackage;
		}
		if(parts.length > 2) {
			info.thirdLevelPackage = parts.slice(0,3).join(".");
		} else {
			info.thirdLevelPackage = info.secondLevelPackage;
		}
		if(parts.length > 3) {
			info.fourthLevelPackage = parts.slice(0,4).join(".");
		} else {
			info.fourthLevelPackage = info.thirdLevelPackage;
		}
		if(parts.length > 4) {
			info.fifthLevelPackage = parts.slice(0,5).join(".");
		} else {
			info.fifthLevelPackage = info.fourthLevelPackage;
		}
		return info;
	}
	markClassesAndAbstracts() {
		var classes = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 0) {
				switch(_g.k._hx_index) {
				case 1:case 39:
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				default:
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < classes.length) {
			var c = classes[_g1];
			++_g1;
			if(tokentree_utils_TokenTreeCheckUtils.isTypeEnumAbstract(c)) {
				this.markEnumAbstracts(c);
				continue;
			}
			var typeConfig = null;
			var _g2 = c.tok;
			if(_g2._hx_index == 0) {
				switch(_g2.k._hx_index) {
				case 1:
					typeConfig = this.config.emptyLines.classEmptyLines;
					if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(c),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdExtern)) != null) {
						this.markExternClass(c,this.config.emptyLines.externClassEmptyLines);
						continue;
					}
					break;
				case 39:
					typeConfig = this.config.emptyLines.abstractEmptyLines;
					break;
				default:
					continue;
				}
			} else {
				continue;
			}
			var block = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(c),haxeparser_TokenDef.BrOpen);
			this.markBeginAndEndType(block,typeConfig.beginType,typeConfig.endType);
			var finalTokDef = haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFinal);
			var fields = this.findClassAndAbstractFields(c);
			var prevToken = null;
			var prevTokenType = null;
			var currToken = null;
			var currTokenType = null;
			var _g21 = 0;
			while(_g21 < fields.length) {
				var field = fields[_g21];
				++_g21;
				currToken = field;
				currTokenType = tokentree_utils_FieldUtils.getFieldType(field,tokentree_utils_TokenFieldVisibility.PRIVATE);
				this.markClassFieldEmptyLines(prevToken,prevTokenType,currToken,currTokenType,typeConfig);
				prevToken = currToken;
				prevTokenType = currTokenType;
			}
		}
	}
	markMacroClasses() {
		var classes = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 0) {
				if(_g.k._hx_index == 1) {
					if(token.parent == null || token.parent.tok == null) {
						return tokentree_FilterResult.GO_DEEPER;
					}
					var _g1 = token.parent.tok;
					if(_g1._hx_index == 0) {
						if(_g1.k._hx_index == 40) {
							return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
						} else {
							return tokentree_FilterResult.GO_DEEPER;
						}
					} else {
						return tokentree_FilterResult.GO_DEEPER;
					}
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g2 = 0;
		while(_g2 < classes.length) {
			var c = classes[_g2];
			++_g2;
			var typeConfig = this.config.emptyLines.macroClassEmptyLines;
			var block = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(c),haxeparser_TokenDef.BrOpen);
			this.markBeginAndEndType(block,typeConfig.beginType,typeConfig.endType);
			var finalTokDef = haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFinal);
			var functions = this.findClassAndAbstractFields(c);
			var prevToken = null;
			var prevTokenType = null;
			var currToken = null;
			var currTokenType = null;
			var _g3 = 0;
			while(_g3 < functions.length) {
				var func = functions[_g3];
				++_g3;
				currToken = func;
				currTokenType = tokentree_utils_FieldUtils.getFieldType(func,tokentree_utils_TokenFieldVisibility.PRIVATE);
				this.markClassFieldEmptyLines(prevToken,prevTokenType,currToken,currTokenType,typeConfig);
				prevToken = currToken;
				prevTokenType = currTokenType;
			}
		}
	}
	findClassAndAbstractFields(c) {
		return c.filterCallback(function(token,index) {
			var _g = token.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:case 2:
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				case 41:
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				default:
					return tokentree_FilterResult.GO_DEEPER;
				}
				break;
			case 1:
				var _g2 = _g.c;
				if(_g2._hx_index == 3) {
					if(_g2.s == "final") {
						return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
					} else {
						return tokentree_FilterResult.GO_DEEPER;
					}
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
				break;
			case 21:
				return tokentree_FilterResult.SKIP_SUBTREE;
			default:
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
	}
	markBeginAndEndType(brOpen,beginType,endType) {
		if(brOpen == null) {
			return;
		}
		this.emptyLinesAfter(brOpen,beginType);
		var brClose = this.getCloseToken(brOpen);
		if(brClose == null) {
			return;
		}
		this.emptyLinesBefore(brClose,endType);
	}
	markClassFieldEmptyLines(prevToken,prevTokenType,currToken,currTokenType,conf) {
		if(prevToken == null) {
			return;
		}
		var prevVar = false;
		var currVar = false;
		var prevStatic = false;
		var currStatic = false;
		var prevPrivate = false;
		var currPrivate = false;
		switch(prevTokenType._hx_index) {
		case 0:
			var isExtern = prevTokenType.isExtern;
			var isFinal = prevTokenType.isFinal;
			var isOverride = prevTokenType.isOverride;
			var isInline = prevTokenType.isInline;
			var isStatic = prevTokenType.isStatic;
			var visibility = prevTokenType.visibility;
			var name = prevTokenType.name;
			prevVar = false;
			prevStatic = isStatic;
			prevPrivate = visibility == tokentree_utils_TokenFieldVisibility.PRIVATE;
			break;
		case 1:
			var isExtern1 = prevTokenType.isExtern;
			var isFinal1 = prevTokenType.isFinal;
			var isInline1 = prevTokenType.isInline;
			var isStatic1 = prevTokenType.isStatic;
			var visibility1 = prevTokenType.visibility;
			var name1 = prevTokenType.name;
			prevVar = true;
			prevStatic = isStatic1;
			prevPrivate = visibility1 == tokentree_utils_TokenFieldVisibility.PRIVATE;
			break;
		case 2:
			var setter = prevTokenType.setter;
			var getter = prevTokenType.getter;
			var isStatic2 = prevTokenType.isStatic;
			var visibility2 = prevTokenType.visibility;
			var name2 = prevTokenType.name;
			prevVar = true;
			prevStatic = isStatic2;
			prevPrivate = visibility2 == tokentree_utils_TokenFieldVisibility.PRIVATE;
			break;
		case 3:
			return;
		}
		switch(currTokenType._hx_index) {
		case 0:
			var isExtern2 = currTokenType.isExtern;
			var isFinal2 = currTokenType.isFinal;
			var isOverride1 = currTokenType.isOverride;
			var isInline2 = currTokenType.isInline;
			var isStatic3 = currTokenType.isStatic;
			var visibility3 = currTokenType.visibility;
			var name3 = currTokenType.name;
			currVar = false;
			currStatic = isStatic3;
			currPrivate = visibility3 == tokentree_utils_TokenFieldVisibility.PRIVATE;
			break;
		case 1:
			var isExtern3 = currTokenType.isExtern;
			var isFinal3 = currTokenType.isFinal;
			var isInline3 = currTokenType.isInline;
			var isStatic4 = currTokenType.isStatic;
			var visibility4 = currTokenType.visibility;
			var name4 = currTokenType.name;
			currVar = true;
			currStatic = isStatic4;
			currPrivate = visibility4 == tokentree_utils_TokenFieldVisibility.PRIVATE;
			break;
		case 2:
			var setter1 = currTokenType.setter;
			var getter1 = currTokenType.getter;
			var isStatic5 = currTokenType.isStatic;
			var visibility5 = currTokenType.visibility;
			var name5 = currTokenType.name;
			currVar = true;
			currStatic = isStatic5;
			currPrivate = visibility5 == tokentree_utils_TokenFieldVisibility.PRIVATE;
			break;
		case 3:
			return;
		}
		if(!currVar) {
			this.markLineCommentsBefore(currToken,this.config.emptyLines.lineCommentsBetweenFunctions);
			this.markLineCommentsAfter(currToken,1);
		}
		prevToken = this.skipSharpFields(prevToken);
		if(prevToken == null) {
			return;
		}
		if(conf.existingBetweenFields == "keep") {
			if(this.hasEmptyLinesBetweenFields(prevToken,currToken)) {
				this.emptyLinesAfterSubTree(prevToken,1);
				return;
			}
		}
		if(prevVar != currVar) {
			this.emptyLinesAfterSubTree(prevToken,conf.afterVars);
			return;
		}
		if(prevVar) {
			if(prevStatic != currStatic) {
				this.emptyLinesAfterSubTree(prevToken,conf.afterStaticVars);
				return;
			}
			if(prevStatic) {
				this.emptyLinesAfterSubTree(prevToken,conf.betweenStaticVars);
				return;
			}
			if(prevPrivate != currPrivate) {
				this.emptyLinesAfterSubTree(prevToken,conf.afterPrivateVars);
				return;
			}
			this.emptyLinesAfterSubTree(prevToken,conf.betweenVars);
			return;
		} else {
			if(prevStatic != currStatic) {
				this.emptyLinesAfterSubTree(prevToken,conf.afterStaticFunctions);
				return;
			}
			if(prevStatic) {
				this.emptyLinesAfterSubTree(prevToken,conf.betweenStaticFunctions);
				return;
			}
			if(prevPrivate != currPrivate) {
				this.emptyLinesAfterSubTree(prevToken,conf.afterPrivateFunctions);
				return;
			}
			this.emptyLinesAfterSubTree(prevToken,conf.betweenFunctions);
			return;
		}
	}
	hasEmptyLinesBetweenFields(prevToken,currToken) {
		var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(prevToken);
		if(lastToken == null) {
			return false;
		}
		var prevLine = this.parsedCode.getLinePos(lastToken.pos.max).line;
		var currLine = this.parsedCode.getLinePos(currToken.pos.min).line;
		var _g = 0;
		var _g1 = this.parsedCode.emptyLines;
		while(_g < _g1.length) {
			var emptyLine = _g1[_g];
			++_g;
			if(prevLine >= emptyLine) {
				continue;
			}
			if(currLine > emptyLine) {
				return true;
			}
			return false;
		}
		return false;
	}
	markLineCommentsBefore(token,policy) {
		if(policy == "none") {
			return;
		}
		if(token.previousSibling == null) {
			return;
		}
		var prev = token.previousSibling;
		while(prev != null) {
			var _g = prev.tok;
			switch(_g._hx_index) {
			case 6:
				var _g2 = _g.s;
				break;
			case 7:
				var _g1 = _g.s;
				var prevInfo = this.getPreviousToken(prev);
				if(prevInfo == null || prevInfo.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
					switch(policy) {
					case "keep":
						if(this.parsedCode.linesBetweenOriginal(prev,token) > 1) {
							this.emptyLinesAfter(prev,1);
						}
						break;
					case "none":
						break;
					case "one":
						this.emptyLinesAfter(prev,1);
						break;
					}
				}
				return;
			default:
				return;
			}
			prev = prev.previousSibling;
		}
	}
	markLineCommentsAfter(token,count) {
		if(count <= 0) {
			return;
		}
		if(token.nextSibling == null) {
			return;
		}
		var next = token.nextSibling;
		var _g = next.tok;
		if(_g._hx_index == 7) {
			var _g1 = _g.s;
			if(this.isNewLineBefore(next)) {
				this.emptyLinesBefore(next,count);
			}
		}
	}
	markExternClass(c,conf) {
		var block = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(c),haxeparser_TokenDef.BrOpen);
		if(block == null) {
			return;
		}
		this.markBeginAndEndType(block,conf.beginType,conf.endType);
		var finalTokDef = haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFinal);
		var fields = block.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar),finalTokDef],tokentree_TokenFilterMode.FIRST);
		var prevToken = null;
		var prevTokenType = null;
		var currToken = null;
		var currTokenType = null;
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			currToken = field;
			currTokenType = tokentree_utils_FieldUtils.getFieldType(field,tokentree_utils_TokenFieldVisibility.PUBLIC);
			this.markInterfaceEmptyLines(prevToken,prevTokenType,currToken,currTokenType,conf);
			prevToken = currToken;
			prevTokenType = currTokenType;
		}
	}
	markInterfaces() {
		var interfaces = this.parsedCode.root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdInterface)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < interfaces.length) {
			var i = interfaces[_g];
			++_g;
			this.markExternClass(i,this.config.emptyLines.interfaceEmptyLines);
		}
	}
	markInterfaceEmptyLines(prevToken,prevTokenType,currToken,currTokenType,conf) {
		if(prevToken == null) {
			return;
		}
		var prevVar = false;
		var currVar = false;
		switch(prevTokenType._hx_index) {
		case 0:
			var _g17 = prevTokenType.isExtern;
			var _g16 = prevTokenType.isFinal;
			var _g15 = prevTokenType.isOverride;
			var _g14 = prevTokenType.isInline;
			var _g13 = prevTokenType.isStatic;
			var _g12 = prevTokenType.visibility;
			var name = prevTokenType.name;
			prevVar = false;
			break;
		case 1:
			var _g5 = prevTokenType.isExtern;
			var _g4 = prevTokenType.isFinal;
			var _g3 = prevTokenType.isInline;
			var _g2 = prevTokenType.isStatic;
			var _g1 = prevTokenType.visibility;
			var name1 = prevTokenType.name;
			prevVar = true;
			break;
		case 2:
			var _g10 = prevTokenType.setter;
			var _g9 = prevTokenType.getter;
			var _g8 = prevTokenType.isStatic;
			var _g7 = prevTokenType.visibility;
			var name2 = prevTokenType.name;
			prevVar = true;
			break;
		case 3:
			return;
		}
		switch(currTokenType._hx_index) {
		case 0:
			var _g35 = currTokenType.isExtern;
			var _g34 = currTokenType.isFinal;
			var _g33 = currTokenType.isOverride;
			var _g32 = currTokenType.isInline;
			var _g31 = currTokenType.isStatic;
			var _g30 = currTokenType.visibility;
			var name3 = currTokenType.name;
			currVar = false;
			break;
		case 1:
			var _g23 = currTokenType.isExtern;
			var _g22 = currTokenType.isFinal;
			var _g21 = currTokenType.isInline;
			var _g20 = currTokenType.isStatic;
			var _g19 = currTokenType.visibility;
			var name4 = currTokenType.name;
			currVar = true;
			break;
		case 2:
			var _g28 = currTokenType.setter;
			var _g27 = currTokenType.getter;
			var _g26 = currTokenType.isStatic;
			var _g25 = currTokenType.visibility;
			var name5 = currTokenType.name;
			currVar = true;
			break;
		case 3:
			return;
		}
		prevToken = this.skipSharpFields(prevToken);
		if(prevToken == null) {
			return;
		}
		if(conf.existingBetweenFields == "keep") {
			if(this.hasEmptyLinesBetweenFields(prevToken,currToken)) {
				this.emptyLinesAfterSubTree(prevToken,1);
				return;
			}
		}
		if(prevVar != currVar) {
			this.emptyLinesAfterSubTree(prevToken,conf.afterVars);
			return;
		}
		if(prevVar) {
			this.emptyLinesAfterSubTree(prevToken,conf.betweenVars);
			return;
		} else {
			this.emptyLinesAfterSubTree(prevToken,conf.betweenFunctions);
			return;
		}
	}
	markEnumAbstracts(token) {
		var block = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(token),haxeparser_TokenDef.BrOpen);
		this.markBeginAndEndType(block,this.config.emptyLines.enumAbstractEmptyLines.beginType,this.config.emptyLines.enumAbstractEmptyLines.endType);
		var functions = token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar)],tokentree_TokenFilterMode.FIRST);
		var prevToken = null;
		var prevTokenType = null;
		var currToken = null;
		var currTokenType = null;
		var _g = 0;
		while(_g < functions.length) {
			var func = functions[_g];
			++_g;
			currToken = func;
			currTokenType = tokentree_utils_FieldUtils.getFieldType(func,tokentree_utils_TokenFieldVisibility.PUBLIC);
			this.markEnumAbstractFieldEmptyLines(prevToken,prevTokenType,currToken,currTokenType);
			prevToken = currToken;
			prevTokenType = currTokenType;
		}
	}
	markEnumAbstractFieldEmptyLines(prevToken,prevTokenType,currToken,currTokenType) {
		if(prevToken == null) {
			return;
		}
		var prevVar = false;
		var currVar = false;
		switch(prevTokenType._hx_index) {
		case 0:
			var isExtern = prevTokenType.isExtern;
			var isFinal = prevTokenType.isFinal;
			var isOverride = prevTokenType.isOverride;
			var isInline = prevTokenType.isInline;
			var isStatic = prevTokenType.isStatic;
			var visibility = prevTokenType.visibility;
			var name = prevTokenType.name;
			prevVar = false;
			break;
		case 1:
			var isExtern1 = prevTokenType.isExtern;
			var isFinal1 = prevTokenType.isFinal;
			var isInline1 = prevTokenType.isInline;
			var isStatic1 = prevTokenType.isStatic;
			var visibility1 = prevTokenType.visibility;
			var name1 = prevTokenType.name;
			prevVar = true;
			break;
		case 2:
			var setter = prevTokenType.setter;
			var getter = prevTokenType.getter;
			var isStatic2 = prevTokenType.isStatic;
			var visibility2 = prevTokenType.visibility;
			var name2 = prevTokenType.name;
			prevVar = true;
			break;
		case 3:
			return;
		}
		switch(currTokenType._hx_index) {
		case 0:
			var isExtern2 = currTokenType.isExtern;
			var isFinal2 = currTokenType.isFinal;
			var isOverride1 = currTokenType.isOverride;
			var isInline2 = currTokenType.isInline;
			var isStatic3 = currTokenType.isStatic;
			var visibility3 = currTokenType.visibility;
			var name3 = currTokenType.name;
			currVar = false;
			break;
		case 1:
			var isExtern3 = currTokenType.isExtern;
			var isFinal3 = currTokenType.isFinal;
			var isInline3 = currTokenType.isInline;
			var isStatic4 = currTokenType.isStatic;
			var visibility4 = currTokenType.visibility;
			var name4 = currTokenType.name;
			currVar = true;
			break;
		case 2:
			var setter1 = currTokenType.setter;
			var getter1 = currTokenType.getter;
			var isStatic5 = currTokenType.isStatic;
			var visibility5 = currTokenType.visibility;
			var name5 = currTokenType.name;
			currVar = true;
			break;
		case 3:
			return;
		}
		prevToken = this.skipSharpFields(prevToken);
		if(prevToken == null) {
			return;
		}
		if(prevVar != currVar) {
			this.emptyLinesAfterSubTree(prevToken,this.config.emptyLines.enumAbstractEmptyLines.afterVars);
			return;
		}
		if(prevVar) {
			this.emptyLinesAfterSubTree(prevToken,this.config.emptyLines.enumAbstractEmptyLines.betweenVars);
			return;
		} else {
			this.emptyLinesAfterSubTree(prevToken,this.config.emptyLines.enumAbstractEmptyLines.betweenFunctions);
			return;
		}
	}
	markEnums() {
		var enums = this.parsedCode.root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdEnum)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < enums.length) {
			var e = enums[_g];
			++_g;
			if(e.parent.tok != null) {
				var _g1 = e.parent.tok;
				switch(_g1._hx_index) {
				case 1:
					var _g11 = _g1.c;
					continue;
				case 11:case 21:
					continue;
				default:
				}
			}
			var block = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(e),haxeparser_TokenDef.BrOpen);
			if(block == null) {
				continue;
			}
			this.markEnumFields(block,this.config.emptyLines.enumEmptyLines);
		}
	}
	markEnumFields(block,config) {
		this.markBeginAndEndType(block,config.beginType,config.endType);
		if(block.children == null || block.children.length <= 0) {
			return;
		}
		var prevToken = null;
		var _g = 0;
		var _g1 = block.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 6:
				var _g21 = _g2.s;
				continue;
			case 7:
				var _g11 = _g2.s;
				continue;
			case 17:
				return;
			default:
			}
			if(prevToken == null) {
				prevToken = child;
				continue;
			}
			if(config.existingBetweenFields == "keep") {
				if(this.hasEmptyLinesBetweenFields(prevToken,child)) {
					this.emptyLinesAfterSubTree(prevToken,1);
					return;
				}
			}
			this.emptyLinesAfterSubTree(prevToken,config.betweenFields);
			prevToken = child;
		}
	}
	markTypedefs() {
		var typedefs = this.parsedCode.root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < typedefs.length) {
			var t = typedefs[_g];
			++_g;
			var block = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(t),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign)),haxeparser_TokenDef.BrOpen);
			if(block == null) {
				continue;
			}
			this.markEnumFields(block,this.config.emptyLines.typedefEmptyLines);
		}
	}
	skipSharpFields(prevToken) {
		var next = prevToken.nextSibling;
		if(next == null) {
			next = prevToken.parent;
			var _g = next.tok;
			if(_g._hx_index == 2) {
				var _g1 = _g.s;
				next = next.nextSibling;
			} else {
				return prevToken;
			}
		}
		var _g2 = next.tok;
		if(_g2._hx_index == 2) {
			switch(_g2.s) {
			case "end":
				return next;
			case "if":
				return prevToken;
			default:
				return null;
			}
		}
		return prevToken;
	}
	betweenTypes() {
		if(this.config.emptyLines.betweenTypes <= 0 && this.config.emptyLines.betweenSingleLineTypes <= 0) {
			return;
		}
		var types = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:case 2:
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				case 1:case 26:case 27:case 31:case 39:
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				case 41:
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				default:
					return tokentree_FilterResult.GO_DEEPER;
				}
				break;
			case 1:
				var _g2 = _g.c;
				if(_g2._hx_index == 3) {
					if(_g2.s == "final") {
						return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
					} else {
						return tokentree_FilterResult.GO_DEEPER;
					}
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
				break;
			default:
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		if(types.length <= 1) {
			return;
		}
		var prevTypeInfo = null;
		var _g1 = 0;
		while(_g1 < types.length) {
			var type = types[_g1];
			++_g1;
			var newTypeInfo = this.getTypeInfo(type);
			this.markLineCommentsBefore(type,this.config.emptyLines.lineCommentsBetweenTypes);
			this.markLineCommentsAfter(type,1);
			if(prevTypeInfo == null) {
				prevTypeInfo = newTypeInfo;
				continue;
			}
			var next = this.getNextToken(prevTypeInfo.lastToken);
			if(next != null) {
				var _g3 = next.token.tok;
				if(_g3._hx_index == 2) {
					switch(_g3.s) {
					case "else":case "elseif":
						prevTypeInfo = newTypeInfo;
						continue;
					default:
					}
				}
			}
			var emptyLines = this.config.emptyLines.betweenTypes;
			if(prevTypeInfo.oneLine && newTypeInfo.oneLine) {
				emptyLines = this.config.emptyLines.betweenSingleLineTypes;
			}
			this.emptyLinesAfterSubTree(prevTypeInfo.lastToken,emptyLines);
			this.markLineCommentsAfter(prevTypeInfo.typeToken,1);
			prevTypeInfo = newTypeInfo;
		}
	}
	getTypeInfo(token) {
		var info = { lastToken : tokentree_utils_TokenTreeCheckUtils.getLastToken(token), typeToken : token, oneLine : false};
		var start = this.parsedCode.tokenList.findLowestIndex(token);
		if(this.isSameLine(start,info.lastToken)) {
			info.oneLine = true;
		}
		while(true) {
			var next = this.getNextToken(info.lastToken);
			if(next == null) {
				break;
			}
			var _g = next.token.tok;
			if(_g._hx_index == 2) {
				if(_g.s == "end") {
					info.lastToken = next.token;
				} else {
					break;
				}
			} else {
				break;
			}
		}
		return info;
	}
	markLeftCurly() {
		var brOpens = this.parsedCode.root.filter([haxeparser_TokenDef.BrOpen],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < brOpens.length) {
			var br = brOpens[_g];
			++_g;
			this.emptyLinesAfter(br,0);
		}
	}
	markRightCurly() {
		var brCloses = this.parsedCode.root.filter([haxeparser_TokenDef.BrClose],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < brCloses.length) {
			var br = brCloses[_g];
			++_g;
			this.emptyLinesBefore(br,0);
		}
	}
	markReturn() {
		var returns = this.parsedCode.root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdReturn)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < returns.length) {
			var ret = returns[_g];
			++_g;
			if(this.isReturnBody(ret)) {
				continue;
			}
			var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(ret);
			if(lastChild == null) {
				continue;
			}
			var next = this.getNextToken(lastChild);
			if(next == null) {
				continue;
			}
			if(next.token.tok._hx_index == 17) {
				this.emptyLinesAfterSubTree(ret,0);
			}
		}
	}
	isReturnBody(ret) {
		var parent = ret.parent;
		while(parent != null && parent.tok != null) {
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				if(_g.k._hx_index == 0) {
					return true;
				} else {
					parent = parent.parent;
				}
				break;
			case 16:
				return false;
			default:
				parent = parent.parent;
			}
		}
		return true;
	}
	markSharp() {
		var sharps = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 2) {
				var _g1 = _g.s;
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g2 = 0;
		while(_g2 < sharps.length) {
			var sharp = sharps[_g2];
			++_g2;
			var prev = this.getPreviousToken(sharp);
			if(prev != null && prev.whitespaceAfter != formatter_codedata_WhitespaceAfterType.Newline) {
				continue;
			}
			var _g3 = sharp.tok;
			if(_g3._hx_index == 2) {
				switch(_g3.s) {
				case "else":
					this.emptyLinesBefore(sharp,this.config.emptyLines.conditionalsEmptyLines.beforeElse);
					this.emptyLinesAfter(sharp,this.config.emptyLines.conditionalsEmptyLines.afterElse);
					break;
				case "elseif":
					this.emptyLinesBefore(sharp,this.config.emptyLines.conditionalsEmptyLines.beforeElse);
					this.emptyLinesAfterSubTree(sharp.getFirstChild(),this.config.emptyLines.conditionalsEmptyLines.afterIf);
					break;
				case "end":
					this.emptyLinesBefore(sharp,this.config.emptyLines.conditionalsEmptyLines.beforeEnd);
					break;
				case "error":
					this.emptyLinesBefore(sharp,this.config.emptyLines.conditionalsEmptyLines.beforeError);
					this.emptyLinesAfterSubTree(sharp,this.config.emptyLines.conditionalsEmptyLines.afterError);
					break;
				case "if":
					this.emptyLinesAfterSubTree(sharp.getFirstChild(),this.config.emptyLines.conditionalsEmptyLines.afterIf);
					break;
				default:
				}
			}
		}
	}
	markDocComments() {
		var comments = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 6) {
				var text = _g.s;
				if(StringTools.startsWith(text,"*")) {
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < comments.length) {
			var comment = comments[_g1];
			++_g1;
			var effectiveToken = null;
			effectiveToken = comment;
			if(comment.previousSibling != null) {
				if(comment.parent != null && comment.parent.tok != null) {
					var _g2 = comment.parent.tok;
					if(_g2._hx_index == 2) {
						var _g11 = _g2.s;
						if(comment.parent.getFirstChild() == comment.previousSibling) {
							effectiveToken = comment.parent;
						}
					}
				}
			} else if(comment.parent == null || comment.parent.tok == null) {
				continue;
			}
			if(comment.nextSibling == null) {
				continue;
			}
			var next = comment.nextSibling;
			var found = true;
			while(next != null) {
				var _g3 = next.tok;
				switch(_g3._hx_index) {
				case 0:
					switch(_g3.k._hx_index) {
					case 0:
						break;
					case 1:
						break;
					case 2:
						break;
					case 26:
						break;
					case 27:
						break;
					case 31:
						break;
					case 39:
						break;
					case 41:
						break;
					default:
						found = false;
					}
					break;
				case 1:
					var _g31 = _g3.c;
					if(_g31._hx_index == 3) {
						var _g4 = _g31.s;
					} else {
						found = false;
					}
					break;
				case 2:
					var _g12 = _g3.s;
					next = null;
					break;
				case 7:
					var _g5 = _g3.s;
					next = next.nextSibling;
					continue;
				default:
					found = false;
				}
				break;
			}
			if(!found) {
				continue;
			}
			switch(this.config.emptyLines.beforeDocCommentEmptyLines) {
			case "ignore":
				break;
			case "none":
				this.emptyLinesBefore(effectiveToken,0);
				break;
			case "one":
				this.emptyLinesBefore(effectiveToken,1);
				break;
			}
			if(next == null) {
				continue;
			}
			var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(next);
			var nextInfo = this.getNextToken(lastToken);
			if(nextInfo == null) {
				continue;
			}
			var _g13 = nextInfo.token.tok;
			if(_g13._hx_index == 2) {
				switch(_g13.s) {
				case "end":
					lastToken = nextInfo.token;
					break;
				case "error":
					break;
				case "if":
					break;
				default:
					continue;
				}
			}
			switch(this.config.emptyLines.afterFieldsWithDocComments) {
			case "ignore":
				break;
			case "none":
				this.emptyLinesAfter(lastToken,0);
				break;
			case "one":
				this.emptyLinesAfter(lastToken,1);
				break;
			}
		}
	}
	markMultilineComments() {
		var comments = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 6) {
				var text = _g.s;
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < comments.length) {
			var comment = comments[_g1];
			++_g1;
			var sibling = comment.nextSibling;
			if(sibling == null) {
				continue;
			}
			if(!this.isNewLineAfter(comment)) {
				continue;
			}
			var _g2 = sibling.tok;
			if(_g2._hx_index == 6) {
				var s = _g2.s;
				this.emptyLinesAfter(comment,this.config.emptyLines.betweenMultilineComments);
			} else {
				continue;
			}
		}
	}
	markAroundBlocks() {
		var _gthis = this;
		this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 0) {
				switch(_g.k._hx_index) {
				case 0:
					break;
				case 3:
					_gthis.removeEmptyLinesAroundBlock(token.children[1],_gthis.config.emptyLines.beforeBlocks,"keep");
					var block = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.previousSibling(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse)));
					if(block != null) {
						_gthis.removeEmptyLinesAroundBlock(block,"keep",_gthis.config.emptyLines.afterBlocks);
					}
					break;
				case 4:
					var tmp = token.getFirstChild();
					_gthis.removeEmptyLinesAroundBlock(tmp,_gthis.config.emptyLines.beforeBlocks,"keep");
					break;
				case 5:
					if(token.parent == null || !token.parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo))) {
						_gthis.removeEmptyLinesAroundBlock(token.children[1],_gthis.config.emptyLines.beforeBlocks,"keep");
					}
					break;
				case 6:
					var tmp1 = token.getFirstChild();
					_gthis.removeEmptyLinesAroundBlock(tmp1,_gthis.config.emptyLines.beforeBlocks,"keep");
					var block1 = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.previousSibling(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.lastChild(token));
					_gthis.removeEmptyLinesAroundBlock(block1,"keep",_gthis.config.emptyLines.afterBlocks);
					break;
				case 7:
					_gthis.removeEmptyLinesAroundBlock(token.children[1],_gthis.config.emptyLines.beforeBlocks,"keep");
					break;
				case 15:case 16:
					var block2 = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.DblDot));
					_gthis.removeEmptyLinesAroundBlock(block2,_gthis.config.emptyLines.beforeBlocks,"keep");
					break;
				case 20:
					var tmp2 = token.getFirstChild();
					_gthis.removeEmptyLinesAroundBlock(tmp2,_gthis.config.emptyLines.beforeBlocks,"keep");
					var block3 = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.previousSibling(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.lastChild(token));
					_gthis.removeEmptyLinesAroundBlock(block3,"keep",_gthis.config.emptyLines.afterBlocks);
					break;
				case 21:
					_gthis.removeEmptyLinesAroundBlock(token.children[1],_gthis.config.emptyLines.beforeBlocks,"keep");
					break;
				default:
				}
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
	}
	removeEmptyLinesAroundBlock(block,before,after) {
		if(block == null) {
			return;
		}
		if(before == "remove") {
			var prev = this.getPreviousToken(block);
			if(prev != null) {
				this.emptyLinesAfter(prev.token,0);
			}
		}
		if(after == "remove") {
			this.emptyLinesAfterSubTree(block,0);
		}
	}
	keepExistingEmptyLines() {
		var funcs = this.parsedCode.root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < funcs.length) {
			var func = funcs[_g];
			++_g;
			var block = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(func),haxeparser_TokenDef.BrOpen);
			if(block == null) {
				block = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(func),haxeparser_TokenDef.BrOpen);
			}
			if(block == null) {
				continue;
			}
			var fullPos = block.getPos();
			var startLine = this.parsedCode.getLinePos(fullPos.min).line;
			var endLine = this.parsedCode.getLinePos(fullPos.max).line;
			var _g1 = 0;
			var _g11 = this.parsedCode.emptyLines;
			while(_g1 < _g11.length) {
				var emptyLine = _g11[_g1];
				++_g1;
				if(startLine >= emptyLine || endLine <= emptyLine) {
					continue;
				}
				var idx = this.parsedCode.linesIdx[emptyLine];
				var tokenInf = this.findTokenAtOffset(idx.l);
				if(tokenInf == null) {
					continue;
				}
				if(tokentree_utils_TokenTreeCheckUtils.isMetadata(tokenInf.token)) {
					continue;
				}
				tokenInf.emptyLinesAfter++;
			}
		}
	}
	markFileHeader() {
		var info = this.getTokenAt(0);
		var info2 = this.getTokenAt(1);
		var packagesAndImports = this.parsedCode.root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdPackage),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdImport),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdUsing)],tokentree_TokenFilterMode.ALL);
		if(info == null) {
			return;
		}
		var _g = info.token.tok;
		if(_g._hx_index == 6) {
			var s = _g.s;
			if(packagesAndImports.length == 0) {
				var _g1 = info2.token.tok;
				if(_g1._hx_index == 6) {
					var s1 = _g1.s;
				} else {
					return;
				}
			}
			info.emptyLinesAfter = this.config.emptyLines.afterFileHeaderComment;
		}
	}
}
$hxClasses["formatter.marker.MarkEmptyLines"] = formatter_marker_MarkEmptyLines;
formatter_marker_MarkEmptyLines.__name__ = "formatter.marker.MarkEmptyLines";
formatter_marker_MarkEmptyLines.__super__ = formatter_marker_MarkerBase;
Object.assign(formatter_marker_MarkEmptyLines.prototype, {
	__class__: formatter_marker_MarkEmptyLines
});
class formatter_marker_MarkLineEnds extends formatter_marker_MarkerBase {
	constructor(config,parsedCode,indenter) {
		super(config,parsedCode,indenter);
	}
	run() {
		var semicolonTokens = this.parsedCode.root.filter([haxeparser_TokenDef.Semicolon],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < semicolonTokens.length) {
			var token = semicolonTokens[_g];
			++_g;
			this.lineEndAfter(token);
		}
		this.markBrOpenClose();
		this.markAt();
		this.markDblDot();
		this.markSharp();
		this.markComments();
		this.markStructureExtension();
	}
	markComments() {
		var commentTokens = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			switch(_g._hx_index) {
			case 6:
				var _g2 = _g.s;
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			case 7:
				var _g1 = _g.s;
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			default:
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g3 = 0;
		while(_g3 < commentTokens.length) {
			var token1 = commentTokens[_g3];
			++_g3;
			var _g4 = token1.tok;
			switch(_g4._hx_index) {
			case 6:
				var _g21 = _g4.s;
				var prev = this.getPreviousToken(token1);
				if(prev != null) {
					if(this.parsedCode.isOriginalSameLine(token1,prev.token)) {
						if(prev.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
							this.lineEndAfter(token1);
						}
						this.noLineEndBefore(token1);
					}
				}
				var commentLine = this.parsedCode.getLinePos(token1.pos.min);
				var prefix = this.parsedCode.getString(this.parsedCode.linesIdx[commentLine.line].l,token1.pos.min);
				commentLine = this.parsedCode.getLinePos(token1.pos.max);
				var postfix = this.parsedCode.getString(token1.pos.max,this.parsedCode.linesIdx[commentLine.line].r);
				if(new EReg("^\\s*$","").match(prefix) && new EReg("^\\s*$","").match(postfix)) {
					this.lineEndAfter(token1);
					continue;
				}
				break;
			case 7:
				var _g11 = _g4.s;
				var prev1 = this.getPreviousToken(token1);
				if(prev1 != null) {
					if(this.parsedCode.isOriginalSameLine(token1,prev1.token)) {
						this.noLineEndBefore(token1);
					}
				}
				this.lineEndAfter(token1);
				break;
			default:
			}
		}
	}
	markBrOpenClose() {
		var brTokens = this.parsedCode.root.filterCallback(function(token,index) {
			if(token.tok._hx_index == 16) {
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
		var _g = 0;
		while(_g < brTokens.length) {
			var brOpen = brTokens[_g];
			++_g;
			var curlyPolicy = this.detectCurlyPolicy(brOpen);
			var brClose = this.getCloseToken(brOpen);
			if(brClose == null) {
				switch(curlyPolicy.leftCurly) {
				case "after":
					this.lineEndAfter(brOpen);
					break;
				case "before":
					this.beforeLeftCurly(brOpen);
					break;
				case "both":
					this.beforeLeftCurly(brOpen);
					this.lineEndAfter(brOpen);
					break;
				case "none":
					break;
				}
				continue;
			}
			var prev = this.getPreviousToken(brOpen);
			if(prev != null) {
				var _g1 = prev.token.tok;
				if(_g1._hx_index == 3) {
					switch(_g1.s) {
					case "":case "a":case "b":case "e":case "i":case "p":case "v":
						if(this.parsedCode.isOriginalSameLine(brOpen,brClose)) {
							this.noLineEndAfter(brOpen);
							this.noLineEndBefore(brClose);
							this.whitespace(brOpen,"none");
							this.whitespace(brClose,"noneBefore");
							var next = this.getNextToken(brClose);
							if(next != null) {
								if(next.token.tok._hx_index == 11) {
									this.whitespace(brClose,"after");
								}
							}
							continue;
						}
						this.whitespace(brOpen,"noneBefore");
						break;
					default:
					}
				}
			}
			var next1 = this.getNextToken(brOpen);
			var isEmpty = false;
			if(next1 != null && next1.token.is(haxeparser_TokenDef.BrClose) && curlyPolicy.emptyCurly == "noBreak") {
				isEmpty = true;
			}
			if(!isEmpty) {
				switch(curlyPolicy.leftCurly) {
				case "after":
					this.lineEndAfter(brOpen);
					break;
				case "before":
					this.beforeLeftCurly(brOpen);
					break;
				case "both":
					this.beforeLeftCurly(brOpen);
					this.lineEndAfter(brOpen);
					break;
				case "none":
					break;
				}
			}
			var preventBefore = isEmpty;
			var preventAfter = false;
			next1 = this.getNextToken(brClose);
			if(next1 != null) {
				if(next1.token.tok._hx_index == 11) {
					preventAfter = true;
				}
			}
			switch(curlyPolicy.rightCurly) {
			case "after":
				if(!preventAfter) {
					this.afterRightCurly(brClose);
				}
				break;
			case "before":
				if(!preventBefore) {
					this.beforeRightCurly(brClose);
				}
				break;
			case "both":
				if(!preventBefore) {
					this.beforeRightCurly(brClose);
				}
				if(!preventAfter) {
					this.afterRightCurly(brClose);
				}
				break;
			case "none":
				break;
			}
		}
	}
	detectCurlyPolicy(brOpen) {
		var type = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(brOpen);
		var curlyPolicy = { leftCurly : this.config.lineEnds.leftCurly, rightCurly : this.config.lineEnds.rightCurly, emptyCurly : this.config.lineEnds.emptyCurly};
		switch(type._hx_index) {
		case 0:
			if(brOpen.parent != null && brOpen.parent.tok != null && this.config.lineEnds.anonFunctionCurly != null) {
				var _g = brOpen.parent.tok;
				switch(_g._hx_index) {
				case 0:
					if(_g.k._hx_index == 0) {
						return this.config.lineEnds.anonFunctionCurly;
					}
					break;
				case 12:
					return this.config.lineEnds.anonFunctionCurly;
				default:
				}
			}
			if(this.config.lineEnds.blockCurly != null) {
				return this.config.lineEnds.blockCurly;
			}
			break;
		case 1:
			if(this.config.lineEnds.typedefCurly != null) {
				return this.config.lineEnds.typedefCurly;
			}
			break;
		case 2:
			if(this.config.lineEnds.objectLiteralCurly != null) {
				return this.config.lineEnds.objectLiteralCurly;
			}
			break;
		case 3:
			if(this.config.lineEnds.anonTypeCurly != null) {
				return this.config.lineEnds.anonTypeCurly;
			}
			break;
		case 4:
			break;
		}
		return curlyPolicy;
	}
	beforeLeftCurly(token) {
		this.lineEndBefore(token);
	}
	beforeRightCurly(token) {
		this.lineEndBefore(token);
	}
	afterRightCurly(token) {
		var next = token.index + 1;
		if(this.parsedCode.tokenList.tokens.length <= next) {
			this.lineEndAfter(token);
			return;
		}
		var nextToken = this.getTokenAt(next);
		if(nextToken == null) {
			this.lineEndAfter(token);
			return;
		}
		var _g = nextToken.token.tok;
		switch(_g._hx_index) {
		case 5:
			switch(_g.op._hx_index) {
			case 4:
				break;
			case 7:
				break;
			default:
				this.lineEndAfter(token);
			}
			break;
		case 9:
			break;
		case 10:
			break;
		case 12:
			break;
		case 13:
			break;
		case 16:
			var type = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(nextToken.token);
			switch(type._hx_index) {
			case 0:
				break;
			case 1:
				break;
			case 2:
				this.lineEndAfter(token);
				break;
			case 3:
				break;
			case 4:
				break;
			}
			break;
		case 19:
			break;
		default:
			this.lineEndAfter(token);
		}
	}
	markAt() {
		var atTokens = this.parsedCode.root.filter([haxeparser_TokenDef.At],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < atTokens.length) {
			var token = atTokens[_g];
			++_g;
			var metadataPolicy = this.determineMetadataPolicy(token);
			var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(token);
			if(lastChild == null) {
				continue;
			}
			if(metadataPolicy == "after") {
				this.lineEndAfter(lastChild);
				continue;
			}
			if(token.previousSibling != null && token.previousSibling.is(haxeparser_TokenDef.At)) {
				continue;
			}
			var next = token.nextSibling;
			var metadata = [token];
			while(next != null && next.is(haxeparser_TokenDef.At)) {
				metadata.push(next);
				next = next.nextSibling;
			}
			var _g1 = 0;
			while(_g1 < metadata.length) {
				var meta = metadata[_g1];
				++_g1;
				lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(meta);
				if(lastChild == null) {
					continue;
				}
				switch(metadataPolicy) {
				case "after":
					this.lineEndAfter(lastChild);
					break;
				case "afterLast":
					var next1 = this.getNextToken(lastChild);
					if(next1 != null && !this.parsedCode.isOriginalSameLine(lastChild,next1.token)) {
						this.lineEndAfter(lastChild);
						continue;
					}
					this.whitespace(lastChild,"after");
					break;
				case "forceAfterLast":
					this.whitespace(lastChild,"after");
					break;
				case "none":
					var next2 = this.getNextToken(lastChild);
					if(next2 != null && !this.parsedCode.isOriginalSameLine(lastChild,next2.token)) {
						this.lineEndAfter(lastChild);
						continue;
					}
					this.whitespace(lastChild,"after");
					break;
				}
			}
			if(metadataPolicy == "afterLast" || metadataPolicy == "forceAfterLast") {
				this.lineEndAfter(lastChild);
			}
		}
	}
	determineMetadataPolicy(token) {
		if(token == null) {
			return this.config.lineEnds.metadataOther;
		}
		var parent = token.parent;
		if(parent == null || parent.tok == null) {
			return this.config.lineEnds.metadataType;
		}
		var _g = parent.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return this.config.lineEnds.metadataFunction;
			case 22:
				if(parent.parent == null || parent.parent.tok == null) {
					return this.config.lineEnds.metadataOther;
				}
				var _g1 = parent.parent.tok;
				if(_g1._hx_index == 0) {
					switch(_g1.k._hx_index) {
					case 0:
						return this.config.lineEnds.metadataFunction;
					case 2:
						return this.config.lineEnds.metadataVar;
					case 1:case 26:case 27:case 31:case 39:
						return this.config.lineEnds.metadataType;
					default:
						return this.config.lineEnds.metadataOther;
					}
				} else {
					return this.config.lineEnds.metadataOther;
				}
				break;
			default:
				return this.config.lineEnds.metadataOther;
			}
			break;
		case 1:
			var _g2 = _g.c;
			if(_g2._hx_index == 3) {
				var _g3 = _g2.s;
				if(parent.parent == null || parent.parent.tok == null) {
					return this.config.lineEnds.metadataOther;
				}
				var _g4 = parent.parent.tok;
				if(_g4._hx_index == 0) {
					switch(_g4.k._hx_index) {
					case 0:
						return this.config.lineEnds.metadataFunction;
					case 2:
						return this.config.lineEnds.metadataVar;
					case 1:case 26:case 27:case 31:case 39:
						return this.config.lineEnds.metadataType;
					default:
						return this.config.lineEnds.metadataOther;
					}
				} else {
					return this.config.lineEnds.metadataOther;
				}
			} else {
				return this.config.lineEnds.metadataOther;
			}
			break;
		case 2:
			var _g11 = _g.s;
			return "after";
		case 3:
			var _g5 = _g.s;
			if(parent.parent == null || parent.parent.tok == null) {
				return this.config.lineEnds.metadataOther;
			}
			var _g6 = parent.parent.tok;
			if(_g6._hx_index == 0) {
				switch(_g6.k._hx_index) {
				case 0:
					return this.config.lineEnds.metadataFunction;
				case 2:
					return this.config.lineEnds.metadataVar;
				case 1:case 26:case 27:case 31:case 39:
					return this.config.lineEnds.metadataType;
				default:
					return this.config.lineEnds.metadataOther;
				}
			} else {
				return this.config.lineEnds.metadataOther;
			}
			break;
		default:
			return this.config.lineEnds.metadataOther;
		}
	}
	markDblDot() {
		var dblDotTokens = this.parsedCode.root.filter([haxeparser_TokenDef.DblDot],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < dblDotTokens.length) {
			var token = dblDotTokens[_g];
			++_g;
			if(!token.parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCase)) && !token.parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDefault))) {
				continue;
			}
			if(this.config.lineEnds.caseColon != "none") {
				this.lineEndAfter(token);
			}
			var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(token);
			if(lastChild == null) {
				continue;
			}
			this.lineEndAfter(lastChild);
		}
	}
	markSharp() {
		var sharpTokens = this.parsedCode.root.filter([haxeparser_TokenDef.Sharp("if"),haxeparser_TokenDef.Sharp("else"),haxeparser_TokenDef.Sharp("elseif"),haxeparser_TokenDef.Sharp("end"),haxeparser_TokenDef.Sharp("error")],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < sharpTokens.length) {
			var token = sharpTokens[_g];
			++_g;
			var _g1 = token.tok;
			if(_g1._hx_index == 2) {
				switch(_g1.s) {
				case "else":
					if(this.isInlineSharp(token)) {
						this.noLineEndBefore(token);
						continue;
					}
					this.lineEndBefore(token);
					this.lineEndAfter(token);
					break;
				case "end":
					if(this.isInlineSharp(token)) {
						this.noLineEndBefore(token);
					} else {
						this.lineEndBefore(token);
					}
					var next = this.getNextToken(token);
					if(next != null) {
						switch(next.token.tok._hx_index) {
						case 9:case 13:
							continue;
						default:
						}
					}
					if(!this.isOnlyWhitespaceAfterToken(token,true)) {
						continue;
					}
					this.lineEndAfter(token);
					break;
				case "error":
					var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(token.getFirstChild());
					if(lastChild == null) {
						lastChild = token;
					}
					this.lineEndAfter(lastChild);
					break;
				case "elseif":case "if":
					var lastChild1 = tokentree_utils_TokenTreeCheckUtils.getLastToken(token.getFirstChild());
					if(lastChild1 == null) {
						continue;
					}
					if(this.config.lineEnds.sharp == "none") {
						this.whitespace(lastChild1,"after");
						continue;
					}
					if(this.isInlineSharp(token)) {
						if(token.is(haxeparser_TokenDef.Sharp("if")) && this.isOnlyWhitespaceBeforeToken(token)) {
							continue;
						}
						this.noLineEndBefore(token);
						continue;
					}
					this.lineEndBefore(token);
					this.lineEndAfter(lastChild1);
					break;
				default:
					this.lineEndAfter(token);
				}
			} else {
				this.lineEndAfter(token);
			}
		}
	}
	isInlineSharp(token) {
		var _g = token.tok;
		if(_g._hx_index == 2) {
			switch(_g.s) {
			case "else":
				return this.isInlineSharp(token.parent);
			case "elseif":
				return this.isInlineSharp(token.parent);
			case "end":
				return this.isInlineSharp(token.parent);
			case "if":
				var sharpEnd = token.getLastChild();
				if(sharpEnd == null) {
					return false;
				}
				var _g1 = sharpEnd.tok;
				switch(_g1._hx_index) {
				case 2:
					if(_g1.s == "end") {
						if(this.parsedCode.linesBetweenOriginal(token,sharpEnd) > 5) {
							return false;
						}
					} else {
						return false;
					}
					break;
				case 9:case 13:
					sharpEnd = sharpEnd.previousSibling;
					if(sharpEnd == null) {
						return false;
					}
					if(!sharpEnd.is(haxeparser_TokenDef.Sharp("end"))) {
						return false;
					}
					break;
				default:
					return false;
				}
				if(!this.isOnlyWhitespaceAfterToken(sharpEnd,true)) {
					return true;
				}
				if(!this.isOnlyWhitespaceBeforeToken(token)) {
					return true;
				}
				var prev = this.getPreviousToken(token);
				if(prev == null) {
					return !this.isOnlyWhitespaceBeforeToken(token);
				}
				if(prev.whitespaceAfter == formatter_codedata_WhitespaceAfterType.Newline) {
					return false;
				}
				var _g2 = prev.token.tok;
				switch(_g2._hx_index) {
				case 6:
					var _g4 = _g2.s;
					return false;
				case 7:
					var _g3 = _g2.s;
					return false;
				case 9:
					return false;
				case 17:
					return false;
				case 19:
					if(this.parsedCode.isOriginalSameLine(prev.token,token)) {
						return true;
					}
					return false;
				default:
					return true;
				}
				break;
			default:
				return false;
			}
		} else {
			return false;
		}
	}
	isOnlyWhitespaceBeforeToken(token) {
		var tokenLine = this.parsedCode.getLinePos(token.pos.min);
		var prefix = this.parsedCode.getString(this.parsedCode.linesIdx[tokenLine.line].l,token.pos.min);
		return new EReg("^\\s*$","").match(prefix);
	}
	isOnlyWhitespaceAfterToken(token,allowLineComments) {
		var tokenLine = this.parsedCode.getLinePos(token.pos.max);
		var prefix = this.parsedCode.getString(token.pos.max,this.parsedCode.linesIdx[tokenLine.line].r);
		if(allowLineComments) {
			return new EReg("^\\s*(|//.*)$","").match(prefix);
		} else {
			return new EReg("^\\s*$","").match(prefix);
		}
	}
	findTypedefBrOpen(token) {
		var assign = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.isCIdent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(token)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
		if(assign == null) {
			return null;
		}
		return tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(assign,haxeparser_TokenDef.BrOpen);
	}
	markStructureExtension() {
		var typedefTokens = this.parsedCode.root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < typedefTokens.length) {
			var token = typedefTokens[_g];
			++_g;
			this.markAfterTypedef(token);
			var brOpen = this.findTypedefBrOpen(token);
			if(brOpen == null) {
				continue;
			}
			if(brOpen.children == null || brOpen.children.length <= 0) {
				continue;
			}
			var assignParent = brOpen.parent;
			if(assignParent.children.length > 1) {
				var _g1 = 0;
				var _g11 = assignParent.children;
				while(_g1 < _g11.length) {
					var child = _g11[_g1];
					++_g1;
					var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(child);
					if(lastChild == null) {
						continue;
					}
					var next = this.getNextToken(lastChild);
					if(next == null) {
						continue;
					}
					if(lastChild.is(haxeparser_TokenDef.BrClose)) {
						var _g2 = next.token.tok;
						switch(_g2._hx_index) {
						case 5:
							if(_g2.op._hx_index == 11) {
								this.noLineEndAfter(lastChild);
								continue;
							}
							break;
						case 9:
							this.whitespace(lastChild,"noneAfter");
							continue;
						case 12:
							this.whitespace(lastChild,"none");
							continue;
						default:
						}
					}
					if(next.token.is(haxeparser_TokenDef.BrOpen)) {
						continue;
					}
					this.lineEndAfter(lastChild);
				}
			}
			var _g3 = 0;
			var _g12 = brOpen.children;
			while(_g3 < _g12.length) {
				var child1 = _g12[_g3];
				++_g3;
				var _g4 = child1.tok;
				switch(_g4._hx_index) {
				case 1:
					var _g21 = _g4.c;
					if(_g21._hx_index == 3) {
						var _g31 = _g21.s;
						var lastChild1 = tokentree_utils_TokenTreeCheckUtils.getLastToken(child1);
						if(lastChild1 == null) {
							continue;
						}
						this.lineEndAfter(lastChild1);
					}
					break;
				case 5:
					if(_g4.op._hx_index == 7) {
						var lastChild2 = tokentree_utils_TokenTreeCheckUtils.getLastToken(child1);
						if(lastChild2 == null) {
							continue;
						}
						this.lineEndAfter(lastChild2);
					}
					break;
				case 17:
					var next1 = this.getNextToken(child1);
					if(next1 == null) {
						continue;
					}
					if(next1.token.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd))) {
						this.noLineEndAfter(child1);
					}
					if(next1.token.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt))) {
						this.whitespace(child1,"noneAfter");
					}
					break;
				case 20:
					var lastChild3 = tokentree_utils_TokenTreeCheckUtils.getLastToken(child1);
					if(lastChild3 == null) {
						continue;
					}
					this.lineEndAfter(lastChild3);
					break;
				default:
				}
			}
		}
	}
	markAfterTypedef(token) {
		var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(token);
		if(lastChild == null) {
			return;
		}
		var next = this.getNextToken(lastChild);
		if(next != null) {
			var _g = next.token.tok;
			switch(_g._hx_index) {
			case 7:
				var _g1 = _g.s;
				if(!this.parsedCode.isOriginalNewlineBefore(next.token)) {
					return;
				}
				break;
			case 9:
				this.whitespace(lastChild,"noneAfter");
				return;
			default:
			}
		}
		this.lineEndAfter(lastChild);
	}
}
$hxClasses["formatter.marker.MarkLineEnds"] = formatter_marker_MarkLineEnds;
formatter_marker_MarkLineEnds.__name__ = "formatter.marker.MarkLineEnds";
formatter_marker_MarkLineEnds.__super__ = formatter_marker_MarkerBase;
Object.assign(formatter_marker_MarkLineEnds.prototype, {
	__class__: formatter_marker_MarkLineEnds
});
class formatter_marker_MarkSameLine extends formatter_marker_MarkerBase {
	constructor(config,parsedCode,indenter) {
		super(config,parsedCode,indenter);
	}
	run() {
		this.markDollarSameLine();
		var _gthis = this;
		this.parsedCode.root.filterCallback(function(token,index) {
			if(token.parent != null && token.parent.is(haxeparser_TokenDef.At)) {
				return tokentree_FilterResult.GO_DEEPER;
			}
			var _g = token.tok;
			if(_g._hx_index == 0) {
				switch(_g.k._hx_index) {
				case 0:
					_gthis.markFunction(token);
					break;
				case 3:
					_gthis.markIf(token);
					break;
				case 4:
					_gthis.markElse(token);
					break;
				case 5:
					if(token.parent != null && token.parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo))) {
						return tokentree_FilterResult.GO_DEEPER;
					}
					_gthis.markWhile(token);
					break;
				case 6:
					_gthis.markDoWhile(token);
					break;
				case 7:
					_gthis.markFor(token);
					break;
				case 10:
					_gthis.markReturn(token);
					break;
				case 15:
					_gthis.markCase(token);
					break;
				case 16:
					_gthis.markCase(token);
					break;
				case 20:
					_gthis.markTry(token);
					break;
				case 21:
					_gthis.markCatch(token);
					break;
				case 28:
					_gthis.markUntyped(token);
					break;
				case 40:
					_gthis.markMacro(token);
					break;
				default:
				}
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
	}
	isExpression(token) {
		if(token == null) {
			return false;
		}
		var parent = token.parent;
		if(parent.tok == null) {
			return false;
		}
		var _g = parent.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 4:
				return this.shouldElseBeSameLine(parent);
			case 5:case 7:
				if(parent.parent.is(haxeparser_TokenDef.BkOpen)) {
					return true;
				}
				break;
			case 10:
				return true;
			case 28:
				return this.isExpression(parent);
			default:
			}
			break;
		case 5:
			var _g1 = _g.op;
			return true;
		case 11:
			var lastChild = parent.getLastChild();
			if(lastChild == null) {
				return false;
			}
			if(lastChild.index != token.index) {
				return false;
			}
			return this.isReturnExpression(parent);
		case 12:
			return true;
		case 18:
			var pos = parent.getPos();
			if(pos.min < token.pos.min && pos.max > token.pos.max) {
				return true;
			}
			break;
		default:
		}
		return false;
	}
	isReturnExpression(token) {
		var parent = token;
		while(parent.parent.tok != null) {
			parent = parent.parent;
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					return false;
				case 10:
					return true;
				default:
				}
				break;
			case 5:
				var _g1 = _g.op;
				return true;
			case 11:
				return true;
			case 12:
				return true;
			case 14:
				return false;
			case 16:
				var type = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(parent);
				switch(type._hx_index) {
				case 0:
					break;
				case 1:
					break;
				case 2:
					return true;
				case 3:
					break;
				case 4:
					break;
				}
				break;
			case 18:
				return true;
			default:
			}
		}
		return false;
	}
	shouldIfBeSameLine(token) {
		if(token == null) {
			return false;
		}
		if(!token.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdIf))) {
			return false;
		}
		var body = this.getBodyAfterCondition(token);
		if(body == null) {
			return false;
		}
		return this.isExpression(token);
	}
	shouldElseBeSameLine(token) {
		if(token == null) {
			return false;
		}
		if(!token.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse))) {
			return false;
		}
		return this.shouldIfBeSameLine(token.parent);
	}
	shouldTryBeSameLine(token) {
		if(token == null) {
			return false;
		}
		if(!token.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTry))) {
			return false;
		}
		return this.isExpression(token);
	}
	shouldCatchBeSameLine(token) {
		if(token == null) {
			return false;
		}
		if(!token.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCatch))) {
			return false;
		}
		return this.shouldTryBeSameLine(token.parent);
	}
	markIf(token) {
		if(this.shouldIfBeSameLine(token)) {
			switch(this.config.sameLine.expressionIf) {
			case "keep":
				this.markBodyAfterPOpen(token,"keep",this.config.sameLine.expressionIfWithBlocks);
				return;
			case "next":
				break;
			case "same":
				this.markBodyAfterPOpen(token,"same",this.config.sameLine.expressionIfWithBlocks);
				return;
			}
		}
		this.markBodyAfterPOpen(token,this.config.sameLine.ifBody,false);
		var prev = this.getPreviousToken(token);
		if(prev != null && prev.token.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse))) {
			this.applySameLinePolicy(token,this.config.sameLine.elseIf);
		}
	}
	markElse(token) {
		if(this.shouldElseBeSameLine(token)) {
			switch(this.config.sameLine.expressionIf) {
			case "keep":
				this.markBody(token,"keep",this.config.sameLine.expressionIfWithBlocks);
				if(this.parsedCode.isOriginalNewlineBefore(token)) {
					this.lineEndBefore(token);
				}
				var prev = this.getPreviousToken(token);
				if(prev == null) {
					return;
				}
				if(prev.token.is(haxeparser_TokenDef.BrClose)) {
					this.applySameLinePolicyChained(token,"keep","keep");
				}
				return;
			case "next":
				break;
			case "same":
				this.markBody(token,"same",this.config.sameLine.expressionIfWithBlocks);
				var prev1 = this.getPreviousToken(token);
				if(prev1 == null) {
					return;
				}
				if(prev1.token.is(haxeparser_TokenDef.BrClose)) {
					this.applySameLinePolicyChained(token,this.config.sameLine.ifBody,this.config.sameLine.ifElse);
				}
				return;
			}
		}
		this.markBody(token,this.config.sameLine.elseBody,false);
		var policy = this.config.sameLine.ifElse;
		var prev2 = this.getPreviousToken(token);
		if(prev2 != null) {
			if(prev2.token.tok._hx_index == 17) {
				if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(prev2.token),haxeparser_TokenDef.BrOpen)),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdIf)) == null) {
					switch(policy) {
					case "keep":
						break;
					case "next":
						break;
					case "same":
						policy = "next";
						break;
					}
				}
			}
		}
		this.applySameLinePolicyChained(token,this.config.sameLine.ifBody,policy);
	}
	markTry(token) {
		if(this.shouldTryBeSameLine(token) && this.config.sameLine.expressionTry == "same") {
			this.markBody(token,"same",false);
			return;
		}
		this.markBody(token,this.config.sameLine.tryBody,false);
	}
	markCatch(token) {
		if(this.shouldCatchBeSameLine(token) && this.config.sameLine.expressionTry == "same") {
			this.markBodyAfterPOpen(token,"same",false);
			this.applySameLinePolicy(token,this.config.sameLine.tryCatch);
			return;
		}
		this.markBodyAfterPOpen(token,this.config.sameLine.catchBody,false);
		this.applySameLinePolicyChained(token,this.config.sameLine.tryBody,this.config.sameLine.tryCatch);
	}
	markCase(token) {
		if(token == null) {
			return;
		}
		var dblDot = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.DblDot);
		if(dblDot == null) {
			return;
		}
		if(this.isReturnExpression(token)) {
			this.markExpressionCase(token,dblDot);
			return;
		}
		if(dblDot.children == null || dblDot.children.length > 1) {
			return;
		}
		switch(this.config.sameLine.caseBody) {
		case "keep":
			if(!this.parsedCode.isOriginalSameLine(dblDot,dblDot.getFirstChild())) {
				return;
			}
			break;
		case "next":
			return;
		case "same":
			break;
		}
		var first = dblDot.getFirstChild();
		var last = tokentree_utils_TokenTreeCheckUtils.getLastToken(first);
		if(this.parsedCode.linesBetweenOriginal(first,last) > 2) {
			return;
		}
		this.noLineEndAfter(dblDot);
	}
	markExpressionCase(token,dblDot) {
		if(dblDot.children == null) {
			return;
		}
		switch(this.config.sameLine.expressionCase) {
		case "keep":
			if(!this.parsedCode.isOriginalSameLine(dblDot,dblDot.getFirstChild())) {
				return;
			}
			break;
		case "next":
			return;
		case "same":
			break;
		}
		if(dblDot.children.length == 2) {
			var second = dblDot.children[1];
			var _g1 = second.tok;
			if(_g1._hx_index == 7) {
				var _g2 = _g1.s;
				var prev = this.getPreviousToken(second);
				if(prev != null) {
					if(!this.parsedCode.isOriginalSameLine(dblDot,prev.token)) {
						return;
					}
				}
			} else {
				return;
			}
		}
		if(dblDot.children.length > 2) {
			return;
		}
		this.noLineEndAfter(dblDot);
	}
	isArrayComprehension(token) {
		if(token == null) {
			return false;
		}
		var parent = token.parent;
		while(parent != null && parent.tok != null) {
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 3:case 4:case 5:case 7:
					parent = parent.parent;
					break;
				default:
					return false;
				}
				break;
			case 14:
				return true;
			default:
				return false;
			}
		}
		return false;
	}
	markFor(token) {
		if(token == null) {
			return;
		}
		var parent = token.parent;
		if(parent == null || parent.tok == null) {
			return;
		}
		if(this.isArrayComprehension(token)) {
			this.markArrayComprehension(token,parent);
			return;
		}
		var _g = parent.tok;
		if(_g._hx_index == 0) {
			if(_g.k._hx_index == 40) {
				var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(token);
				if(lastToken == null) {
					return;
				}
				if(this.parsedCode.isOriginalSameLine(token,lastToken)) {
					this.markBodyAfterPOpen(token,"same",false);
					return;
				}
			}
		}
		this.markBodyAfterPOpen(token,this.config.sameLine.forBody,false);
	}
	markWhile(token) {
		if(token == null) {
			return;
		}
		var parent = token.parent;
		if(parent == null || parent.tok == null) {
			return;
		}
		if(this.isArrayComprehension(token)) {
			this.markArrayComprehension(token,parent);
			return;
		}
		this.markBodyAfterPOpen(token,this.config.sameLine.whileBody,false);
	}
	markArrayComprehension(token,bkOpen) {
		var bkClose = this.getCloseToken(bkOpen);
		switch(this.config.sameLine.comprehensionFor) {
		case "keep":
			if(this.parsedCode.isOriginalNewlineBefore(token)) {
				this.lineEndBefore(token);
			}
			this.markBodyAfterPOpen(token,this.config.sameLine.comprehensionFor,false);
			if(bkClose != null && this.parsedCode.isOriginalNewlineBefore(bkClose)) {
				this.lineEndBefore(bkClose);
			}
			break;
		case "next":
			break;
		case "same":
			var origSame = false;
			if(bkClose != null) {
				origSame = this.parsedCode.isOriginalSameLine(bkOpen,bkClose);
			} else {
				var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(bkOpen);
				if(lastToken != null) {
					origSame = this.parsedCode.isOriginalSameLine(bkOpen,lastToken);
				}
			}
			if(origSame) {
				this.markBodyAfterPOpen(token,this.config.sameLine.comprehensionFor,false);
				if(bkClose != null) {
					this.whitespace(token,"noneBefore");
					this.whitespace(bkClose,"noneBefore");
				}
			} else {
				this.markBodyAfterPOpen(token,this.config.sameLine.forBody,false);
			}
			break;
		}
	}
	getBodyAfterCondition(token) {
		var pClose = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.POpen),haxeparser_TokenDef.PClose);
		if(pClose != null) {
			var next = this.getNextToken(pClose);
			if(next != null) {
				if(next.token.tok._hx_index != 11) {
					return next.token;
				}
			}
		}
		if(token.children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = token.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 0:
				switch(_g2.k._hx_index) {
				case 36:case 37:case 38:
					return child.nextSibling;
				default:
				}
				break;
			case 1:
				var _g11 = _g2.c;
				if(_g11._hx_index == 3) {
					var _g21 = _g11.s;
					return child.nextSibling;
				}
				break;
			case 16:
				return child;
			case 21:
				break;
			default:
			}
		}
		return null;
	}
	markBodyAfterPOpen(token,policy,includeBrOpen) {
		var body = this.getBodyAfterCondition(token);
		_hx_loop1: while(body != null) {
			var _g = body.tok;
			switch(_g._hx_index) {
			case 2:
				switch(_g.s) {
				case "else":case "elseif":case "end":
					return;
				default:
					break _hx_loop1;
				}
				break;
			case 7:
				var _g2 = _g.s;
				var prev = this.getPreviousToken(body);
				if(prev != null) {
					if(!this.parsedCode.isOriginalSameLine(body,prev.token)) {
						this.applySameLinePolicy(body,policy);
						return;
					}
				}
				body = body.nextSibling;
				break;
			case 16:
				var type = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(body);
				switch(type._hx_index) {
				case 0:
					if(includeBrOpen) {
						this.markBlockBody(body,policy);
					}
					return;
				case 1:
					break;
				case 2:
					this.applySameLinePolicy(body,policy);
					break;
				case 3:
					break;
				case 4:
					break;
				}
				body = body.nextSibling;
				break;
			default:
				break _hx_loop1;
			}
		}
		if(body == null) {
			return;
		}
		this.applySameLinePolicy(body,policy);
	}
	markBody(token,policy,includeBrOpen) {
		var body = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(token);
		if(body == null) {
			return;
		}
		if(body.is(haxeparser_TokenDef.BrOpen)) {
			var type = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(body);
			switch(type._hx_index) {
			case 0:
				if(includeBrOpen) {
					this.markBlockBody(body,policy);
				}
				return;
			case 1:
				break;
			case 2:
				this.applySameLinePolicy(body,policy);
				break;
			case 3:
				break;
			case 4:
				break;
			}
			return;
		}
		this.applySameLinePolicy(body,policy);
	}
	markBlockBody(token,policy) {
		if(token == null) {
			return;
		}
		if(!token.is(haxeparser_TokenDef.BrOpen)) {
			return;
		}
		if(token.children == null) {
			return;
		}
		var lastChild = token.getLastChild();
		if(lastChild.is(haxeparser_TokenDef.Semicolon)) {
			if(token.children.length > 3) {
				return;
			}
		} else if(token.children.length > 2) {
			return;
		}
		this.noLineEndAfter(token);
		var _g = 0;
		var _g1 = token.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.tok._hx_index == 17) {
				var next = this.getNextToken(child);
				var _g2 = next.token.tok;
				switch(_g2._hx_index) {
				case 0:
					switch(_g2.k._hx_index) {
					case 4:
						this.noLineEndAfter(child);
						break;
					case 21:
						this.noLineEndAfter(child);
						break;
					default:
					}
					break;
				case 9:
					this.whitespace(child,"noneAfter");
					break;
				case 13:
					this.whitespace(child,"noneAfter");
					break;
				default:
				}
				return;
			} else {
				var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(child);
				if(lastToken == null) {
					return;
				}
				this.noLineEndAfter(lastToken);
			}
		}
	}
	applySameLinePolicyChained(token,previousBlockPolicy,policy) {
		if(policy == "same") {
			var prev = this.getPreviousToken(token);
			if(prev == null) {
				policy = "next";
			}
			if(!prev.token.is(haxeparser_TokenDef.BrClose) && previousBlockPolicy != "same") {
				policy = "next";
			}
		}
		this.applySameLinePolicy(token,policy);
	}
	applySameLinePolicy(token,policy) {
		switch(policy) {
		case "keep":
			if(this.parsedCode.isOriginalNewlineBefore(token)) {
				this.applySameLinePolicy(token,"next");
			} else {
				this.applySameLinePolicy(token,"same");
			}
			break;
		case "next":
			var _g = token.tok;
			switch(_g._hx_index) {
			case 7:
				var s = _g.s;
				if(!this.parsedCode.isOriginalNewlineBefore(token)) {
					return;
				}
				break;
			case 14:
				if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(token),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFor)) != null) {
					return;
				}
				break;
			default:
			}
			this.lineEndBefore(token);
			break;
		case "same":
			this.wrapBefore(token,true);
			var prev = this.getPreviousToken(token);
			if(prev == null) {
				this.noLineEndBefore(token);
			} else {
				switch(prev.token.tok._hx_index) {
				case 10:case 18:
					this.whitespace(token,"noneBefore");
					break;
				default:
					this.noLineEndBefore(token);
				}
			}
			var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(token);
			if(lastToken == null) {
				return;
			}
			var next = this.getNextToken(lastToken);
			if(next == null) {
				return;
			}
			var _g1 = next.token.tok;
			if(_g1._hx_index == 0) {
				if(_g1.k._hx_index == 4) {
					this.noLineEndAfter(lastToken);
				}
			}
			return;
		}
	}
	markDollarSameLine() {
		var tokens = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 3) {
				switch(_g.s) {
				case "":case "a":case "b":case "e":case "i":case "p":case "v":
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				default:
					return tokentree_FilterResult.SKIP_SUBTREE;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < tokens.length) {
			var token1 = tokens[_g1];
			++_g1;
			var brOpen = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(token1),haxeparser_TokenDef.BrOpen);
			if(brOpen == null) {
				continue;
			}
			var brClose = this.getCloseToken(brOpen);
			if(!this.parsedCode.isOriginalSameLine(brOpen,brClose)) {
				continue;
			}
			this.whitespace(brOpen,"none");
			var next = this.getNextToken(brClose);
			if(next != null) {
				switch(next.token.tok._hx_index) {
				case 11:
					break;
				case 9:case 10:case 13:
					this.whitespace(brClose,"none");
					break;
				case 17:
					break;
				case 14:case 15:case 18:case 19:
					this.whitespace(brClose,"none");
					break;
				default:
					this.whitespace(brClose,"onlyAfter");
				}
			} else {
				this.noLineEndAfter(brClose);
			}
			this.wrapBefore(brOpen,false);
			this.wrapAfter(brOpen,false);
			this.wrapBefore(brClose,false);
			this.wrapAfter(brClose,false);
		}
	}
	markFunction(token) {
		var body = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.isCIdent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(token));
		if(body == null) {
			body = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(token),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdNew));
		}
		var policy = this.config.sameLine.functionBody;
		if(body == null) {
			body = token;
			policy = this.config.sameLine.anonFunctionBody;
		}
		if(body == null || body.children == null) {
			return;
		}
		body = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(body,haxeparser_TokenDef.POpen);
		if(body == null) {
			return;
		}
		if(body.nextSibling == null) {
			return;
		}
		body = body.nextSibling;
		if(body.tok._hx_index == 11) {
			body = body.nextSibling;
		}
		if(body == null) {
			return;
		}
		var _g1 = body.tok;
		switch(_g1._hx_index) {
		case 2:
			if(_g1.s == "if") {
				return;
			}
			break;
		case 7:
			var _g3 = _g1.s;
			return;
		case 9:
			return;
		case 16:
			return;
		default:
		}
		this.applySameLinePolicy(body,policy);
	}
	markDoWhile(token) {
		this.markBody(token,this.config.sameLine.doWhileBody,false);
		var whileTok = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdWhile));
		if(whileTok == null) {
			return;
		}
		this.applySameLinePolicy(whileTok,this.config.sameLine.doWhile);
	}
	markMacro(token) {
		var brOpen = this.getNextToken(token);
		if(brOpen == null || !brOpen.token.is(haxeparser_TokenDef.BrOpen)) {
			return;
		}
		var brClose = this.getCloseToken(brOpen.token);
		if(this.parsedCode.isOriginalSameLine(brOpen.token,brClose)) {
			this.noLineEndAfter(brOpen.token);
			this.noLineEndBefore(brClose);
			this.noWrappingBetween(brOpen.token,brClose);
		}
	}
	markReturn(token) {
		if(this.shouldReturnBeSameLine(token)) {
			this.markBody(token,this.config.sameLine.returnBodySingleLine,false);
		} else {
			this.markBody(token,this.config.sameLine.returnBody,false);
		}
	}
	markUntyped(token) {
		if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(token),haxeparser_TokenDef.BrOpen) == null) {
			return;
		}
		var parent = token.parent;
		if(parent == null || token.tok == null) {
			return;
		}
		if(parent.tok._hx_index == 16) {
			var type = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(parent);
			switch(type._hx_index) {
			case 0:
				return;
			case 1:
				return;
			case 2:
				break;
			case 3:
				break;
			case 4:
				break;
			}
		}
		this.applySameLinePolicy(token,this.config.sameLine.untypedBody);
	}
	shouldReturnBeSameLine(token) {
		var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(token);
		if(lastToken == null) {
			return true;
		}
		if(this.isSameLineBetween(token,lastToken,false)) {
			return true;
		}
		return this.shouldReturnChildsBeSameLine(token);
	}
	shouldReturnChildsBeSameLine(token) {
		if(token.children == null) {
			return true;
		}
		var _g = 0;
		var _g1 = token.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			if(_g2._hx_index == 0) {
				switch(_g2.k._hx_index) {
				case 3:case 5:case 7:case 14:case 20:
					return false;
				default:
					var result = this.shouldReturnChildsBeSameLine(child);
					if(!result) {
						return false;
					}
				}
			} else {
				var result1 = this.shouldReturnChildsBeSameLine(child);
				if(!result1) {
					return false;
				}
			}
		}
		return true;
	}
}
$hxClasses["formatter.marker.MarkSameLine"] = formatter_marker_MarkSameLine;
formatter_marker_MarkSameLine.__name__ = "formatter.marker.MarkSameLine";
formatter_marker_MarkSameLine.__super__ = formatter_marker_MarkerBase;
Object.assign(formatter_marker_MarkSameLine.prototype, {
	__class__: formatter_marker_MarkSameLine
});
class formatter_marker_MarkTokenText extends formatter_marker_MarkerBase {
	constructor(config,parsedCode,indenter) {
		super(config,parsedCode,indenter);
	}
	run() {
		var _gthis = this;
		this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			switch(_g._hx_index) {
			case 1:
				var _g1 = _g.c;
				switch(_g1._hx_index) {
				case 2:
					var _g5 = _g1.kind;
					var text = _g1.s;
					var tmp = _gthis.printStringToken(token);
					_gthis.tokenText(token,tmp);
					break;
				case 4:
					var _g3 = _g1.opt;
					var _g2 = _g1.r;
					var tmp1 = _gthis.printEregToken(token);
					_gthis.tokenText(token,tmp1);
					break;
				default:
					var tmp2 = token.toString();
					_gthis.tokenText(token,tmp2);
				}
				break;
			case 7:
				var text1 = _g.s;
				var tmp3 = _gthis.printCommentLine(text1);
				_gthis.tokenText(token,tmp3);
				break;
			default:
				var tmp4 = token.toString();
				_gthis.tokenText(token,tmp4);
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
	}
	finalRun() {
		var _gthis = this;
		this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 6) {
				var text = _g.s;
				var tmp = _gthis.printComment(text,token);
				_gthis.tokenText(token,tmp);
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
	}
	printStringToken(token) {
		var text = this.parsedCode.getString(token.pos.min,token.pos.max);
		if(!this.config.whitespace.formatStringInterpolation) {
			return text;
		}
		if(StringTools.startsWith(text,"'")) {
			var start = 0;
			var index;
			while(true) {
				index = text.indexOf("${",start);
				if(!(index >= 0)) {
					break;
				}
				if(this.isDollarEscaped(text,index)) {
					return text;
				}
				start = index + 1;
				var indexEnd = text.indexOf("}",index + 2);
				var fragment = text.substring(index + 2,indexEnd);
				if(fragment.indexOf("{") >= 0) {
					continue;
				}
				var formatted = this.formatFragment(fragment);
				start += formatted.length;
				text = HxOverrides.substr(text,0,index + 2) + formatted + HxOverrides.substr(text,indexEnd,null);
			}
		}
		return text;
	}
	isDollarEscaped(text,index) {
		var escaped = false;
		while(--index >= 0) {
			if(text.charCodeAt(index) != 36) {
				return escaped;
			}
			escaped = !escaped;
		}
		return escaped;
	}
	formatFragment(fragment) {
		try {
			var fileName = "string interpolation";
			var this1 = haxe_io_Bytes.ofString(fragment);
			var tokens = this.makeTokens(this1,fileName);
			var this2 = haxe_io_Bytes.ofString(fragment);
			var stream = new tokentree_TokenStream(tokens,this2);
			var root = new tokentree_TokenTree(null,"",null,-1);
			var progress = new tokentree_TokenStreamProgress(stream);
			while(progress.streamHasChanged()) if(stream.hasMore()) {
				tokentree_walk_WalkStatement.walkStatement(stream,root);
			}
			var this3 = haxe_io_Bytes.ofString(fragment);
			var inputData = { fileName : fileName, content : this3, tokenList : tokens, tokenTree : root, config : this.config, entryPoint : tokentree_TokenTreeEntryPoint.EXPRESSION_LEVEL};
			var interpolParsedCode = new formatter_codedata_ParsedCode(inputData);
			var interpolIndenter = new formatter_marker_Indenter(this.config.indentation);
			interpolIndenter.setParsedCode(interpolParsedCode);
			var markTokenText = new formatter_marker_MarkTokenText(this.config,interpolParsedCode,interpolIndenter);
			var markWhitespace = new formatter_marker_MarkWhitespace(this.config,interpolParsedCode,interpolIndenter);
			markTokenText.run();
			markWhitespace.run();
			var lines = new formatter_codedata_CodeLines(interpolParsedCode,interpolIndenter);
			var formatted = lines.print(interpolParsedCode.lineSeparator);
			return StringTools.trim(formatted);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
		return fragment;
	}
	makeTokens(fragment,name) {
		var tokens = [];
		try {
			var lexer = new haxeparser_HaxeLexer(fragment,name);
			var t = lexer.token(haxeparser_HaxeLexer.tok);
			while(t.tok != haxeparser_TokenDef.Eof) {
				tokens.push(t);
				t = lexer.token(haxeparser_HaxeLexer.tok);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			throw new js__$Boot_HaxeError("failed to make tokens " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
		}
		return tokens;
	}
	printEregToken(token) {
		return this.parsedCode.getString(token.pos.min,token.pos.max);
	}
	printComment(text,token) {
		var lines = text.split(this.parsedCode.lineSeparator);
		var indent = this.indenter.calcIndent(token);
		var startsWithStar = lines.length >= 3;
		var _g = 1;
		var _g1 = lines.length - 1;
		while(_g < _g1) {
			var index = _g++;
			if(!new EReg("^\\s*\\*(\\s|$)","").match(lines[index])) {
				startsWithStar = false;
				break;
			}
		}
		var linesNew = [];
		var _g2 = 0;
		while(_g2 < lines.length) {
			var line = lines[_g2];
			++_g2;
			linesNew.push(this.convertLeadingIndent(line));
		}
		lines = this.removeCommentPrefix(linesNew);
		text = "/*" + lines[0];
		var _g3 = 1;
		var _g4 = lines.length;
		while(_g3 < _g4) {
			var index1 = _g3++;
			text += this.parsedCode.lineSeparator;
			var line1 = StringTools.rtrim(lines[index1]);
			var lineIndent = indent;
			var lastLine = index1 == lines.length - 1;
			if(!lastLine) {
				++lineIndent;
			}
			if(startsWithStar) {
				lineIndent = indent;
			}
			if(!lastLine && line1.length <= 0) {
				lineIndent = 0;
			}
			if(!lastLine && startsWithStar) {
				line1 = " " + line1;
			}
			if(lastLine) {
				if(new EReg("^\\s*\\*\\s*[^\\s\\*]","").match(line1)) {
					line1 = " " + line1;
				}
				var leadingWS = new EReg("^\\s*}","");
				if(leadingWS.match(line1)) {
					line1 = StringTools.trim(line1);
				} else {
					if(new EReg("^\\s*[^*\\s]","").match(line1)) {
						lineIndent = indent + 1;
					}
					line1 = StringTools.rtrim(line1);
					if(!StringTools.endsWith(line1,"*")) {
						line1 += " ";
					}
				}
				if(new EReg("^\\s*$","").match(line1)) {
					line1 = " ";
				}
			}
			text += this.indenter.makeIndentString(lineIndent) + line1;
		}
		return text + "*/";
	}
	removeCommentPrefix(lines) {
		var prefixReg = new EReg("^(\\s*)","");
		var prefix = null;
		var linesNew = [];
		var endIndex = lines.length - 1;
		var lastLine = lines[lines.length - 1];
		if(!new EReg("^\\s*(\\**$|\\})","").match(lastLine)) {
			endIndex = lines.length;
		}
		var _g = 1;
		var _g1 = endIndex;
		while(_g < _g1) {
			var index = _g++;
			var line = lines[index];
			prefixReg.match(line);
			var linePrefix = prefixReg.matched(1);
			if(linePrefix.length <= 0) {
				continue;
			}
			if(prefix == null || prefix.length > linePrefix.length) {
				prefix = linePrefix;
			}
		}
		if(prefix != null) {
			linesNew = [];
			var startPrefix = prefix + " *";
			var _g2 = 0;
			while(_g2 < lines.length) {
				var line1 = lines[_g2];
				++_g2;
				if(StringTools.startsWith(line1,startPrefix)) {
					line1 = HxOverrides.substr(line1,startPrefix.length - 1,null);
				}
				if(StringTools.startsWith(line1,prefix)) {
					line1 = HxOverrides.substr(line1,prefix.length,null);
				}
				linesNew.push(line1);
			}
			lines = linesNew;
		}
		var lastLine1 = lines[lines.length - 1];
		if(new EReg("^\\s*\\*\\**$","").match(lastLine1)) {
			lines[lines.length - 1] = StringTools.ltrim(lastLine1);
		}
		return lines;
	}
	convertLeadingIndent(line) {
		var spaceIndent = StringTools.lpad(""," ",this.config.indentation.tabWidth);
		var oneIndent = this.config.indentation.character;
		var whitespaceReg = new EReg("^\\s+","");
		if(!whitespaceReg.match(line)) {
			return line;
		}
		var match = whitespaceReg.matched(0);
		if(this.config.indentation.character == "\t") {
			var newPrefix = StringTools.replace(match,spaceIndent,oneIndent);
			line = newPrefix + HxOverrides.substr(line,match.length,null);
		} else {
			var newPrefix1 = StringTools.replace(match,"\t",oneIndent);
			line = newPrefix1 + HxOverrides.substr(line,match.length,null);
		}
		return line;
	}
	printCommentLine(text) {
		if(new EReg("^[/\\*\\-\\s]+","").match(text)) {
			return "//" + StringTools.rtrim(text);
		}
		if(this.config.whitespace.addLineCommentSpace) {
			return "// " + StringTools.trim(text);
		}
		return "//" + StringTools.trim(text);
	}
}
$hxClasses["formatter.marker.MarkTokenText"] = formatter_marker_MarkTokenText;
formatter_marker_MarkTokenText.__name__ = "formatter.marker.MarkTokenText";
formatter_marker_MarkTokenText.__super__ = formatter_marker_MarkerBase;
Object.assign(formatter_marker_MarkTokenText.prototype, {
	__class__: formatter_marker_MarkTokenText
});
class formatter_marker_MarkWhitespace extends formatter_marker_MarkerBase {
	constructor(config,parsedCode,indenter) {
		super(config,parsedCode,indenter);
	}
	run() {
		var _gthis = this;
		this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			switch(_g._hx_index) {
			case 0:
				var _g4 = _g.k;
				_gthis.markKeyword(token);
				break;
			case 1:
				var _g5 = _g.c;
				if(_g5._hx_index == 3) {
					switch(_g5.s) {
					case "final":
						_gthis.whitespace(token,"after");
						break;
					case "is":
						var parent = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(token),haxeparser_TokenDef.POpen);
						if(parent != null) {
							var prev = _gthis.getPreviousToken(parent);
							if(prev != null && prev.token.is(haxeparser_TokenDef.POpen)) {
								_gthis.whitespace(token,"around");
							}
						}
						_gthis.fixConstAfterConst(token);
						break;
					case "from":case "to":
						var parent1 = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(token)),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdAbstract));
						if(parent1 != null) {
							_gthis.whitespace(token,"around");
							_gthis.wrapBefore(token,true);
						}
						_gthis.fixConstAfterConst(token);
						break;
					default:
						_gthis.fixConstAfterConst(token);
					}
				} else {
					_gthis.fixConstAfterConst(token);
				}
				break;
			case 2:
				var _g3 = _g.s;
				_gthis.markSharp(token);
				break;
			case 3:
				var _g7 = _g.s;
				_gthis.markDollar(token);
				break;
			case 4:
				var _g2 = _g.op;
				_gthis.markUnop(token);
				break;
			case 5:
				switch(_g.op._hx_index) {
				case 1:
					if(tokentree_utils_TokenTreeCheckUtils.isImport(token.parent)) {
						_gthis.whitespace(token,"none");
					} else {
						_gthis.whitespace(token,_gthis.config.whitespace.binopPolicy);
					}
					break;
				case 3:
					if(tokentree_utils_TokenTreeCheckUtils.filterOpSub(token)) {
						var policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(_gthis.config.whitespace.binopPolicy,"after");
						var prev1 = _gthis.getPreviousToken(token);
						switch(prev1.token.tok._hx_index) {
						case 14:case 18:
							policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
							break;
						default:
						}
						_gthis.whitespace(token,policy);
					} else {
						_gthis.whitespace(token,_gthis.config.whitespace.binopPolicy);
					}
					break;
				case 7:
					_gthis.markGt(token);
					break;
				case 9:
					if(tokentree_utils_TokenTreeCheckUtils.isTypeParameter(token)) {
						_gthis.whitespace(token,_gthis.config.whitespace.typeParamOpenPolicy);
					} else {
						_gthis.whitespace(token,_gthis.config.whitespace.binopPolicy);
					}
					break;
				case 21:
					_gthis.whitespace(token,_gthis.config.whitespace.intervalPolicy);
					break;
				case 23:
					_gthis.whitespace(token,"around");
					break;
				default:
					_gthis.whitespace(token,_gthis.config.whitespace.binopPolicy);
				}
				break;
			case 6:
				var _g9 = _g.s;
				_gthis.markComment(token);
				break;
			case 7:
				var _g8 = _g.s;
				_gthis.whitespace(token,"before");
				break;
			case 9:
				_gthis.markSemicolon(token);
				break;
			case 11:
				_gthis.markDblDot(token);
				break;
			case 12:
				_gthis.markArrow(token);
				break;
			case 13:
				_gthis.whitespace(token,_gthis.config.whitespace.commaPolicy);
				break;
			case 14:
				_gthis.successiveParenthesis(token,false,_gthis.config.whitespace.openingBracketPolicy,_gthis.config.whitespace.compressSuccessiveParenthesis);
				break;
			case 15:
				_gthis.successiveParenthesis(token,true,_gthis.config.whitespace.closingBracketPolicy,_gthis.config.whitespace.compressSuccessiveParenthesis);
				break;
			case 16:
				_gthis.markBrOpen(token);
				break;
			case 17:
				_gthis.markBrClose(token);
				break;
			case 18:
				_gthis.markPOpen(token);
				break;
			case 19:
				_gthis.markPClose(token);
				break;
			case 20:
				if(tokentree_utils_TokenTreeCheckUtils.isTernary(token)) {
					_gthis.whitespace(token,_gthis.config.whitespace.ternaryPolicy);
				} else {
					_gthis.whitespace(token,"noneAfter");
				}
				break;
			case 21:
				_gthis.markAt(token);
				break;
			default:
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
	}
	markGt(token) {
		if(tokentree_utils_TokenTreeCheckUtils.isOpGtTypedefExtension(token)) {
			this.whitespace(token,this.config.whitespace.typeExtensionPolicy);
			return;
		}
		if(tokentree_utils_TokenTreeCheckUtils.isTypeParameter(token)) {
			var policy = this.config.whitespace.typeParamClosePolicy;
			var next = this.getNextToken(token);
			if(next != null) {
				var _g = next.token.tok;
				switch(_g._hx_index) {
				case 0:
					var _g2 = _g.k;
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"after");
					break;
				case 5:
					if(_g.op._hx_index == 7) {
						policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
					}
					break;
				case 9:case 13:
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
					break;
				case 17:case 19:
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
					break;
				default:
				}
			}
			this.whitespace(token,policy);
		} else {
			this.whitespace(token,this.config.whitespace.binopPolicy);
		}
	}
	fixConstAfterConst(token) {
		var next = this.getNextToken(token);
		if(next != null) {
			var _g = next.token.tok;
			switch(_g._hx_index) {
			case 0:
				var _g2 = _g.k;
				this.whitespace(token,"after");
				break;
			case 1:
				var _g1 = _g.c;
				this.whitespace(token,"after");
				break;
			default:
			}
		}
	}
	successiveParenthesis(token,closing,policy,compress) {
		var next = this.getNextToken(token);
		if(next != null) {
			var _g = next.token.tok;
			switch(_g._hx_index) {
			case 0:
				var _g2 = _g.k;
				if(closing) {
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"after");
				}
				break;
			case 5:
				switch(_g.op._hx_index) {
				case 7:
					if(token.is(haxeparser_TokenDef.BrClose)) {
						policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
					}
					break;
				case 22:
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"after");
					break;
				default:
				}
				break;
			case 9:case 10:case 11:case 13:
				policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
				break;
			default:
			}
		}
		if(!compress) {
			this.whitespace(token,policy);
			return;
		}
		if(closing) {
			if(next != null) {
				var _g1 = next.token.tok;
				switch(_g1._hx_index) {
				case 5:
					if(_g1.op._hx_index == 7) {
						if(tokentree_utils_TokenTreeCheckUtils.isTypeParameter(next.token)) {
							policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
						}
					}
					break;
				case 17:
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
					break;
				case 14:case 15:case 16:case 18:case 19:
					if(token.is(haxeparser_TokenDef.PClose)) {
						switch(tokentree_utils_TokenTreeCheckUtils.getPOpenType(token.parent)._hx_index) {
						case 1:
							policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"after");
							break;
						case 3:case 4:case 5:case 6:case 7:
							policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"after");
							break;
						case 8:
							policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"after");
							break;
						case 0:case 2:case 9:
							policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
							break;
						}
					} else {
						policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
					}
					break;
				default:
				}
			}
		} else {
			var prev = this.getPreviousToken(token);
			if(prev != null) {
				var _g3 = prev.token.tok;
				switch(_g3._hx_index) {
				case 5:
					switch(_g3.op._hx_index) {
					case 9:
						if(token.is(haxeparser_TokenDef.BrOpen)) {
							return;
						}
						break;
					case 21:
						policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
						break;
					default:
					}
					break;
				case 8:
					var _g21 = _g3.s;
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
					break;
				case 11:
					switch(prev.whitespaceAfter._hx_index) {
					case 0:
						policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
						break;
					case 1:
						policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"before");
						break;
					case 2:
						break;
					}
					break;
				case 12:
					return;
				case 13:
					var _g4 = this.config.whitespace.commaPolicy;
					if(_g4 != null) {
						switch(_g4) {
						case "after":case "around":case "onlyAfter":
							policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"before");
							break;
						default:
						}
					}
					break;
				case 14:case 16:case 18:
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
					break;
				case 19:
					switch(tokentree_utils_TokenTreeCheckUtils.getPOpenType(prev.token)._hx_index) {
					case 3:case 4:case 5:case 6:case 7:
						policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"before");
						break;
					default:
					}
					break;
				default:
				}
			}
		}
		this.whitespace(token,policy);
	}
	markKeyword(token) {
		var prev = this.getPreviousToken(token);
		if(prev != null) {
			var _g = prev.token.tok;
			switch(_g._hx_index) {
			case 1:
				var _g1 = _g.c;
				prev.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Space;
				break;
			case 19:
				prev.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Space;
				break;
			case 21:
				return;
			default:
			}
		}
		var _g2 = token.tok;
		if(_g2._hx_index == 0) {
			switch(_g2.k._hx_index) {
			case 3:
				this.whitespace(token,this.config.whitespace.ifPolicy);
				break;
			case 4:
				var policy = this.config.whitespace.ifPolicy;
				this.whitespace(token,formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"after"));
				break;
			case 5:
				this.whitespace(token,this.config.whitespace.whilePolicy);
				break;
			case 6:
				this.whitespace(token,this.config.whitespace.doPolicy);
				break;
			case 7:
				this.whitespace(token,this.config.whitespace.forPolicy);
				break;
			case 9:case 16:case 23:case 36:case 37:case 38:
				var next = this.getNextToken(token);
				if(next != null) {
					var _g3 = next.token.tok;
					switch(_g3._hx_index) {
					case 0:
						var _g11 = _g3.k;
						this.whitespace(token,"after");
						return;
					case 1:
						var _g21 = _g3.c;
						if(_g21._hx_index == 3) {
							var _g31 = _g21.s;
							this.whitespace(token,"after");
							return;
						}
						break;
					case 20:
						this.whitespace(token,"after");
						return;
					default:
					}
				}
				this.whitespace(token,"noneAfter");
				break;
			case 10:
				this.whitespace(token,"after");
				break;
			case 11:case 12:
				this.whitespace(token,"around");
				break;
			case 14:
				this.whitespace(token,this.config.whitespace.switchPolicy);
				break;
			case 20:
				this.whitespace(token,this.config.whitespace.tryPolicy);
				break;
			case 21:
				this.whitespace(token,this.config.whitespace.catchPolicy);
				break;
			case 28:
				this.whitespace(token,"after");
				break;
			default:
				var next1 = this.getNextToken(token);
				if(next1 != null) {
					switch(next1.token.tok._hx_index) {
					case 10:
						return;
					case 18:
						return;
					default:
					}
				}
				this.whitespace(token,"after");
			}
		}
	}
	markUnop(token) {
		var next = this.getNextToken(token);
		if(next != null) {
			switch(next.token.tok._hx_index) {
			case 9:case 13:
				return;
			case 15:case 17:case 19:
				return;
			default:
			}
		}
		var prev = this.getPreviousToken(token);
		if(prev == null) {
			return;
		}
		var _g = prev.token.tok;
		if(_g._hx_index == 1) {
			var _g1 = _g.c;
			if(_g1._hx_index == 3) {
				var _g2 = _g1.s;
				var _g3 = token.tok;
				if(_g3._hx_index == 4) {
					switch(_g3.op._hx_index) {
					case 2:case 3:case 4:
						return;
					default:
					}
				}
				this.whitespace(token,"after");
			}
		}
	}
	markDollar(token) {
		var next = this.getNextToken(token);
		if(next == null) {
			return;
		}
		var _g = next.token.tok;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.k;
			this.whitespace(token,"after");
			break;
		case 1:
			var _g2 = _g.c;
			this.whitespace(token,"after");
			break;
		default:
		}
	}
	markDblDot(token) {
		var type = tokentree_utils_TokenTreeCheckUtils.getColonType(token);
		if(type == null) {
			type = tokentree_utils_ColonType.UNKNOWN;
		}
		var policy = this.config.whitespace.colonPolicy;
		switch(type._hx_index) {
		case 0:
			policy = this.config.whitespace.caseColonPolicy;
			break;
		case 1:
			policy = this.config.whitespace.typeHintColonPolicy;
			break;
		case 2:
			policy = this.config.whitespace.typeCheckColonPolicy;
			break;
		case 3:
			policy = this.config.whitespace.ternaryPolicy;
			break;
		case 4:
			policy = this.config.whitespace.objectFieldColonPolicy;
			break;
		case 5:
			this.whitespace(token,"none");
			return;
		case 6:
			policy = this.config.whitespace.colonPolicy;
			break;
		}
		var prev = this.getPreviousToken(token);
		if(prev != null) {
			var _g = prev.token.tok;
			switch(_g._hx_index) {
			case 1:
				var _g2 = _g.c;
				if(token.parent != null && token.parent.tok != null) {
					var _g1 = token.parent.tok;
					if(_g1._hx_index == 2) {
						if(_g1.s == "if") {
							policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"before");
						}
					}
				}
				break;
			case 2:
				if(_g.s != "end") {
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"before");
				}
				break;
			case 19:
				if(token.parent != null && token.parent.tok != null) {
					var _g3 = token.parent.tok;
					if(_g3._hx_index == 2) {
						if(_g3.s == "if") {
							policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"before");
						}
					}
				}
				break;
			default:
			}
		}
		this.whitespace(token,policy);
	}
	markSemicolon(token) {
		var next = this.getNextToken(token);
		var policy = this.config.whitespace.semicolonPolicy;
		if(next != null) {
			if(next.token.tok._hx_index == 17) {
				policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
			}
		}
		this.whitespace(token,policy);
	}
	markSharp(token) {
		var _g = token.tok;
		if(_g._hx_index == 2) {
			switch(_g.s) {
			case "else":
				this.whitespace(token,"around");
				break;
			case "elseif":
				this.whitespace(token,"around");
				break;
			case "end":
				var prev = this.getPreviousToken(token);
				if(prev != null) {
					switch(prev.token.tok._hx_index) {
					case 14:case 16:case 18:
						break;
					default:
						this.whitespace(token,"before");
					}
				}
				var next = this.getNextToken(token);
				if(next != null) {
					var _g1 = next.token.tok;
					switch(_g1._hx_index) {
					case 0:
						var _g2 = _g1.k;
						this.whitespace(token,"after");
						break;
					case 1:
						var _g11 = _g1.c;
						this.whitespace(token,"after");
						break;
					case 9:case 13:
						break;
					case 14:case 16:case 18:case 20:
						this.whitespace(token,"after");
						break;
					default:
					}
				}
				break;
			case "error":
				this.whitespace(token,"after");
				break;
			case "if":
				this.whitespace(token,"after");
				var prev1 = this.getPreviousToken(token);
				if(prev1 != null) {
					var _g3 = prev1.token.tok;
					switch(_g3._hx_index) {
					case 0:
						var _g21 = _g3.k;
						this.whitespace(token,"before");
						break;
					case 1:
						var _g12 = _g3.c;
						this.whitespace(token,"before");
						break;
					default:
					}
				}
				var next1 = this.getNextToken(token);
				if(next1 != null) {
					var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(token.getFirstChild());
					if(lastChild != null) {
						this.whitespace(lastChild,"after");
					}
				}
				break;
			default:
			}
		}
	}
	markArrow(token) {
		var arrowType = tokentree_utils_TokenTreeCheckUtils.getArrowType(token);
		if(arrowType == null) {
			arrowType = tokentree_utils_ArrowType.ARROW_FUNCTION;
		}
		switch(arrowType._hx_index) {
		case 0:
			this.whitespace(token,this.config.whitespace.arrowFunctionsPolicy);
			break;
		case 1:
			this.whitespace(token,this.config.whitespace.functionTypeHaxe3Policy);
			break;
		case 2:
			this.whitespace(token,this.config.whitespace.functionTypeHaxe4Policy);
			break;
		}
	}
	determinePOpenPolicy(token) {
		var type = tokentree_utils_TokenTreeCheckUtils.getPOpenType(token);
		if(type == null) {
			type = tokentree_utils_POpenType.EXPRESSION;
		}
		switch(type._hx_index) {
		case 0:
			this.config.whitespace.parenConfig.metadataParens.openingPolicy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(this.config.whitespace.parenConfig.metadataParens.openingPolicy,"before");
			return this.config.whitespace.parenConfig.metadataParens;
		case 1:
			var _g = token.parent.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 10:
					var policy = { openingPolicy : this.config.whitespace.parenConfig.anonFuncParamParens.openingPolicy, closingPolicy : this.config.whitespace.parenConfig.anonFuncParamParens.closingPolicy, removeInnerWhenEmpty : this.config.whitespace.parenConfig.anonFuncParamParens.removeInnerWhenEmpty};
					switch(policy.openingPolicy) {
					case "after":
						policy.openingPolicy = "around";
						break;
					case "around":
						break;
					case "before":
						break;
					case "none":
						policy.openingPolicy = "before";
						break;
					case "noneAfter":
						policy.openingPolicy = "onlyBefore";
						break;
					case "noneBefore":
						policy.openingPolicy = "before";
						break;
					case "onlyAfter":
						policy.openingPolicy = "around";
						break;
					case "onlyBefore":
						break;
					}
					return policy;
				case 22:
					return this.config.whitespace.parenConfig.funcParamParens;
				default:
					return this.config.whitespace.parenConfig.anonFuncParamParens;
				}
				break;
			case 1:
				var _g2 = _g.c;
				if(_g2._hx_index == 3) {
					var _g3 = _g2.s;
					return this.config.whitespace.parenConfig.funcParamParens;
				} else {
					return this.config.whitespace.parenConfig.anonFuncParamParens;
				}
				break;
			default:
				return this.config.whitespace.parenConfig.anonFuncParamParens;
			}
			break;
		case 2:
			return this.config.whitespace.parenConfig.callParens;
		case 3:
			if(this.config.whitespace.parenConfig.switchConditionParens != null) {
				return this.config.whitespace.parenConfig.switchConditionParens;
			}
			return this.config.whitespace.parenConfig.conditionParens;
		case 4:
			if(this.config.whitespace.parenConfig.whileConditionParens != null) {
				return this.config.whitespace.parenConfig.whileConditionParens;
			}
			return this.config.whitespace.parenConfig.conditionParens;
		case 5:
			if(this.config.whitespace.parenConfig.ifConditionParens != null) {
				return this.config.whitespace.parenConfig.ifConditionParens;
			}
			return this.config.whitespace.parenConfig.conditionParens;
		case 6:
			if(this.config.whitespace.parenConfig.sharpConditionParens != null) {
				return this.config.whitespace.parenConfig.sharpConditionParens;
			}
			return this.config.whitespace.parenConfig.conditionParens;
		case 7:
			if(this.config.whitespace.parenConfig.catchParens != null) {
				return this.config.whitespace.parenConfig.catchParens;
			}
			return this.config.whitespace.parenConfig.conditionParens;
		case 8:
			return this.config.whitespace.parenConfig.forLoopParens;
		case 9:
			return this.config.whitespace.parenConfig.expressionParens;
		}
	}
	markPOpen(token) {
		var openClosePolicy = this.determinePOpenPolicy(token);
		var policy = openClosePolicy.openingPolicy;
		var prev = this.getPreviousToken(token);
		if(prev != null) {
			var _g = prev.token.tok;
			switch(_g._hx_index) {
			case 4:
				var _g1 = _g.op;
				policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
				break;
			case 5:
				var _g2 = _g.op;
				if(prev.spacesAfter > 0) {
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"before");
				}
				break;
			case 6:
				var _g3 = _g.s;
				if(prev.spacesAfter > 0) {
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.add(policy,"before");
				}
				break;
			default:
			}
		}
		if(openClosePolicy.removeInnerWhenEmpty) {
			var next = this.getNextToken(token);
			if(next != null) {
				if(next.token.tok._hx_index == 19) {
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
				}
			}
		}
		this.successiveParenthesis(token,false,policy,this.config.whitespace.compressSuccessiveParenthesis);
	}
	markPClose(token) {
		var openClosePolicy = this.determinePOpenPolicy(token.parent);
		var policy = openClosePolicy.closingPolicy;
		if(openClosePolicy.removeInnerWhenEmpty) {
			var prev = this.getPreviousToken(token);
			if(prev != null) {
				if(prev.token.tok._hx_index == 18) {
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
				}
			}
		}
		this.successiveParenthesis(token,true,policy,this.config.whitespace.compressSuccessiveParenthesis);
	}
	determineBrOpenPolicy(token) {
		var type = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(token);
		if(type == null) {
			type = tokentree_utils_BrOpenType.UNKNOWN;
		}
		switch(type._hx_index) {
		case 0:
			return this.config.whitespace.bracesConfig.blockBraces;
		case 1:
			return this.config.whitespace.bracesConfig.typedefBraces;
		case 2:
			return this.config.whitespace.bracesConfig.objectLiteralBraces;
		case 3:
			return this.config.whitespace.bracesConfig.anonTypeBraces;
		case 4:
			return this.config.whitespace.bracesConfig.unknownBraces;
		}
	}
	markBrOpen(token) {
		var openClosePolicy = this.determineBrOpenPolicy(token);
		var policy = openClosePolicy.openingPolicy;
		if(openClosePolicy.removeInnerWhenEmpty) {
			var next = this.getNextToken(token);
			if(next != null) {
				if(next.token.tok._hx_index == 17) {
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
				}
			}
		}
		this.successiveParenthesis(token,false,policy,this.config.whitespace.compressSuccessiveParenthesis);
	}
	markBrClose(token) {
		var openClosePolicy = this.determineBrOpenPolicy(token.parent);
		var policy = openClosePolicy.closingPolicy;
		if(openClosePolicy.removeInnerWhenEmpty) {
			var prev = this.getPreviousToken(token);
			if(prev != null) {
				if(prev.token.tok._hx_index == 16) {
					policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
				}
			}
		}
		this.successiveParenthesis(token,true,policy,this.config.whitespace.compressSuccessiveParenthesis);
	}
	markComment(token) {
		var policy = "around";
		var prev = this.getPreviousToken(token);
		if(prev != null) {
			var _g = prev.token.tok;
			switch(_g._hx_index) {
			case 5:
				if(_g.op._hx_index == 9) {
					if(tokentree_utils_TokenTreeCheckUtils.isTypeParameter(prev.token)) {
						policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
					}
				}
				break;
			case 14:case 16:case 18:
				policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"before");
				break;
			default:
			}
		}
		var next = this.getNextToken(token);
		if(next != null) {
			switch(next.token.tok._hx_index) {
			case 13:
				policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
				break;
			case 15:case 17:case 19:
				policy = formatter_config__$WhitespacePolicy_WhitespacePolicy_$Impl_$.remove(policy,"after");
				break;
			default:
			}
		}
		this.whitespace(token,policy);
	}
	markAt(token) {
		var prev = this.getPreviousToken(token);
		if(prev == null) {
			return;
		}
		switch(prev.whitespaceAfter._hx_index) {
		case 0:
			break;
		case 1:case 2:
			return;
		}
		var _g1 = prev.token.tok;
		switch(_g1._hx_index) {
		case 0:
			var _g6 = _g1.k;
			break;
		case 1:
			var _g7 = _g1.c;
			break;
		case 2:
			var _g5 = _g1.s;
			break;
		case 3:
			var _g8 = _g1.s;
			break;
		case 4:
			var _g2 = _g1.op;
			break;
		case 5:
			if(_g1.op._hx_index == 9) {
				if(tokentree_utils_TokenTreeCheckUtils.isTypeParameter(prev.token)) {
					return;
				}
			}
			break;
		case 6:
			var _g10 = _g1.s;
			return;
		case 7:
			var _g9 = _g1.s;
			return;
		case 8:
			var _g4 = _g1.s;
			break;
		case 9:
			return;
		case 10:
			break;
		case 11:
			break;
		case 12:
			break;
		case 13:
			break;
		case 15:
			break;
		case 17:
			break;
		case 14:case 16:case 18:
			return;
		case 19:
			break;
		case 20:
			break;
		case 21:
			break;
		case 22:
			return;
		}
		this.whitespace(token,"before");
	}
}
$hxClasses["formatter.marker.MarkWhitespace"] = formatter_marker_MarkWhitespace;
formatter_marker_MarkWhitespace.__name__ = "formatter.marker.MarkWhitespace";
formatter_marker_MarkWhitespace.__super__ = formatter_marker_MarkerBase;
Object.assign(formatter_marker_MarkWhitespace.prototype, {
	__class__: formatter_marker_MarkWhitespace
});
class formatter_marker_wrapping_MarkWrappingBase extends formatter_marker_MarkerBase {
	constructor(config,parsedCode,indenter) {
		super(config,parsedCode,indenter);
		this.wrappingQueue = [];
	}
	noWrap(open,close) {
		var colon = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(open,haxeparser_TokenDef.BrOpen)),haxeparser_TokenDef.DblDot);
		if(colon != null) {
			var type = tokentree_utils_TokenTreeCheckUtils.getColonType(colon);
			switch(type._hx_index) {
			case 0:
				break;
			case 1:
				break;
			case 2:
				break;
			case 3:
				break;
			case 4:
				this.noLineEndBefore(open);
				break;
			case 5:
				break;
			case 6:
				break;
			}
		}
		this.noWrappingBetween(open,close);
		var _g = 0;
		var _g1 = open.children;
		_hx_loop1: while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 5:
				if(_g2.op._hx_index == 7) {
					continue;
				}
				break;
			case 9:case 13:
				continue;
			case 15:case 17:case 19:
				break _hx_loop1;
			default:
			}
			var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(child);
			if(lastChild == null) {
				continue;
			} else {
				switch(lastChild.tok._hx_index) {
				case 9:case 13:
					this.noLineEndAfter(lastChild);
					break;
				default:
				}
			}
		}
		this.noLineEndBefore(close);
	}
	keep2(open,close,items,addIndent,location) {
		var tokens = [];
		var _g = [];
		var _g1 = 0;
		while(_g1 < items.length) {
			var item = items[_g1];
			++_g1;
			_g.push(item.last);
		}
		tokens = _g;
		if(items.length > 0) {
			tokens.unshift(items[0].first);
		}
		var _g2 = [];
		var _g3 = 0;
		while(_g3 < items.length) {
			var item1 = items[_g3];
			++_g3;
			_g2.push(item1.first);
		}
		tokens = tokens.concat(_g2);
		if(close != null) {
			tokens.push(close);
		}
		tokens.push(close);
		var _g4 = 0;
		while(_g4 < tokens.length) {
			var token = tokens[_g4];
			++_g4;
			if(this.parsedCode.isOriginalNewlineBefore(token)) {
				this.lineEndBefore(token);
				this.additionalIndent(token,addIndent);
			} else {
				this.noLineEndBefore(token);
				this.wrapBefore(token,false);
			}
		}
	}
	keep(open,close,addIndent) {
		this.noWrappingBetween(open,close);
		var _g = 0;
		var _g1 = open.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var last = false;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 5:
				if(_g2.op._hx_index == 7) {
					continue;
				}
				break;
			case 9:case 13:
				continue;
			case 15:case 17:case 19:
				last = true;
				break;
			default:
			}
			if(this.parsedCode.isOriginalNewlineBefore(child)) {
				this.lineEndBefore(child);
				this.additionalIndent(child,addIndent);
			} else {
				this.noLineEndBefore(child);
				this.wrapBefore(child,false);
			}
			if(last) {
				break;
			}
		}
		if(!this.parsedCode.isOriginalNewlineBefore(open)) {
			this.noLineEndBefore(open);
		}
	}
	wrapChildOneLineEach2(open,close,items,addIndent,location,keepFirst) {
		if(keepFirst == null) {
			keepFirst = false;
		}
		if(addIndent == null) {
			addIndent = 0;
		}
		if(items.length <= 0) {
			return;
		}
		switch(location) {
		case "afterLast":
			var _g = 0;
			while(_g < items.length) {
				var item = items[_g];
				++_g;
				this.additionalIndent(item.first,addIndent);
				this.lineEndBefore(item.first);
				var _g1 = item.last.tok;
				if(_g1._hx_index == 2) {
					var _g11 = _g1.s;
					this.lineEndBefore(item.last);
				}
			}
			break;
		case "beforeLast":
			var item1 = items[0];
			this.additionalIndent(item1.first,addIndent);
			this.lineEndBefore(item1.first);
			item1 = items.pop();
			var _g2 = 0;
			while(_g2 < items.length) {
				var it = items[_g2];
				++_g2;
				this.additionalIndent(it.last,addIndent);
				this.lineEndBefore(it.last);
			}
			items.push(item1);
			break;
		}
		if(keepFirst) {
			if(open != null) {
				this.noLineEndAfter(open);
			}
			var lastToken = items[items.length - 1].last;
			if(lastToken.tok._hx_index != 9) {
				var next = this.getNextToken(lastToken);
				if(next == null) {
					this.noLineEndAfter(lastToken);
					return;
				}
				var _g3 = next.token.tok;
				switch(_g3._hx_index) {
				case 0:
					switch(_g3.k._hx_index) {
					case 22:case 23:case 36:
						this.noLineEndAfter(lastToken);
						break;
					default:
					}
					break;
				case 9:
					break;
				default:
					this.noLineEndAfter(lastToken);
				}
			}
		} else {
			var lastToken1 = items[items.length - 1].last;
			var next1 = this.getNextToken(lastToken1);
			if(next1 == null) {
				this.lineEndAfter(lastToken1);
				return;
			}
			var _g4 = next1.token.tok;
			switch(_g4._hx_index) {
			case 0:
				switch(_g4.k._hx_index) {
				case 22:case 23:case 36:
					this.lineEndAfter(lastToken1);
					break;
				default:
				}
				break;
			case 9:
				break;
			case 14:case 16:case 18:
				break;
			default:
				this.lineEndAfter(lastToken1);
			}
		}
	}
	wrapChildOneLineEach(open,close,addIndent,keepFirst) {
		if(keepFirst == null) {
			keepFirst = false;
		}
		if(addIndent == null) {
			addIndent = 0;
		}
		if(!keepFirst) {
			this.lineEndAfter(open);
		}
		var _g = 0;
		var _g1 = open.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 2:
				var _g21 = _g2.s;
				this.wrapChildOneLineEachSharp(child,addIndent,keepFirst);
				break;
			case 5:
				if(_g2.op._hx_index == 7) {
					if(keepFirst) {
						this.noLineEndBefore(child);
					}
					return;
				} else {
					this.additionalIndent(child,addIndent);
				}
				break;
			case 7:
				var _g3 = _g2.s;
				var prev = this.getPreviousToken(child);
				if(prev != null) {
					if(this.parsedCode.isOriginalSameLine(child,prev.token)) {
						this.noLineEndBefore(child);
					}
				}
				this.lineEndAfter(child);
				this.additionalIndent(child,addIndent);
				continue;
			case 15:case 17:case 19:
				if(keepFirst) {
					this.noLineEndBefore(child);
				}
				return;
			default:
				this.additionalIndent(child,addIndent);
			}
			var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(child);
			if(lastChild == null) {
				this.lineEndAfter(child);
			} else {
				this.lineEndAfter(lastChild);
			}
		}
		if(close == null) {
			return;
		}
		switch(close.tok._hx_index) {
		case 15:case 17:case 19:
			this.lineEndBefore(close);
			break;
		default:
		}
	}
	wrapChildOneLineEachSharp(sharp,addIndent,keepFirst) {
		if(keepFirst == null) {
			keepFirst = false;
		}
		if(addIndent == null) {
			addIndent = 0;
		}
		var children = sharp.children;
		var skipFirst = false;
		this.lineEndBefore(sharp);
		var _g = sharp.tok;
		if(_g._hx_index == 2) {
			switch(_g.s) {
			case "else":
				this.lineEndAfter(sharp);
				break;
			case "elseif":
				this.lineEndAfter(tokentree_utils_TokenTreeCheckUtils.getLastToken(sharp.getFirstChild()));
				skipFirst = true;
				break;
			case "end":
				this.lineEndAfter(sharp);
				return;
			case "if":
				this.lineEndAfter(tokentree_utils_TokenTreeCheckUtils.getLastToken(sharp.getFirstChild()));
				skipFirst = true;
				break;
			default:
			}
		}
		var _g2 = 0;
		while(_g2 < children.length) {
			var child = children[_g2];
			++_g2;
			if(skipFirst) {
				skipFirst = false;
				continue;
			}
			var _g21 = child.tok;
			switch(_g21._hx_index) {
			case 2:
				var _g4 = _g21.s;
				this.wrapChildOneLineEachSharp(child,addIndent,keepFirst);
				break;
			case 5:
				if(_g21.op._hx_index == 7) {
					if(keepFirst) {
						this.whitespace(child,"noneBefore");
					}
					return;
				} else {
					this.additionalIndent(child,addIndent);
				}
				break;
			case 7:
				var _g5 = _g21.s;
				var prev = this.getPreviousToken(child);
				if(prev != null) {
					if(this.parsedCode.isOriginalSameLine(child,prev.token)) {
						this.noLineEndBefore(child);
					}
				}
				this.lineEndAfter(child);
				this.additionalIndent(child,addIndent);
				continue;
			case 15:case 17:case 19:
				if(keepFirst) {
					this.whitespace(child,"noneBefore");
				}
				return;
			default:
				this.additionalIndent(child,addIndent);
			}
		}
	}
	wrapFillLine2AfterLast(open,close,items,maxLineLength,addIndent,useTrailing) {
		if(useTrailing == null) {
			useTrailing = false;
		}
		if(addIndent == null) {
			addIndent = 0;
		}
		if(items.length <= 0) {
			return;
		}
		var lineStart = open;
		if(lineStart == null) {
			lineStart = items[0].first;
		}
		lineStart = this.findLineStartToken(lineStart);
		if(lineStart == null) {
			return;
		}
		var indent = this.indenter.calcIndent(lineStart);
		var lineLength = this.calcLineLengthBefore(open) + this.indenter.calcAbsoluteIndent(indent) + this.calcTokenLength(open);
		var first = false;
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var tokenLength = item.firstLineLength;
			if(!first && lineLength + tokenLength >= maxLineLength) {
				this.lineEndBefore(item.first);
				this.additionalIndent(item.first,addIndent);
				lineLength = this.indenter.calcAbsoluteIndent(indent + 1 + addIndent);
				if(item.multiline) {
					lineLength = item.lastLineLength;
				} else {
					lineLength += item.firstLineLength;
				}
				continue;
			} else {
				this.noLineEndBefore(item.first);
				lineLength += tokenLength;
				first = false;
				if(item.multiline) {
					lineLength = item.lastLineLength;
				}
			}
		}
		if(useTrailing) {
			var lastItem = items[items.length - 1];
			var lengthAfter = this.calcLineLengthAfter(lastItem.last);
			if(lineLength + lengthAfter >= maxLineLength) {
				this.lineEndBefore(lastItem.first);
				this.additionalIndent(lastItem.first,addIndent);
			}
		}
		this.noLineEndAfter(open);
		this.wrapAfter(open,false);
	}
	wrapFillLineWithLeading2AfterLast(open,close,items,maxLineLength,addIndent) {
		if(addIndent == null) {
			addIndent = 0;
		}
		if(items.length <= 0) {
			return;
		}
		var lineStart = open;
		if(lineStart == null) {
			lineStart = items[0].first;
		}
		lineStart = this.findLineStartToken(lineStart);
		if(lineStart == null) {
			return;
		}
		var indent = this.indenter.calcIndent(lineStart);
		var lineLength = this.indenter.calcAbsoluteIndent(indent + 1 + addIndent);
		var first = true;
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var tokenLength = item.firstLineLength;
			if(lineLength + tokenLength >= maxLineLength) {
				this.lineEndBefore(item.first);
				this.additionalIndent(item.first,addIndent);
				lineLength = this.indenter.calcAbsoluteIndent(indent + 1 + addIndent);
				if(item.multiline) {
					lineLength = item.lastLineLength;
				} else {
					lineLength += item.firstLineLength;
				}
				continue;
			} else {
				if(!first) {
					this.noLineEndBefore(item.first);
				} else {
					this.lineEndBefore(item.first);
				}
				lineLength += tokenLength;
				first = false;
				if(item.multiline) {
					lineLength = item.lastLineLength;
				}
			}
		}
		var lastItem = items[items.length - 1];
		switch(lastItem.last.tok._hx_index) {
		case 9:
			break;
		case 11:
			break;
		case 15:case 17:case 19:
			if(this.isNewLineAfter(lastItem.last)) {
				this.lineEndAfter(lastItem.last);
			}
			break;
		default:
			this.lineEndAfter(lastItem.last);
		}
	}
	wrapFillLine2BeforeLast(open,close,items,maxLineLength,addIndent,useTrailing) {
		if(useTrailing == null) {
			useTrailing = false;
		}
		if(addIndent == null) {
			addIndent = 0;
		}
		if(items.length <= 0) {
			return;
		}
		var lineStart = open;
		if(lineStart == null) {
			lineStart = items[0].first;
		}
		lineStart = this.findLineStartToken(lineStart);
		if(lineStart == null) {
			return;
		}
		var indent = this.indenter.calcIndent(lineStart);
		var lineLength = this.calcLineLengthBefore(open) + this.indenter.calcAbsoluteIndent(indent) + this.calcTokenLength(open);
		var first = true;
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var tokenLength = item.firstLineLength;
			if(!first && lineLength + tokenLength >= maxLineLength) {
				lineLength = this.indenter.calcAbsoluteIndent(indent + 1 + addIndent);
				var prev = this.getPreviousToken(item.first);
				if(prev != null) {
					this.lineEndBefore(prev.token);
					this.additionalIndent(prev.token,addIndent);
					lineLength += prev.text.length;
				}
				if(item.multiline) {
					lineLength += item.lastLineLength;
				} else {
					lineLength += item.firstLineLength;
				}
				continue;
			} else {
				if(first) {
					this.noLineEndBefore(item.first);
				} else {
					var prev1 = this.getPreviousToken(item.first);
					if(prev1 != null) {
						this.noLineEndBefore(prev1.token);
					}
				}
				lineLength += tokenLength;
				first = false;
				if(item.multiline) {
					lineLength = this.indenter.calcAbsoluteIndent(indent + 1 + addIndent) + item.lastLineLength;
				}
			}
		}
		if(useTrailing) {
			var lastItem = items[items.length - 1];
			var lengthAfter = this.calcLineLengthAfter(lastItem.last);
			var prev2 = this.getPreviousToken(lastItem.first);
			if(prev2 != null && lineLength + lengthAfter >= maxLineLength) {
				this.lineEndBefore(prev2.token);
				this.additionalIndent(prev2.token,addIndent);
			}
		}
		this.noLineEndAfter(open);
		this.wrapAfter(open,false);
	}
	wrapFillLine(open,close,maxLineLength,addIndent,useTrailing) {
		if(useTrailing == null) {
			useTrailing = false;
		}
		if(addIndent == null) {
			addIndent = 0;
		}
		var lineStart = this.findLineStartToken(open);
		if(lineStart == null) {
			return;
		}
		var indent = this.indenter.calcIndent(lineStart);
		var lineLength = this.calcLineLengthBefore(open) + this.indenter.calcAbsoluteIndent(indent + addIndent);
		var first = true;
		var _g = 0;
		var _g1 = open.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 0:
				if(_g2.k._hx_index == 0) {
					continue;
				} else {
					this.additionalIndent(child,addIndent);
				}
				break;
			case 5:
				if(_g2.op._hx_index == 7) {
					this.whitespace(child,"noneBefore");
					return;
				} else {
					this.additionalIndent(child,addIndent);
				}
				break;
			case 7:
				var _g3 = _g2.s;
				var prev = this.getPreviousToken(child);
				if(prev != null) {
					if(this.parsedCode.isOriginalSameLine(child,prev.token)) {
						this.noLineEndBefore(child);
					}
				}
				this.lineEndAfter(child);
				this.additionalIndent(child,addIndent);
				continue;
			case 16:
				continue;
			case 15:case 17:case 19:
				this.whitespace(child,"noneBefore");
				if(useTrailing) {
					var trailing = this.calcLineLengthAfter(child);
					if(trailing + lineLength > maxLineLength) {
						var prev1 = child.previousSibling;
						if(prev1 == null) {
							return;
						}
						this.lineEndBefore(prev1);
						this.additionalIndent(prev1,addIndent);
					}
				}
				return;
			default:
				this.additionalIndent(child,addIndent);
			}
			var tokenLength = this.calcLength(child);
			var lastChild = tokentree_utils_TokenTreeCheckUtils.getLastToken(child);
			if(lastChild == null) {
				lastChild = child;
			}
			lineLength += tokenLength;
			if(lineLength > maxLineLength) {
				this.lineEndBefore(child);
				this.noLineEndAfter(lastChild);
				indent = this.indenter.calcIndent(child);
				lineLength = tokenLength + this.indenter.calcAbsoluteIndent(indent);
			} else {
				this.noLineEndAfter(lastChild);
			}
			if(first) {
				first = false;
				this.noLineEndBefore(child);
			}
		}
	}
	calcLineLength(token) {
		var indent = this.indenter.calcIndent(token);
		return super.calcLineLength(token) + this.indenter.calcAbsoluteIndent(indent);
	}
	hasEmptyFunctionBody(token) {
		var last = token.getLastChild();
		if(last.tok._hx_index == 9) {
			return true;
		}
		var body = token.nextSibling;
		if(body == null) {
			return true;
		}
		if(body.is(haxeparser_TokenDef.DblDot)) {
			body = body.nextSibling;
		}
		while(body != null && body.is(haxeparser_TokenDef.At)) body = body.nextSibling;
		if(body == null) {
			return true;
		}
		switch(body.tok._hx_index) {
		case 9:
			return true;
		case 16:
			var brClose = body.getFirstChild();
			if(brClose == null) {
				return false;
			}
			return brClose.is(haxeparser_TokenDef.BrClose);
		default:
			return false;
		}
	}
	makeWrappableItems(token) {
		var items = [];
		var lastIndex = -1;
		var _g = 0;
		var _g1 = token.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 5:
				if(_g2.op._hx_index == 7) {
					return items;
				}
				break;
			case 15:case 17:case 19:
				return items;
			default:
			}
			if(child.index <= lastIndex) {
				continue;
			}
			var endToken = this.findItemEnd(child);
			if(endToken == null) {
				continue;
			}
			lastIndex = endToken.index;
			var sameLine = this.isSameLineBetween(child,endToken,false);
			var firstLineLength = this.calcLengthUntilNewline(child,endToken);
			if(this.isMultilineToken(endToken)) {
				sameLine = false;
			}
			var lastLineLength = 0;
			if(!sameLine) {
				lastLineLength = this.calcLineLengthAfter(endToken);
			}
			var item = { first : child, last : endToken, multiline : !sameLine, firstLineLength : firstLineLength, lastLineLength : lastLineLength};
			items.push(item);
		}
		return items;
	}
	findItemEnd(child) {
		var endToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(child);
		if(endToken == null) {
			return null;
		}
		if(endToken.tok._hx_index == 13) {
			var next = this.getNextToken(endToken);
			if(next == null) {
				return endToken;
			}
			var _g = next.token.tok;
			switch(_g._hx_index) {
			case 6:
				var s = _g.s;
				if(this.parsedCode.isOriginalSameLine(endToken,next.token)) {
					return next.token;
				}
				break;
			case 7:
				var s1 = _g.s;
				if(this.parsedCode.isOriginalSameLine(endToken,next.token)) {
					return next.token;
				}
				break;
			default:
			}
			return endToken;
		}
		var next1 = this.getNextToken(endToken);
		if(next1 == null) {
			return endToken;
		}
		var _g1 = next1.token.tok;
		switch(_g1._hx_index) {
		case 5:
			if(_g1.op._hx_index == 7) {
				if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(next1.token),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt)) != null) {
					return endToken;
				}
				return this.findItemEnd(next1.token);
			} else {
				return this.findItemEnd(next1.token);
			}
			break;
		case 6:
			var _g4 = _g1.s;
			return this.findItemEnd(next1.token);
		case 7:
			var _g3 = _g1.s;
			return this.findItemEnd(next1.token);
		default:
		}
		return endToken;
	}
	determineWrapType2(rules,token,items) {
		var itemCount = items.length;
		if(items.length <= 0) {
			return { conditions : [], type : rules.defaultWrap, location : rules.defaultLocation, additionalIndent : rules.defaultAdditionalIndent};
		}
		var maxItemLength = 0;
		var totalItemLength = 0;
		var lineLength = this.calcLineLength(token);
		var hasMultiLineItem = false;
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			totalItemLength += item.firstLineLength + item.lastLineLength;
			if(item.multiline) {
				hasMultiLineItem = true;
			}
			var length = Math.floor(Math.max(item.firstLineLength,item.lastLineLength));
			if(length > maxItemLength) {
				maxItemLength = length;
			}
		}
		var _g1 = 0;
		var _g2 = rules.rules;
		while(_g1 < _g2.length) {
			var rule = _g2[_g1];
			++_g1;
			if(this.matchesRule(rule,itemCount,maxItemLength,totalItemLength,lineLength,hasMultiLineItem)) {
				return rule;
			}
		}
		return { conditions : [], type : rules.defaultWrap, location : rules.defaultLocation, additionalIndent : rules.defaultAdditionalIndent};
	}
	determineWrapType(rules,itemCount,maxItemLength,totalItemLength,lineLength) {
		var _g = 0;
		var _g1 = rules.rules;
		while(_g < _g1.length) {
			var rule = _g1[_g];
			++_g;
			if(this.matchesRule(rule,itemCount,maxItemLength,totalItemLength,lineLength,false)) {
				return rule;
			}
		}
		return { conditions : [], type : rules.defaultWrap, location : rules.defaultLocation, additionalIndent : rules.defaultAdditionalIndent};
	}
	matchesRule(rule,itemCount,maxItemLength,totalItemLength,lineLength,hasMultiLineItem) {
		var _g = 0;
		var _g1 = rule.conditions;
		while(_g < _g1.length) {
			var cond = _g1[_g];
			++_g;
			switch(cond.cond) {
			case "anyItemLength <= n":
				if(maxItemLength > cond.value) {
					return false;
				}
				break;
			case "anyItemLength >= n":
				if(maxItemLength < cond.value) {
					return false;
				}
				break;
			case "exceedsMaxLineLength":
				if(cond.value == 1) {
					if(lineLength <= this.config.wrapping.maxLineLength) {
						return false;
					}
				} else if(lineLength > this.config.wrapping.maxLineLength) {
					return false;
				}
				break;
			case "hasMultilineItems":
				if(cond.value == 1) {
					if(!hasMultiLineItem) {
						return false;
					}
				} else if(hasMultiLineItem) {
					return false;
				}
				break;
			case "itemCount <= n":
				if(itemCount > cond.value) {
					return false;
				}
				break;
			case "itemCount >= n":
				if(itemCount < cond.value) {
					return false;
				}
				break;
			case "lineLength <= n":
				if(lineLength > cond.value) {
					return false;
				}
				break;
			case "lineLength >= n":
				if(lineLength < cond.value) {
					return false;
				}
				break;
			case "totalItemLength <= n":
				if(totalItemLength > cond.value) {
					return false;
				}
				break;
			case "totalItemLength >= n":
				if(totalItemLength < cond.value) {
					return false;
				}
				break;
			}
		}
		return true;
	}
	applyRule(rule,open,close,items,addIndent,useTrailing) {
		var location = "afterLast";
		if(rule.location != null) {
			location = rule.location;
		}
		switch(rule.type) {
		case "equalNumber":
			break;
		case "fillLine":
			switch(location) {
			case "afterLast":
				this.wrapFillLine2AfterLast(open,close,items,this.config.wrapping.maxLineLength,addIndent,useTrailing);
				break;
			case "beforeLast":
				this.wrapFillLine2BeforeLast(open,close,items,this.config.wrapping.maxLineLength,addIndent,useTrailing);
				break;
			}
			break;
		case "fillLineWithLeadingBreak":
			switch(location) {
			case "afterLast":
				this.wrapFillLineWithLeading2AfterLast(open,close,items,this.config.wrapping.maxLineLength,addIndent);
				break;
			case "beforeLast":
				this.wrapFillLine2BeforeLast(open,close,items,this.config.wrapping.maxLineLength,addIndent,useTrailing);
				break;
			}
			break;
		case "keep":
			this.keep2(open,close,items,addIndent,location);
			break;
		case "noWrap":
			this.noWrappingBetween(open,close,false);
			break;
		case "onePerLine":
			this.wrapChildOneLineEach2(open,close,items,addIndent,location);
			break;
		case "onePerLineAfterFirst":
			this.wrapChildOneLineEach2(open,close,items,addIndent,location,true);
			break;
		}
	}
	applyWrappingQueue() {
		var _g = 0;
		var _g1 = this.wrappingQueue;
		while(_g < _g1.length) {
			var place = _g1[_g];
			++_g;
			this.applyWrappingPlace(place);
		}
	}
	applyWrappingPlace(place) {
		var rule = this.determineWrapType2(place.rules,place.start,place.items);
		var additionalIndent = rule.additionalIndent;
		if(place.overrideAdditionalIndent != null) {
			additionalIndent = place.overrideAdditionalIndent;
		}
		this.applyRule(rule,place.start,place.end,place.items,additionalIndent,place.useTrailing);
	}
	queueWrapping(place,name) {
		if(place.items == null || place.items.length <= 0) {
			return;
		}
		var startIndex = this.getPlaceStartIndex(place);
		var endIndex = this.getPlaceEndIndex(place);
		if(startIndex < 0 || endIndex < 0) {
			return;
		}
		var index = 0;
		var _g = 0;
		var _g1 = this.wrappingQueue.length;
		while(_g < _g1) {
			var index1 = _g++;
			var p = this.wrappingQueue[index1];
			var itemStart = this.getPlaceStartIndex(p);
			if(startIndex > itemStart) {
				continue;
			}
			if(startIndex == itemStart) {
				var itemEnd = this.getPlaceEndIndex(p);
				if(endIndex > itemEnd) {
					this.wrappingQueue.splice(index1,0,place);
					return;
				}
				continue;
			}
			this.wrappingQueue.splice(index1,0,place);
			return;
		}
		this.wrappingQueue.push(place);
	}
	getPlaceStartIndex(place) {
		if(place.items == null || place.items.length <= 0) {
			return -1;
		}
		if(place.start != null) {
			return place.start.index;
		} else {
			return place.items[0].first.index;
		}
	}
	getPlaceEndIndex(place) {
		if(place.items == null || place.items.length <= 0) {
			return -1;
		}
		if(place.end != null) {
			return place.end.index;
		} else {
			return place.items[place.items.length - 1].last.index;
		}
	}
}
$hxClasses["formatter.marker.wrapping.MarkWrappingBase"] = formatter_marker_wrapping_MarkWrappingBase;
formatter_marker_wrapping_MarkWrappingBase.__name__ = "formatter.marker.wrapping.MarkWrappingBase";
formatter_marker_wrapping_MarkWrappingBase.__super__ = formatter_marker_MarkerBase;
Object.assign(formatter_marker_wrapping_MarkWrappingBase.prototype, {
	__class__: formatter_marker_wrapping_MarkWrappingBase
	,wrappingQueue: null
});
class formatter_marker_wrapping_MarkWrapping extends formatter_marker_wrapping_MarkWrappingBase {
	constructor(config,parsedCode,indenter) {
		super(config,parsedCode,indenter);
	}
	run() {
		var _gthis = this;
		var wrappableTokens = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			switch(_g._hx_index) {
			case 5:
				switch(_g.op._hx_index) {
				case 0:
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				case 9:
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				case 22:
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				default:
				}
				break;
			case 7:
				var _g2 = _g.s;
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			case 10:
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			case 12:
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			case 13:
				_gthis.wrapAfter(token,true);
				return tokentree_FilterResult.GO_DEEPER;
			case 14:
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			case 16:
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			case 18:
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			default:
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
		wrappableTokens.reverse();
		var _g1 = 0;
		while(_g1 < wrappableTokens.length) {
			var token1 = wrappableTokens[_g1];
			++_g1;
			var _g3 = token1.tok;
			switch(_g3._hx_index) {
			case 5:
				switch(_g3.op._hx_index) {
				case 0:
					this.wrapAfter(token1,true);
					break;
				case 9:
					if(tokentree_utils_TokenTreeCheckUtils.isTypeParameter(token1)) {
						this.wrapTypeParameter(token1);
					}
					break;
				case 22:
					this.wrapAfter(token1,true);
					break;
				default:
				}
				break;
			case 7:
				var _g21 = _g3.s;
				this.wrapBefore(token1,false);
				break;
			case 10:
				break;
			case 12:
				this.wrapAfter(token1,true);
				break;
			case 14:
				this.arrayWrapping(token1);
				break;
			case 16:
				this.markBrWrapping(token1);
				break;
			case 18:
				this.markPWrapping(token1);
				break;
			default:
			}
		}
		this.markMethodChaining(this.parsedCode.root);
		this.markMultiVarChaining();
		this.markImplementsExtendsChaining();
		this.markOpBoolChaining();
		this.markOpAddChaining();
		this.markCasePatternChaining();
		this.applyWrappingQueue();
	}
	wrapTypeParameter(token) {
		var close = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
		if(token.children == null || token.children.length <= 0) {
			return;
		}
		var items = this.makeWrappableItems(token);
		this.queueWrapping({ start : token, end : null, items : items, rules : this.config.wrapping.typeParameter, useTrailing : true, overrideAdditionalIndent : null},"wrapTypeParameter");
		return;
	}
	markBrWrapping(token) {
		switch(tokentree_utils_TokenTreeCheckUtils.getBrOpenType(token)._hx_index) {
		case 0:
			break;
		case 1:
			this.typedefWrapping(token);
			break;
		case 2:
			this.objectLiteralWrapping(token);
			break;
		case 3:
			this.anonTypeWrapping(token);
			break;
		case 4:
			break;
		}
	}
	typedefWrapping(token) {
		var brClose = this.getCloseToken(token);
		if(this.isNewLineBefore(token)) {
			return;
		}
		if(this.parsedCode.isOriginalSameLine(token,brClose)) {
			this.noWrap(token,brClose);
			return;
		}
	}
	anonTypeWrapping(token) {
		var brClose = this.getCloseToken(token);
		if(token.children == null || token.children.length <= 0) {
			return;
		}
		if(token.index + 1 == brClose.index) {
			this.whitespace(token,"noneAfter");
			this.whitespace(brClose,"noneBefore");
			return;
		}
		var next = this.getNextToken(brClose);
		if(next != null) {
			var _g = next.token.tok;
			switch(_g._hx_index) {
			case 0:
				var _g4 = _g.k;
				this.lineEndAfter(brClose);
				break;
			case 1:
				var _g2 = _g.c;
				if(_g2._hx_index == 3) {
					switch(_g2.s) {
					case "from":case "to":
						this.noLineEndAfter(brClose);
						break;
					default:
						this.lineEndAfter(brClose);
					}
				} else {
					this.lineEndAfter(brClose);
				}
				break;
			case 5:
				if(_g.op._hx_index == 7) {
					this.noLineEndAfter(brClose);
					this.whitespace(brClose,"noneAfter");
				}
				break;
			case 16:
				switch(this.config.lineEnds.leftCurly) {
				case "after":case "none":
					this.noLineEndAfter(brClose);
					break;
				case "before":case "both":
					break;
				}
				break;
			default:
			}
		}
		if(!this.parsedCode.isOriginalSameLine(token,brClose)) {
			this.wrapChildOneLineEach(token,brClose,0);
			return;
		}
		var maxLength = 0;
		var totalLength = 0;
		var itemCount = 0;
		var _g1 = 0;
		var _g11 = token.children;
		_hx_loop1: while(_g1 < _g11.length) {
			var child = _g11[_g1];
			++_g1;
			var _g3 = child.tok;
			switch(_g3._hx_index) {
			case 7:
				var _g12 = _g3.s;
				this.wrapChildOneLineEach(token,brClose,0);
				return;
			case 17:
				break _hx_loop1;
			default:
			}
			var length = this.calcLength(child);
			totalLength += length;
			if(length > maxLength) {
				maxLength = length;
			}
			++itemCount;
		}
		var lineLength = this.calcLineLength(token);
		var rule = this.determineWrapType(this.config.wrapping.anonType,itemCount,maxLength,totalLength,lineLength);
		switch(rule.type) {
		case "equalNumber":
			break;
		case "fillLine":
			this.wrapFillLine(token,brClose,this.config.wrapping.maxLineLength,rule.additionalIndent);
			break;
		case "fillLineWithLeadingBreak":
			this.wrapFillLine(token,brClose,this.config.wrapping.maxLineLength,rule.additionalIndent);
			break;
		case "keep":
			this.keep(token,brClose,rule.additionalIndent);
			break;
		case "noWrap":
			this.noWrap(token,brClose);
			var prev = this.getPreviousToken(token);
			if(prev == null) {
				return;
			}
			switch(prev.whitespaceAfter._hx_index) {
			case 0:
				break;
			case 1:
				break;
			case 2:
				prev.whitespaceAfter = formatter_codedata_WhitespaceAfterType.Space;
				break;
			}
			break;
		case "onePerLine":
			this.wrapChildOneLineEach(token,brClose,rule.additionalIndent);
			break;
		case "onePerLineAfterFirst":
			this.wrapChildOneLineEach(token,brClose,rule.additionalIndent,true);
			break;
		}
	}
	objectLiteralWrapping(token) {
		var brClose = this.getCloseToken(token);
		if(token.children == null || token.children.length <= 1) {
			return;
		}
		if(token.index + 1 == brClose.index) {
			this.whitespace(token,"noneAfter");
			this.whitespace(brClose,"noneBefore");
			return;
		}
		if(!this.parsedCode.isOriginalSameLine(token,brClose)) {
			this.wrapChildOneLineEach(token,brClose,0);
			return;
		}
		var maxLength = 0;
		var totalLength = 0;
		var itemCount = 0;
		var _g = 0;
		var _g1 = token.children;
		_hx_loop1: while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 7:
				var _g11 = _g2.s;
				this.wrapChildOneLineEach(token,brClose,0);
				return;
			case 17:
				break _hx_loop1;
			default:
			}
			var length = this.calcLength(child);
			totalLength += length;
			if(length > maxLength) {
				maxLength = length;
			}
			++itemCount;
		}
		var lineLength = this.calcLineLength(token);
		var rule = this.determineWrapType(this.config.wrapping.objectLiteral,itemCount,maxLength,totalLength,lineLength);
		switch(rule.type) {
		case "equalNumber":
			break;
		case "fillLine":
			this.wrapFillLine(token,brClose,this.config.wrapping.maxLineLength,rule.additionalIndent);
			break;
		case "fillLineWithLeadingBreak":
			this.wrapFillLine(token,brClose,this.config.wrapping.maxLineLength,rule.additionalIndent);
			break;
		case "keep":
			this.keep(token,brClose,rule.additionalIndent);
			break;
		case "noWrap":
			this.noWrap(token,brClose);
			var next = this.getNextToken(brClose);
			if(next != null) {
				switch(next.token.tok._hx_index) {
				case 11:
					this.noLineEndAfter(brClose);
					break;
				case 10:case 13:
					this.whitespace(brClose,"noneAfter");
					break;
				default:
				}
			}
			var prev = this.getPreviousToken(token);
			if(prev != null) {
				var _g21 = prev.token.tok;
				switch(_g21._hx_index) {
				case 0:
					var _g4 = _g21.k;
					this.noLineEndBefore(token);
					this.whitespace(token,"before");
					break;
				case 5:
					var _g3 = _g21.op;
					this.noLineEndBefore(token);
					break;
				case 13:case 18:
					this.noLineEndBefore(token);
					break;
				default:
				}
			}
			break;
		case "onePerLine":
			this.wrapChildOneLineEach(token,brClose,rule.additionalIndent);
			break;
		case "onePerLineAfterFirst":
			this.wrapChildOneLineEach(token,brClose,rule.additionalIndent,true);
			break;
		}
	}
	markPWrapping(token) {
		var pClose = this.getCloseToken(token);
		switch(tokentree_utils_TokenTreeCheckUtils.getPOpenType(token)._hx_index) {
		case 0:
			this.wrapMetadataCallParameter(token);
			break;
		case 1:
			this.wrapFunctionSignature(token);
			break;
		case 2:
			this.wrapCallParameter(token);
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		}
	}
	arrayWrapping(token) {
		var bkClose = this.getCloseToken(token);
		if(token.children == null || token.children.length <= 0) {
			return;
		}
		var items = this.makeWrappableItems(token);
		var itemsWithoutMetadata = [];
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var _g1 = item.first.tok;
			switch(_g1._hx_index) {
			case 0:
				switch(_g1.k._hx_index) {
				case 5:case 7:
					if(this.config.sameLine.comprehensionFor == "keep") {
						return;
					}
					itemsWithoutMetadata.push(item);
					break;
				default:
					itemsWithoutMetadata.push(item);
				}
				break;
			case 21:
				if(item.firstLineLength > 30) {
					this.lineEndBefore(token);
					this.lineEndBefore(item.first);
				}
				break;
			default:
				itemsWithoutMetadata.push(item);
			}
		}
		if(this.config.wrapping.arrayMatrixWrap != "noMatrixWrap") {
			if(this.tryMatrixWrap(token,bkClose,itemsWithoutMetadata)) {
				return;
			}
		}
		this.applyWrappingPlace({ start : token, end : bkClose, items : itemsWithoutMetadata, rules : this.config.wrapping.arrayWrap, useTrailing : true, overrideAdditionalIndent : null});
	}
	tryMatrixWrap(open,close,items) {
		var prev = null;
		var run = 1;
		var lineRun = 0;
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var index = _g++;
			var item = items[index];
			if(prev == null) {
				prev = item;
				continue;
			}
			if(item.multiline) {
				return false;
			}
			if(this.parsedCode.isOriginalSameLine(prev.first,item.first)) {
				++run;
				prev = item;
				continue;
			}
			if(lineRun != 0) {
				if(lineRun != run) {
					return false;
				}
			}
			lineRun = run;
			run = 1;
			prev = item;
		}
		if(lineRun <= 1) {
			return false;
		}
		if(lineRun != run) {
			return false;
		}
		this.lineEndAfter(open);
		if(this.config.wrapping.arrayMatrixWrap == "matrixWrapWithAlign") {
			var _g2 = [];
			var _g3 = 0;
			var _g4 = lineRun;
			while(_g3 < _g4) {
				var i = _g3++;
				_g2.push(0);
			}
			var maxCols = _g2;
			var _g5 = 0;
			var _g6 = items.length;
			while(_g5 < _g6) {
				var index1 = _g5++;
				var item1 = items[index1];
				var col = index1 % lineRun;
				if(item1.firstLineLength > maxCols[col]) {
					maxCols[col] = item1.firstLineLength;
				}
			}
			var _g7 = 0;
			var _g8 = items.length;
			while(_g7 < _g8) {
				var index2 = _g7++;
				var item2 = items[index2];
				var expectedLength = maxCols[index2 % lineRun];
				if(index2 == items.length - 1) {
					if(item2.last.tok._hx_index == 13) {
						--expectedLength;
					} else {
						expectedLength -= 2;
					}
				}
				if(item2.firstLineLength < expectedLength) {
					this.spacesBefore(item2.first,expectedLength - item2.firstLineLength);
				}
			}
		}
		var index3 = lineRun - 1;
		while(index3 < items.length) {
			var item3 = items[index3];
			this.lineEndAfter(item3.last);
			index3 += lineRun;
		}
		return true;
	}
	calcLineLength(token) {
		if(token == null) {
			return 0;
		}
		return super.calcLineLength(token);
	}
	wrapFunctionSignature(token) {
		var pClose = this.getCloseToken(token);
		if(token.children == null || token.children.length <= 0) {
			return;
		}
		var rules = this.config.wrapping.functionSignature;
		var _g = token.parent.tok;
		if(_g._hx_index == 0) {
			if(_g.k._hx_index == 0) {
				rules = this.config.wrapping.anonFunctionSignature;
			}
		}
		var emptyBody = this.hasEmptyFunctionBody(token);
		var items = this.makeWrappableItems(token);
		var addIndent = null;
		if(emptyBody) {
			addIndent = 0;
		}
		this.queueWrapping({ start : token, end : pClose, items : items, rules : rules, useTrailing : true, overrideAdditionalIndent : addIndent},"wrapFunctionSignature");
	}
	wrapCallParameter(token) {
		var pClose = this.getCloseToken(token);
		if(token.children == null || token.children.length <= 0) {
			return;
		}
		var items = this.makeWrappableItems(token);
		this.queueWrapping({ start : token, end : pClose, items : items, rules : this.config.wrapping.callParameter, useTrailing : true, overrideAdditionalIndent : null},"wrapCallParameter");
	}
	wrapMetadataCallParameter(token) {
		var pClose = this.getCloseToken(token);
		if(token.children == null || token.children.length <= 0) {
			return;
		}
		var items = this.makeWrappableItems(token);
		this.queueWrapping({ start : token, end : pClose, items : items, rules : this.config.wrapping.metadataCallParameter, useTrailing : false, overrideAdditionalIndent : null},"wrapMetadataCallParameter");
	}
	markMethodChaining(startToken) {
		var _gthis = this;
		if(startToken == null) {
			return;
		}
		var chainStarts = startToken.filterCallback(function(token,index) {
			if(token.tok._hx_index == 10) {
				var prev = _gthis.getPreviousToken(token);
				_hx_loop1: while(prev != null) {
					var _g = prev.token.tok;
					switch(_g._hx_index) {
					case 6:
						var _g2 = _g.s;
						break;
					case 7:
						var _g1 = _g.s;
						break;
					case 19:
						_gthis.wrapBefore(token,true);
						return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
					default:
						break _hx_loop1;
					}
					prev = _gthis.getPreviousToken(prev.token);
				}
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
		var _g3 = 0;
		while(_g3 < chainStarts.length) {
			var chainStart = chainStarts[_g3];
			++_g3;
			this.markInternalMethodChaining(chainStart);
			this.markSingleMethodChain(chainStart);
		}
	}
	markInternalMethodChaining(startToken) {
		var _gthis = this;
		startToken.filterCallback(function(token,index) {
			switch(token.tok._hx_index) {
			case 14:case 16:case 18:
				_gthis.markMethodChaining(token);
				break;
			default:
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
	}
	markSingleMethodChain(chainStart) {
		var _gthis = this;
		var chainedCalls = chainStart.filterCallback(function(token,index) {
			switch(token.tok._hx_index) {
			case 10:
				var prev = _gthis.getPreviousToken(token);
				_hx_loop1: while(prev != null) {
					var _g = prev.token.tok;
					switch(_g._hx_index) {
					case 6:
						var _g2 = _g.s;
						break;
					case 7:
						var _g1 = _g.s;
						break;
					case 19:
						return tokentree_FilterResult.FOUND_GO_DEEPER;
					default:
						break _hx_loop1;
					}
					prev = _gthis.getPreviousToken(prev.token);
				}
				return tokentree_FilterResult.GO_DEEPER;
			case 14:case 16:case 18:
				return tokentree_FilterResult.SKIP_SUBTREE;
			default:
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
		var firstMethodCall = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.isCIdent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(chainStart))),haxeparser_TokenDef.Dot);
		if(firstMethodCall != null) {
			chainedCalls.unshift(firstMethodCall);
			chainStart = firstMethodCall;
		}
		var items = [];
		var chainEnd = tokentree_utils_TokenTreeCheckUtils.getLastToken(chainStart);
		var info = this.getPreviousToken(chainStart);
		var chainOpen = chainStart.parent;
		if(info != null) {
			chainOpen = info.token;
		}
		var _g3 = 0;
		var _g11 = chainedCalls.length;
		while(_g3 < _g11) {
			var index1 = _g3++;
			var child = chainedCalls[index1];
			var endToken = chainEnd;
			if(index1 + 1 < chainedCalls.length) {
				var next = chainedCalls[index1 + 1];
				info = this.getPreviousToken(next);
				if(info != null) {
					endToken = info.token;
				}
			}
			items.push(this.makeWrappableItem(child,endToken));
		}
		chainEnd = null;
		if(chainOpen != null) {
			chainEnd = this.getCloseToken(chainOpen);
		}
		this.queueWrapping({ start : chainOpen, end : chainEnd, items : items, rules : this.config.wrapping.methodChain, useTrailing : false, overrideAdditionalIndent : null},"markSingleMethodChain");
	}
	markOpBoolChaining() {
		var chainStarts = this.parsedCode.root.filterCallback(function(token,index) {
			if(!token.hasChildren()) {
				return tokentree_FilterResult.SKIP_SUBTREE;
			}
			var _g = 0;
			var _g1 = token.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var _g2 = child.tok;
				if(_g2._hx_index == 5) {
					switch(_g2.op._hx_index) {
					case 14:case 15:
						return tokentree_FilterResult.FOUND_GO_DEEPER;
					default:
					}
				}
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
		var _g3 = 0;
		while(_g3 < chainStarts.length) {
			var chainStart = chainStarts[_g3];
			++_g3;
			this.markSingleOpBoolChain(chainStart);
		}
	}
	markSingleOpBoolChain(itemStart) {
		var items = [];
		var firstItemStart = itemStart;
		var _g = itemStart.tok;
		if(_g._hx_index == 5) {
			var _g1 = _g.op;
			if(itemStart.previousSibling != null) {
				firstItemStart = itemStart.previousSibling;
			}
		}
		var prev = this.getPreviousToken(firstItemStart);
		var chainStart = itemStart;
		if(prev != null) {
			chainStart = prev.token;
		}
		var chainEnd = itemStart.getLastChild();
		if(chainEnd != null) {
			chainEnd = tokentree_utils_TokenTreeCheckUtils.getLastToken(chainEnd);
			switch(chainEnd.tok._hx_index) {
			case 9:case 13:case 19:
				break;
			default:
				var next = this.getNextToken(chainEnd);
				if(next != null) {
					chainEnd = next.token;
				}
			}
		}
		var first = true;
		var _g2 = 0;
		var _g3 = itemStart.children;
		while(_g2 < _g3.length) {
			var child = _g3[_g2];
			++_g2;
			var _g21 = child.tok;
			if(_g21._hx_index == 5) {
				switch(_g21.op._hx_index) {
				case 14:case 15:
					if(first) {
						itemStart = firstItemStart;
						first = false;
					}
					items.push(this.makeWrappableItem(itemStart,child));
					var next1 = this.getNextToken(child);
					if(next1 == null) {
						return;
					}
					itemStart = next1.token;
					break;
				default:
					continue;
				}
			} else {
				continue;
			}
		}
		items.push(this.makeWrappableItem(itemStart,tokentree_utils_TokenTreeCheckUtils.getLastToken(itemStart)));
		this.queueWrapping({ start : chainStart, end : chainEnd, items : items, rules : this.config.wrapping.opBoolChain, useTrailing : false, overrideAdditionalIndent : null},"markSingleOpBoolChain");
	}
	markCasePatternChaining() {
		var chainStarts = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 0) {
				if(_g.k._hx_index == 15) {
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < chainStarts.length) {
			var chainStart = chainStarts[_g1];
			++_g1;
			this.markSingleCasePatternChain(chainStart);
		}
	}
	markSingleCasePatternChain(itemContainer) {
		var items = [];
		var chainStart = itemContainer;
		var chainEnd = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(itemContainer,haxeparser_TokenDef.DblDot);
		var next = this.getNextToken(chainStart);
		if(next == null) {
			return;
		}
		var itemStart = next.token;
		var _g = 0;
		var _g1 = itemContainer.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.tok._hx_index == 11) {
				break;
			} else {
				var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(child);
				items.push(this.makeWrappableItem(child,lastToken));
			}
		}
		this.queueWrapping({ start : chainStart, end : chainEnd, items : items, rules : this.config.wrapping.casePattern, useTrailing : false, overrideAdditionalIndent : null},"markSingleCasePatternChain");
	}
	markOpAddChaining() {
		var chainStarts = this.parsedCode.root.filterCallback(function(token,index) {
			if(!token.hasChildren()) {
				return tokentree_FilterResult.SKIP_SUBTREE;
			}
			var _g = 0;
			var _g1 = token.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var _g2 = child.tok;
				if(_g2._hx_index == 5) {
					switch(_g2.op._hx_index) {
					case 0:case 3:
						return tokentree_FilterResult.FOUND_GO_DEEPER;
					default:
					}
				}
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
		var _g3 = 0;
		while(_g3 < chainStarts.length) {
			var chainStart = chainStarts[_g3];
			++_g3;
			this.markSingleOpAddChain(chainStart);
		}
	}
	markSingleOpAddChain(itemContainer) {
		var items = [];
		var prev = this.getPreviousToken(this.findOpAddItemStart(itemContainer));
		var chainStart = this.findOpAddItemStart(itemContainer);
		var chainEnd = itemContainer.getLastChild();
		if(chainStart.tok._hx_index == 18) {
			var type = tokentree_utils_TokenTreeCheckUtils.getPOpenType(chainStart);
			switch(type._hx_index) {
			case 0:
				return;
			case 1:
				break;
			case 2:
				break;
			case 3:
				break;
			case 4:
				break;
			case 5:
				break;
			case 6:
				break;
			case 7:
				break;
			case 8:
				break;
			case 9:
				break;
			}
		}
		if(chainEnd != null) {
			chainEnd = tokentree_utils_TokenTreeCheckUtils.getLastToken(chainEnd);
			switch(chainEnd.tok._hx_index) {
			case 9:case 13:
				break;
			default:
				var next = this.getNextToken(chainEnd);
				if(next != null) {
					chainEnd = next.token;
				}
			}
		}
		var next1 = this.getNextToken(chainStart);
		if(next1 == null) {
			return;
		}
		var itemStart = next1.token;
		var _g1 = 0;
		var _g2 = itemContainer.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var _g11 = child.tok;
			if(_g11._hx_index == 5) {
				switch(_g11.op._hx_index) {
				case 0:case 3:
					items.push(this.makeWrappableItem(itemStart,child));
					var next2 = this.getNextToken(child);
					if(next2 == null) {
						continue;
					}
					itemStart = next2.token;
					break;
				default:
					continue;
				}
			} else {
				continue;
			}
		}
		items.push(this.makeWrappableItem(itemStart,tokentree_utils_TokenTreeCheckUtils.getLastToken(itemStart)));
		this.queueWrapping({ start : chainStart, end : null, items : items, rules : this.config.wrapping.opAddSubChain, useTrailing : false, overrideAdditionalIndent : null},"markSingleOpAddChain");
	}
	findOpAddItemStart(itemStart) {
		if(itemStart == null || itemStart.tok == null) {
			return itemStart;
		}
		var parent = itemStart;
		while(parent != null && parent.tok != null) {
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 23:case 28:case 36:
					break;
				default:
					return parent;
				}
				break;
			case 5:
				var _g1 = _g.op;
				switch(_g1._hx_index) {
				case 4:
					return parent;
				case 20:
					var _g2 = _g1.op;
					return parent;
				default:
				}
				break;
			case 14:case 16:case 18:
				return parent;
			default:
			}
			itemStart = parent;
			parent = parent.parent;
		}
		return itemStart;
	}
	makeWrappableItem(start,end) {
		var sameLine = this.isSameLineBetween(start,end,false);
		var firstLineLength = 0;
		var lastLineLength = 0;
		if(sameLine) {
			firstLineLength = this.calcLengthBetween(start,end) + this.calcTokenLength(end);
		} else {
			firstLineLength = this.calcLengthUntilNewline(start,end);
			lastLineLength = this.calcLineLengthBefore(end) + this.calcTokenLength(end);
		}
		return { first : start, last : end, multiline : !sameLine, firstLineLength : firstLineLength, lastLineLength : lastLineLength};
	}
	markImplementsExtendsChaining() {
		var classesAndInterfaces = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 0) {
				switch(_g.k._hx_index) {
				case 1:case 27:
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				case 26:case 31:case 39:
					return tokentree_FilterResult.SKIP_SUBTREE;
				default:
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < classesAndInterfaces.length) {
			var type = classesAndInterfaces[_g1];
			++_g1;
			var items = [];
			var impls = type.filterCallback(function(token1,index1) {
				var _g2 = token1.tok;
				if(_g2._hx_index == 0) {
					switch(_g2.k._hx_index) {
					case 0:case 2:
						return tokentree_FilterResult.SKIP_SUBTREE;
					case 11:case 12:
						return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
					default:
						return tokentree_FilterResult.GO_DEEPER;
					}
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
			});
			var _g3 = 0;
			while(_g3 < impls.length) {
				var impl = impls[_g3];
				++_g3;
				var endToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(impl);
				items.push(this.makeWrappableItem(impl,endToken));
			}
			if(items.length <= 0) {
				continue;
			}
			var chainOpen = items[0].first;
			var prev = this.getPreviousToken(items[0].first);
			if(prev != null) {
				chainOpen = prev.token;
			}
			var chainEnd = items[items.length - 1].last;
			this.queueWrapping({ start : chainOpen, end : chainEnd, items : items, rules : this.config.wrapping.implementsExtends, useTrailing : false, overrideAdditionalIndent : null},"markImplementsExtendsChaining");
		}
	}
	markMultiVarChaining() {
		var allVars = this.parsedCode.root.filterCallback(function(token,index) {
			var _g = token.tok;
			if(_g._hx_index == 0) {
				if(_g.k._hx_index == 2) {
					if(token.hasChildren() && token.children.length > 1) {
						return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
					}
					return tokentree_FilterResult.SKIP_SUBTREE;
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < allVars.length) {
			var v = allVars[_g1];
			++_g1;
			var items = [];
			var _g2 = 0;
			var _g11 = v.children;
			while(_g2 < _g11.length) {
				var child = _g11[_g2];
				++_g2;
				var endToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(child);
				items.push(this.makeWrappableItem(child,endToken));
			}
			if(items.length <= 0) {
				continue;
			}
			var chainOpen = v;
			var chainEnd = tokentree_utils_TokenTreeCheckUtils.getLastToken(v);
			this.queueWrapping({ start : chainOpen, end : chainEnd, items : items, rules : this.config.wrapping.multiVar, useTrailing : false, overrideAdditionalIndent : null},"markMultiVarChaining");
		}
	}
}
$hxClasses["formatter.marker.wrapping.MarkWrapping"] = formatter_marker_wrapping_MarkWrapping;
formatter_marker_wrapping_MarkWrapping.__name__ = "formatter.marker.wrapping.MarkWrapping";
formatter_marker_wrapping_MarkWrapping.__super__ = formatter_marker_wrapping_MarkWrappingBase;
Object.assign(formatter_marker_wrapping_MarkWrapping.prototype, {
	__class__: formatter_marker_wrapping_MarkWrapping
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_CallStack {
	static getStack(e) {
		if(e == null) {
			return [];
		}
		var oldValue = Error.prepareStackTrace;
		Error.prepareStackTrace = function(error,callsites) {
			var stack = [];
			var _g = 0;
			while(_g < callsites.length) {
				var site = callsites[_g];
				++_g;
				if(haxe_CallStack.wrapCallSite != null) {
					site = haxe_CallStack.wrapCallSite(site);
				}
				var method = null;
				var fullName = site.getFunctionName();
				if(fullName != null) {
					var idx = fullName.lastIndexOf(".");
					if(idx >= 0) {
						var className = HxOverrides.substr(fullName,0,idx);
						var methodName = HxOverrides.substr(fullName,idx + 1,null);
						method = haxe_StackItem.Method(className,methodName);
					}
				}
				var fileName = site.getFileName();
				var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
				if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
					fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
				}
				stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
			}
			return stack;
		};
		var a = haxe_CallStack.makeStack(e.stack);
		Error.prepareStackTrace = oldValue;
		return a;
	}
	static exceptionStack() {
		return haxe_CallStack.getStack(haxe_CallStack.lastException);
	}
	static toString(stack) {
		var b = new StringBuf();
		var _g = 0;
		while(_g < stack.length) {
			var s = stack[_g];
			++_g;
			b.b += "\nCalled from ";
			haxe_CallStack.itemToString(b,s);
		}
		return b.b;
	}
	static itemToString(b,s) {
		switch(s._hx_index) {
		case 0:
			b.b += "a C function";
			break;
		case 1:
			var m = s.m;
			b.b += "module ";
			b.b += m == null ? "null" : "" + m;
			break;
		case 2:
			var col = s.column;
			var line = s.line;
			var file = s.file;
			var s1 = s.s;
			if(s1 != null) {
				haxe_CallStack.itemToString(b,s1);
				b.b += " (";
			}
			b.b += file == null ? "null" : "" + file;
			b.b += " line ";
			b.b += line == null ? "null" : "" + line;
			if(col != null) {
				b.b += " column ";
				b.b += col == null ? "null" : "" + col;
			}
			if(s1 != null) {
				b.b += ")";
			}
			break;
		case 3:
			var meth = s.method;
			var cname = s.classname;
			b.b += Std.string(cname == null ? "<unknown>" : cname);
			b.b += ".";
			b.b += meth == null ? "null" : "" + meth;
			break;
		case 4:
			var n = s.v;
			b.b += "local function #";
			b.b += n == null ? "null" : "" + n;
			break;
		}
	}
	static makeStack(s) {
		if(s == null) {
			return [];
		} else if(typeof(s) == "string") {
			var stack = s.split("\n");
			if(stack[0] == "Error") {
				stack.shift();
			}
			var m = [];
			var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
			var _g = 0;
			while(_g < stack.length) {
				var line = stack[_g];
				++_g;
				if(rie10.match(line)) {
					var path = rie10.matched(1).split(".");
					var meth = path.pop();
					var file = rie10.matched(2);
					var line1 = Std.parseInt(rie10.matched(3));
					var column = Std.parseInt(rie10.matched(4));
					m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
				} else {
					m.push(haxe_StackItem.Module(StringTools.trim(line)));
				}
			}
			return m;
		} else {
			return s;
		}
	}
}
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = "haxe.CallStack";
class haxe_IMap {
}
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
	,get: null
	,keys: null
});
class haxe_ds_ArraySort {
	static sort(a,cmp) {
		haxe_ds_ArraySort.rec(a,cmp,0,a.length);
	}
	static rec(a,cmp,from,to) {
		var middle = from + to >> 1;
		if(to - from < 12) {
			if(to <= from) {
				return;
			}
			var _g = from + 1;
			var _g1 = to;
			while(_g < _g1) {
				var i = _g++;
				var j = i;
				while(j > from) {
					if(cmp(a[j],a[j - 1]) < 0) {
						haxe_ds_ArraySort.swap(a,j - 1,j);
					} else {
						break;
					}
					--j;
				}
			}
			return;
		}
		haxe_ds_ArraySort.rec(a,cmp,from,middle);
		haxe_ds_ArraySort.rec(a,cmp,middle,to);
		haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
	}
	static doMerge(a,cmp,from,pivot,to,len1,len2) {
		var first_cut;
		var second_cut;
		var len11;
		var len22;
		if(len1 == 0 || len2 == 0) {
			return;
		}
		if(len1 + len2 == 2) {
			if(cmp(a[pivot],a[from]) < 0) {
				haxe_ds_ArraySort.swap(a,pivot,from);
			}
			return;
		}
		if(len1 > len2) {
			len11 = len1 >> 1;
			first_cut = from + len11;
			second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
			len22 = second_cut - pivot;
		} else {
			len22 = len2 >> 1;
			second_cut = pivot + len22;
			first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
			len11 = first_cut - from;
		}
		haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
		var new_mid = first_cut + len22;
		haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
		haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
	}
	static rotate(a,cmp,from,mid,to) {
		if(from == mid || mid == to) {
			return;
		}
		var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
		while(n-- != 0) {
			var val = a[from + n];
			var shift = mid - from;
			var p1 = from + n;
			var p2 = from + n + shift;
			while(p2 != from + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(to - p2 > shift) {
					p2 += shift;
				} else {
					p2 = from + (shift - (to - p2));
				}
			}
			a[p1] = val;
		}
	}
	static gcd(m,n) {
		while(n != 0) {
			var t = m % n;
			m = n;
			n = t;
		}
		return m;
	}
	static upper(a,cmp,from,to,val) {
		var len = to - from;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[val],a[mid]) < 0) {
				len = half;
			} else {
				from = mid + 1;
				len = len - half - 1;
			}
		}
		return from;
	}
	static lower(a,cmp,from,to,val) {
		var len = to - from;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[mid],a[val]) < 0) {
				from = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		return from;
	}
	static swap(a,i,j) {
		var tmp = a[i];
		a[i] = a[j];
		a[j] = tmp;
	}
}
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	get(key) {
		return this.h[key];
	}
	keys() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
}
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
	,h: null
});
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	push(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	remove(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
}
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
	,h: null
	,q: null
	,length: null
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
	,item: null
	,next: null
});
class haxe_ds_StringMap {
	constructor() {
		this.h = { };
	}
	get(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	setReserved(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	getReserved(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	existsReserved(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	keys() {
		return HxOverrides.iter(this.arrayKeys());
	}
	arrayKeys() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
}
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
	,h: null
	,rh: null
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			var buf = new Uint8Array(s.length << 1);
			var _g = 0;
			var _g1 = s.length;
			while(_g < _g1) {
				var i = _g++;
				var c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		var a = [];
		var i1 = 0;
		while(i1 < s.length) {
			var c1 = s.charCodeAt(i1++);
			if(55296 <= c1 && c1 <= 56319) {
				c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
			}
			if(c1 <= 127) {
				a.push(c1);
			} else if(c1 <= 2047) {
				a.push(192 | c1 >> 6);
				a.push(128 | c1 & 63);
			} else if(c1 <= 65535) {
				a.push(224 | c1 >> 12);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			} else {
				a.push(240 | c1 >> 18);
				a.push(128 | c1 >> 12 & 63);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
}
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
	,length: null
	,b: null
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
Object.assign(haxe_io_Eof.prototype, {
	__class__: haxe_io_Eof
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class haxe_iterators_MapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
}
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
Object.assign(haxe_iterators_MapKeyValueIterator.prototype, {
	__class__: haxe_iterators_MapKeyValueIterator
	,map: null
	,keys: null
});
var haxe_macro_StringLiteralKind = $hxEnums["haxe.macro.StringLiteralKind"] = { __ename__ : true, __constructs__ : ["DoubleQuotes","SingleQuotes"]
	,DoubleQuotes: {_hx_index:0,__enum__:"haxe.macro.StringLiteralKind",toString:$estr}
	,SingleQuotes: {_hx_index:1,__enum__:"haxe.macro.StringLiteralKind",toString:$estr}
};
var haxe_macro_Constant = $hxEnums["haxe.macro.Constant"] = { __ename__ : true, __constructs__ : ["CInt","CFloat","CString","CIdent","CRegexp"]
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["f"],$_)
	,CString: ($_=function(s,kind) { return {_hx_index:2,s:s,kind:kind,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["s","kind"],$_)
	,CIdent: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["s"],$_)
	,CRegexp: ($_=function(r,opt) { return {_hx_index:4,r:r,opt:opt,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["r","opt"],$_)
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
class haxe_macro_Printer {
	constructor(tabString) {
		if(tabString == null) {
			tabString = "\t";
		}
		this.tabs = "";
		this.tabString = tabString;
	}
	printUnop(op) {
		switch(op._hx_index) {
		case 0:
			return "++";
		case 1:
			return "--";
		case 2:
			return "!";
		case 3:
			return "-";
		case 4:
			return "~";
		}
	}
	printBinop(op) {
		switch(op._hx_index) {
		case 0:
			return "+";
		case 1:
			return "*";
		case 2:
			return "/";
		case 3:
			return "-";
		case 4:
			return "=";
		case 5:
			return "==";
		case 6:
			return "!=";
		case 7:
			return ">";
		case 8:
			return ">=";
		case 9:
			return "<";
		case 10:
			return "<=";
		case 11:
			return "&";
		case 12:
			return "|";
		case 13:
			return "^";
		case 14:
			return "&&";
		case 15:
			return "||";
		case 16:
			return "<<";
		case 17:
			return ">>";
		case 18:
			return ">>>";
		case 19:
			return "%";
		case 20:
			var op1 = op.op;
			return this.printBinop(op1) + "=";
		case 21:
			return "...";
		case 22:
			return "=>";
		case 23:
			return "in";
		}
	}
}
$hxClasses["haxe.macro.Printer"] = haxe_macro_Printer;
haxe_macro_Printer.__name__ = "haxe.macro.Printer";
Object.assign(haxe_macro_Printer.prototype, {
	__class__: haxe_macro_Printer
	,tabs: null
	,tabString: null
});
class haxe_rtti_Meta {
	static getType(t) {
		var meta = haxe_rtti_Meta.getMeta(t);
		if(meta == null || meta.obj == null) {
			return { };
		} else {
			return meta.obj;
		}
	}
	static getMeta(t) {
		return t.__meta__;
	}
	static getFields(t) {
		var meta = haxe_rtti_Meta.getMeta(t);
		if(meta == null || meta.fields == null) {
			return { };
		} else {
			return meta.fields;
		}
	}
}
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
var haxeparser_Keyword = $hxEnums["haxeparser.Keyword"] = { __ename__ : true, __constructs__ : ["KwdFunction","KwdClass","KwdVar","KwdIf","KwdElse","KwdWhile","KwdDo","KwdFor","KwdBreak","KwdContinue","KwdReturn","KwdExtends","KwdImplements","KwdImport","KwdSwitch","KwdCase","KwdDefault","KwdStatic","KwdPublic","KwdPrivate","KwdTry","KwdCatch","KwdNew","KwdThis","KwdThrow","KwdExtern","KwdEnum","KwdInterface","KwdUntyped","KwdCast","KwdOverride","KwdTypedef","KwdDynamic","KwdPackage","KwdInline","KwdUsing","KwdNull","KwdTrue","KwdFalse","KwdAbstract","KwdMacro","KwdFinal"]
	,KwdFunction: {_hx_index:0,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdClass: {_hx_index:1,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdVar: {_hx_index:2,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdIf: {_hx_index:3,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdElse: {_hx_index:4,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdWhile: {_hx_index:5,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdDo: {_hx_index:6,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdFor: {_hx_index:7,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdBreak: {_hx_index:8,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdContinue: {_hx_index:9,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdReturn: {_hx_index:10,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdExtends: {_hx_index:11,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdImplements: {_hx_index:12,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdImport: {_hx_index:13,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdSwitch: {_hx_index:14,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdCase: {_hx_index:15,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdDefault: {_hx_index:16,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdStatic: {_hx_index:17,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdPublic: {_hx_index:18,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdPrivate: {_hx_index:19,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdTry: {_hx_index:20,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdCatch: {_hx_index:21,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdNew: {_hx_index:22,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdThis: {_hx_index:23,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdThrow: {_hx_index:24,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdExtern: {_hx_index:25,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdEnum: {_hx_index:26,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdInterface: {_hx_index:27,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdUntyped: {_hx_index:28,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdCast: {_hx_index:29,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdOverride: {_hx_index:30,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdTypedef: {_hx_index:31,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdDynamic: {_hx_index:32,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdPackage: {_hx_index:33,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdInline: {_hx_index:34,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdUsing: {_hx_index:35,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdNull: {_hx_index:36,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdTrue: {_hx_index:37,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdFalse: {_hx_index:38,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdAbstract: {_hx_index:39,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdMacro: {_hx_index:40,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdFinal: {_hx_index:41,__enum__:"haxeparser.Keyword",toString:$estr}
};
var haxeparser_TokenDef = $hxEnums["haxeparser.TokenDef"] = { __ename__ : true, __constructs__ : ["Kwd","Const","Sharp","Dollar","Unop","Binop","Comment","CommentLine","IntInterval","Semicolon","Dot","DblDot","Arrow","Comma","BkOpen","BkClose","BrOpen","BrClose","POpen","PClose","Question","At","Eof"]
	,Kwd: ($_=function(k) { return {_hx_index:0,k:k,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["k"],$_)
	,Const: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,Sharp: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Dollar: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Unop: ($_=function(op) { return {_hx_index:4,op:op,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["op"],$_)
	,Binop: ($_=function(op) { return {_hx_index:5,op:op,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["op"],$_)
	,Comment: ($_=function(s) { return {_hx_index:6,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,CommentLine: ($_=function(s) { return {_hx_index:7,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,IntInterval: ($_=function(s) { return {_hx_index:8,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Semicolon: {_hx_index:9,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Dot: {_hx_index:10,__enum__:"haxeparser.TokenDef",toString:$estr}
	,DblDot: {_hx_index:11,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Arrow: {_hx_index:12,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Comma: {_hx_index:13,__enum__:"haxeparser.TokenDef",toString:$estr}
	,BkOpen: {_hx_index:14,__enum__:"haxeparser.TokenDef",toString:$estr}
	,BkClose: {_hx_index:15,__enum__:"haxeparser.TokenDef",toString:$estr}
	,BrOpen: {_hx_index:16,__enum__:"haxeparser.TokenDef",toString:$estr}
	,BrClose: {_hx_index:17,__enum__:"haxeparser.TokenDef",toString:$estr}
	,POpen: {_hx_index:18,__enum__:"haxeparser.TokenDef",toString:$estr}
	,PClose: {_hx_index:19,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Question: {_hx_index:20,__enum__:"haxeparser.TokenDef",toString:$estr}
	,At: {_hx_index:21,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Eof: {_hx_index:22,__enum__:"haxeparser.TokenDef",toString:$estr}
};
class haxeparser_TokenDefPrinter {
	static toString(def) {
		switch(def._hx_index) {
		case 0:
			var k = def.k;
			return HxOverrides.substr($hxEnums[k.__enum__].__constructs__[k._hx_index],3,null).toLowerCase();
		case 1:
			var _g5 = def.c;
			switch(_g5._hx_index) {
			case 0:
				var s = _g5.v;
				return s;
			case 1:
				var s1 = _g5.f;
				return s1;
			case 2:
				var _g12 = _g5.kind;
				var s2 = _g5.s;
				return "\"" + s2 + "\"";
			case 3:
				var s3 = _g5.s;
				return s3;
			case 4:
				var opt = _g5.opt;
				var r = _g5.r;
				return "~/" + r + "/" + opt;
			}
			break;
		case 2:
			var s4 = def.s;
			return "#" + s4;
		case 3:
			var s5 = def.s;
			return "$" + s5;
		case 4:
			var op = def.op;
			return new haxe_macro_Printer("").printUnop(op);
		case 5:
			var op1 = def.op;
			return new haxe_macro_Printer("").printBinop(op1);
		case 6:
			var s6 = def.s;
			return "/*" + s6 + "*/";
		case 7:
			var s7 = def.s;
			return "//" + s7;
		case 8:
			var s8 = def.s;
			return "" + s8 + "...";
		case 9:
			return ";";
		case 10:
			return ".";
		case 11:
			return ":";
		case 12:
			return "->";
		case 13:
			return ",";
		case 14:
			return "[";
		case 15:
			return "]";
		case 16:
			return "{";
		case 17:
			return "}";
		case 18:
			return "(";
		case 19:
			return ")";
		case 20:
			return "?";
		case 21:
			return "@";
		case 22:
			return "<eof>";
		}
	}
}
$hxClasses["haxeparser.TokenDefPrinter"] = haxeparser_TokenDefPrinter;
haxeparser_TokenDefPrinter.__name__ = "haxeparser.TokenDefPrinter";
class haxeparser_Token {
	constructor(tok,pos) {
		this.tok = tok;
		this.pos = pos;
	}
	toString() {
		return haxeparser_TokenDefPrinter.toString(this.tok);
	}
}
$hxClasses["haxeparser.Token"] = haxeparser_Token;
haxeparser_Token.__name__ = "haxeparser.Token";
Object.assign(haxeparser_Token.prototype, {
	__class__: haxeparser_Token
	,tok: null
	,pos: null
});
var haxeparser_LexerErrorMsg = $hxEnums["haxeparser.LexerErrorMsg"] = { __ename__ : true, __constructs__ : ["UnterminatedString","UnterminatedRegExp","UnclosedComment","UnterminatedEscapeSequence","InvalidEscapeSequence","UnknownEscapeSequence","UnclosedCode"]
	,UnterminatedString: {_hx_index:0,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
	,UnterminatedRegExp: {_hx_index:1,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
	,UnclosedComment: {_hx_index:2,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
	,UnterminatedEscapeSequence: {_hx_index:3,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
	,InvalidEscapeSequence: ($_=function(c) { return {_hx_index:4,c:c,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}; },$_.__params__ = ["c"],$_)
	,UnknownEscapeSequence: ($_=function(c) { return {_hx_index:5,c:c,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}; },$_.__params__ = ["c"],$_)
	,UnclosedCode: {_hx_index:6,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
};
class haxeparser_LexerError {
	constructor(msg,pos) {
		this.msg = msg;
		this.pos = pos;
	}
}
$hxClasses["haxeparser.LexerError"] = haxeparser_LexerError;
haxeparser_LexerError.__name__ = "haxeparser.LexerError";
Object.assign(haxeparser_LexerError.prototype, {
	__class__: haxeparser_LexerError
	,msg: null
	,pos: null
});
class hxparse_Lexer {
	constructor(input,sourceName) {
		if(sourceName == null) {
			sourceName = "<null>";
		}
		this.current = "";
		this.input = input;
		this.source = sourceName;
		this.pos = 0;
	}
	token(ruleset) {
		if(this.pos == this.input.length) {
			if(ruleset.eofFunction != null) {
				return ruleset.eofFunction(this);
			} else {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			}
		}
		var state = ruleset.state;
		var lastMatch = null;
		var lastMatchPos = this.pos;
		var start = this.pos;
		while(true) {
			if(state.finalId > -1) {
				lastMatch = state;
				lastMatchPos = this.pos;
			}
			if(this.pos == this.input.length) {
				break;
			}
			var i = this.input.b[this.pos];
			++this.pos;
			state = state.trans[i];
			if(state == null) {
				break;
			}
		}
		this.pos = lastMatchPos;
		this.current = this.input.getString(start,this.pos - start);
		if(lastMatch == null || lastMatch.finalId == -1) {
			var code = this.input.b[this.pos];
			throw new js__$Boot_HaxeError(new hxparse_UnexpectedChar(String.fromCodePoint(code),new hxparse_Position(this.source,this.pos - this.current.length,this.pos)));
		}
		return ruleset.functions[lastMatch.finalId](this);
	}
	static buildRuleset(rules,name) {
		if(name == null) {
			name = "";
		}
		var cases = [];
		var functions = [];
		var eofFunction = null;
		var _g = 0;
		while(_g < rules.length) {
			var rule = rules[_g];
			++_g;
			if(rule.rule == "") {
				eofFunction = rule.func;
			} else {
				cases.push(hxparse_LexEngine.parse(rule.rule));
				functions.push(rule.func);
			}
		}
		return new hxparse_Ruleset(new hxparse_LexEngine(cases).firstState(),functions,eofFunction,name);
	}
}
$hxClasses["hxparse.Lexer"] = hxparse_Lexer;
hxparse_Lexer.__name__ = "hxparse.Lexer";
Object.assign(hxparse_Lexer.prototype, {
	__class__: hxparse_Lexer
	,current: null
	,input: null
	,source: null
	,pos: null
});
class hxparse_RuleBuilder {
}
$hxClasses["hxparse.RuleBuilder"] = hxparse_RuleBuilder;
hxparse_RuleBuilder.__name__ = "hxparse.RuleBuilder";
hxparse_RuleBuilder.__isInterface__ = true;
class hxparse__$LexEngine_CharRange {
	constructor(min,max) {
		this.min = min;
		this.max = max;
	}
}
$hxClasses["hxparse._LexEngine.CharRange"] = hxparse__$LexEngine_CharRange;
hxparse__$LexEngine_CharRange.__name__ = "hxparse._LexEngine.CharRange";
Object.assign(hxparse__$LexEngine_CharRange.prototype, {
	__class__: hxparse__$LexEngine_CharRange
	,min: null
	,max: null
});
class hxparse_LexEngine {
	constructor(patterns) {
		this.nodes = [];
		this.finals = [];
		this.states = [];
		this.hstates = new haxe_ds_StringMap();
		this.uid = 0;
		var pid = 0;
		var _g = 0;
		while(_g < patterns.length) {
			var p = patterns[_g];
			++_g;
			var id = pid++;
			var f = new hxparse__$LexEngine_Node(this.uid++,id);
			var n = this.initNode(p,f,id);
			this.nodes.push(n);
			this.finals.push(f);
		}
		this.makeState(this.addNodes([],this.nodes));
	}
	firstState() {
		return this.states[0];
	}
	makeState(nodes) {
		var buf_b = "";
		var _gthis = this;
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			buf_b += Std.string(n.id);
			buf_b += String.fromCodePoint(45);
		}
		var key = buf_b;
		var _this = this.hstates;
		var s = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(s != null) {
			return s;
		}
		s = new hxparse_State();
		this.states.push(s);
		var _this1 = this.hstates;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,s);
		} else {
			_this1.h[key] = s;
		}
		var trans = this.getTransitions(nodes);
		var _g1 = 0;
		while(_g1 < trans.length) {
			var t = trans[_g1];
			++_g1;
			var target = this.makeState(t.n);
			var _g11 = 0;
			var _g2 = t.chars;
			while(_g11 < _g2.length) {
				var chr = _g2[_g11];
				++_g11;
				var _g12 = chr.min;
				var _g21 = chr.max + 1;
				while(_g12 < _g21) {
					var i = _g12++;
					s.trans[i] = target;
				}
			}
		}
		var setFinal = function() {
			var _g22 = 0;
			var _g3 = _gthis.finals;
			while(_g22 < _g3.length) {
				var f = _g3[_g22];
				++_g22;
				var _g23 = 0;
				while(_g23 < nodes.length) {
					var n1 = nodes[_g23];
					++_g23;
					if(n1 == f) {
						s.finalId = n1.pid;
						return;
					}
				}
			}
		};
		if(s.finalId == -1) {
			setFinal();
		}
		return s;
	}
	getTransitions(nodes) {
		var tl = [];
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			var _g1 = 0;
			var _g11 = n.trans;
			while(_g1 < _g11.length) {
				var t = _g11[_g1];
				++_g1;
				tl.push(t);
			}
		}
		tl.sort(function(t1,t2) {
			return t1.n.id - t2.n.id;
		});
		var t0 = tl[0];
		var _g12 = 1;
		var _g2 = tl.length;
		while(_g12 < _g2) {
			var i = _g12++;
			var t11 = tl[i];
			if(t0.n == t11.n) {
				tl[i - 1] = null;
				t11 = { chars : hxparse_LexEngine.cunion(t0.chars,t11.chars), n : t11.n};
				tl[i] = t11;
			}
			t0 = t11;
		}
		while(HxOverrides.remove(tl,null)) {
		}
		var allChars = hxparse_LexEngine.EMPTY;
		var allStates = new haxe_ds_List();
		var _g3 = 0;
		while(_g3 < tl.length) {
			var t3 = tl[_g3];
			++_g3;
			var states = new haxe_ds_List();
			states.push({ chars : hxparse_LexEngine.cdiff(t3.chars,allChars), n : [t3.n]});
			var _g3_head = allStates.h;
			while(_g3_head != null) {
				var val = _g3_head.item;
				_g3_head = _g3_head.next;
				var s = val;
				var nodes1 = s.n.slice();
				nodes1.push(t3.n);
				states.push({ chars : hxparse_LexEngine.cinter(s.chars,t3.chars), n : nodes1});
				states.push({ chars : hxparse_LexEngine.cdiff(s.chars,t3.chars), n : s.n});
			}
			var _g4_head = states.h;
			while(_g4_head != null) {
				var val1 = _g4_head.item;
				_g4_head = _g4_head.next;
				var s1 = val1;
				if(s1.chars.length == 0) {
					states.remove(s1);
				}
			}
			allChars = hxparse_LexEngine.cunion(allChars,t3.chars);
			allStates = states;
		}
		var states1 = [];
		var _g4_head1 = allStates.h;
		while(_g4_head1 != null) {
			var val2 = _g4_head1.item;
			_g4_head1 = _g4_head1.next;
			var s2 = val2;
			states1.push({ chars : s2.chars, n : this.addNodes([],s2.n)});
		}
		states1.sort(function(s11,s21) {
			var a = s11.chars.length;
			var b = s21.chars.length;
			var _g5 = 0;
			var _g6 = a < b ? a : b;
			while(_g5 < _g6) {
				var i1 = _g5++;
				var a1 = s11.chars[i1];
				var b1 = s21.chars[i1];
				if(a1.min != b1.min) {
					return b1.min - a1.min;
				}
				if(a1.max != b1.max) {
					return b1.max - a1.max;
				}
			}
			if(a < b) {
				return b - a;
			}
			return 0;
		});
		return states1;
	}
	addNode(nodes,n) {
		var _g = 0;
		while(_g < nodes.length) {
			var n2 = nodes[_g];
			++_g;
			if(n == n2) {
				return;
			}
		}
		nodes.push(n);
		this.addNodes(nodes,n.epsilon);
	}
	addNodes(nodes,add) {
		var _g = 0;
		while(_g < add.length) {
			var n = add[_g];
			++_g;
			this.addNode(nodes,n);
		}
		return nodes;
	}
	initNode(p,finalId,pid) {
		switch(p._hx_index) {
		case 0:
			return finalId;
		case 1:
			var c = p.c;
			var n = new hxparse__$LexEngine_Node(this.uid++,pid);
			n.trans.push({ chars : c, n : finalId});
			return n;
		case 2:
			var p1 = p.p;
			var n1 = new hxparse__$LexEngine_Node(this.uid++,pid);
			var an = this.initNode(p1,n1,pid);
			n1.epsilon.push(an);
			n1.epsilon.push(finalId);
			return n1;
		case 3:
			var p2 = p.p;
			var n2 = new hxparse__$LexEngine_Node(this.uid++,pid);
			var an1 = this.initNode(p2,n2,pid);
			n2.epsilon.push(an1);
			n2.epsilon.push(finalId);
			return an1;
		case 4:
			var b = p.p2;
			var a = p.p1;
			return this.initNode(a,this.initNode(b,finalId,pid),pid);
		case 5:
			var b1 = p.p2;
			var a1 = p.p1;
			var n3 = new hxparse__$LexEngine_Node(this.uid++,pid);
			n3.epsilon.push(this.initNode(a1,finalId,pid));
			n3.epsilon.push(this.initNode(b1,finalId,pid));
			return n3;
		case 6:
			var p3 = p.p;
			return this.initNode(p3,finalId,pid);
		}
	}
	static parse(pattern) {
		var this1 = haxe_io_Bytes.ofString(pattern);
		var p = hxparse_LexEngine.parseInner(this1);
		if(p == null) {
			throw new js__$Boot_HaxeError("Invalid pattern '" + pattern + "'");
		}
		return p.pattern;
	}
	static next(a,b) {
		if(a == hxparse__$LexEngine_Pattern.Empty) {
			return b;
		} else {
			return hxparse__$LexEngine_Pattern.Next(a,b);
		}
	}
	static plus(r) {
		if(r._hx_index == 4) {
			var r2 = r.p2;
			var r1 = r.p1;
			return hxparse__$LexEngine_Pattern.Next(r1,hxparse_LexEngine.plus(r2));
		} else {
			return hxparse__$LexEngine_Pattern.Plus(r);
		}
	}
	static star(r) {
		if(r._hx_index == 4) {
			var r2 = r.p2;
			var r1 = r.p1;
			return hxparse__$LexEngine_Pattern.Next(r1,hxparse_LexEngine.star(r2));
		} else {
			return hxparse__$LexEngine_Pattern.Star(r);
		}
	}
	static opt(r) {
		if(r._hx_index == 4) {
			var r2 = r.p2;
			var r1 = r.p1;
			return hxparse__$LexEngine_Pattern.Next(r1,hxparse_LexEngine.opt(r2));
		} else {
			return hxparse__$LexEngine_Pattern.Choice(r,hxparse__$LexEngine_Pattern.Empty);
		}
	}
	static cinter(c1,c2) {
		return hxparse_LexEngine.ccomplement(hxparse_LexEngine.cunion(hxparse_LexEngine.ccomplement(c1),hxparse_LexEngine.ccomplement(c2)));
	}
	static cdiff(c1,c2) {
		return hxparse_LexEngine.ccomplement(hxparse_LexEngine.cunion(hxparse_LexEngine.ccomplement(c1),c2));
	}
	static ccomplement(c) {
		var first = c[0];
		var start = first != null && first.min == -1 ? c.shift().max + 1 : -1;
		var out = [];
		var _g = 0;
		while(_g < c.length) {
			var k = c[_g];
			++_g;
			out.push(new hxparse__$LexEngine_CharRange(start,k.min - 1));
			start = k.max + 1;
		}
		if(start <= 255) {
			out.push(new hxparse__$LexEngine_CharRange(start,255));
		}
		return out;
	}
	static cunion(ca,cb) {
		var i = 0;
		var j = 0;
		var out = [];
		var a = ca[i++];
		var b = cb[j++];
		while(true) {
			if(a == null) {
				out.push(b);
				while(j < cb.length) out.push(cb[j++]);
				break;
			}
			if(b == null) {
				out.push(a);
				while(i < ca.length) out.push(ca[i++]);
				break;
			}
			if(a.min <= b.min) {
				if(a.max + 1 < b.min) {
					out.push(a);
					a = ca[i++];
				} else if(a.max < b.max) {
					b = new hxparse__$LexEngine_CharRange(a.min,b.max);
					a = ca[i++];
				} else {
					b = cb[j++];
				}
			} else {
				var tmp = ca;
				ca = cb;
				cb = tmp;
				var tmp1 = j;
				j = i;
				i = tmp1;
				var tmp2 = a;
				a = b;
				b = tmp2;
			}
		}
		return out;
	}
	static parseInner(pattern,i,pDepth) {
		if(pDepth == null) {
			pDepth = 0;
		}
		if(i == null) {
			i = 0;
		}
		var readChar = function() {
			i += 1;
			var c = pattern.b[i - 1];
			if(c != c) {
				c = 92;
			} else if(c == 120) {
				c = Std.parseInt("0x" + pattern.getString(i,2));
				i += 2;
			} else if(c >= 48 && c <= 57) {
				var v = c - 48;
				while(true) {
					var cNext = pattern.b[i];
					if(cNext >= 48 && cNext <= 57) {
						v = v * 10 + (cNext - 48);
						i += 1;
					} else {
						break;
					}
				}
				c = v;
			}
			return c;
		};
		var r = hxparse__$LexEngine_Pattern.Empty;
		var l = pattern.length;
		while(i < l) {
			i += 1;
			var c1 = pattern.b[i - 1];
			if(c1 > 255) {
				throw new js__$Boot_HaxeError(c1);
			}
			switch(c1) {
			case 40:
				var r2 = hxparse_LexEngine.parseInner(pattern,i,pDepth + 1);
				i = r2.pos;
				r = hxparse_LexEngine.next(r,r2.pattern);
				break;
			case 41:
				if(r == hxparse__$LexEngine_Pattern.Empty) {
					throw new js__$Boot_HaxeError("Empty group");
				}
				return { pattern : hxparse__$LexEngine_Pattern.Group(r), pos : i};
			case 42:
				if(r != hxparse__$LexEngine_Pattern.Empty) {
					r = hxparse_LexEngine.star(r);
				} else {
					r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c1,c1)]));
				}
				break;
			case 43:
				if(r != hxparse__$LexEngine_Pattern.Empty) {
					r = hxparse_LexEngine.plus(r);
				} else {
					r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c1,c1)]));
				}
				break;
			case 46:
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match(hxparse_LexEngine.ALL_CHARS));
				break;
			case 63:
				if(r != hxparse__$LexEngine_Pattern.Empty) {
					r = hxparse_LexEngine.opt(r);
				} else {
					r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c1,c1)]));
				}
				break;
			case 91:
				if(pattern.length > 1) {
					var range = 0;
					var acc = [];
					var not = pattern.b[i] == 94;
					if(not) {
						i += 1;
					}
					while(true) {
						i += 1;
						var c2 = pattern.b[i - 1];
						if(c2 == 93) {
							if(range != 0) {
								return null;
							}
							break;
						} else if(c2 == 45) {
							if(range != 0) {
								return null;
							}
							var last = acc.pop();
							if(last == null) {
								acc.push(new hxparse__$LexEngine_CharRange(c2,c2));
							} else {
								if(last.min != last.max) {
									return null;
								}
								range = last.min;
							}
						} else {
							if(c2 == 92) {
								c2 = readChar();
							}
							if(range == 0) {
								acc.push(new hxparse__$LexEngine_CharRange(c2,c2));
							} else {
								acc.push(new hxparse__$LexEngine_CharRange(range,c2));
								range = 0;
							}
						}
					}
					var g = [];
					var _g = 0;
					while(_g < acc.length) {
						var k = acc[_g];
						++_g;
						g = hxparse_LexEngine.cunion(g,[k]);
					}
					if(not) {
						g = hxparse_LexEngine.cdiff(hxparse_LexEngine.ALL_CHARS,g);
					}
					r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match(g));
				} else {
					r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c1,c1)]));
				}
				break;
			case 92:
				c1 = readChar();
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c1,c1)]));
				break;
			case 124:
				if(r != hxparse__$LexEngine_Pattern.Empty) {
					var r21 = hxparse_LexEngine.parseInner(pattern,i);
					return { pattern : hxparse__$LexEngine_Pattern.Choice(r,r21.pattern), pos : r21.pos};
				} else {
					r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c1,c1)]));
				}
				break;
			default:
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c1,c1)]));
			}
		}
		if(pDepth != 0) {
			throw new js__$Boot_HaxeError("Found unclosed parenthesis while parsing \"" + Std.string(pattern) + "\"");
		}
		return { pattern : r, pos : i};
	}
}
$hxClasses["hxparse.LexEngine"] = hxparse_LexEngine;
hxparse_LexEngine.__name__ = "hxparse.LexEngine";
Object.assign(hxparse_LexEngine.prototype, {
	__class__: hxparse_LexEngine
	,uid: null
	,nodes: null
	,finals: null
	,states: null
	,hstates: null
});
var hxparse__$LexEngine_Pattern = $hxEnums["hxparse._LexEngine.Pattern"] = { __ename__ : true, __constructs__ : ["Empty","Match","Star","Plus","Next","Choice","Group"]
	,Empty: {_hx_index:0,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}
	,Match: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["c"],$_)
	,Star: ($_=function(p) { return {_hx_index:2,p:p,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Plus: ($_=function(p) { return {_hx_index:3,p:p,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Next: ($_=function(p1,p2) { return {_hx_index:4,p1:p1,p2:p2,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p1","p2"],$_)
	,Choice: ($_=function(p1,p2) { return {_hx_index:5,p1:p1,p2:p2,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p1","p2"],$_)
	,Group: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p"],$_)
};
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			var cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			var name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				var e = $hxEnums[o.__enum__];
				var n = e.__constructs__[o._hx_index];
				var con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						var _g = [];
						{
							var _g1 = 0;
							var _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								var p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = o.length;
				while(_g3 < _g11) {
					var i = _g3++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			var k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
			var intf = cc.__interfaces__;
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		var name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
class hxparse__$LexEngine_Node {
	constructor(id,pid) {
		this.id = id;
		this.pid = pid;
		this.trans = [];
		this.epsilon = [];
	}
}
$hxClasses["hxparse._LexEngine.Node"] = hxparse__$LexEngine_Node;
hxparse__$LexEngine_Node.__name__ = "hxparse._LexEngine.Node";
Object.assign(hxparse__$LexEngine_Node.prototype, {
	__class__: hxparse__$LexEngine_Node
	,id: null
	,pid: null
	,trans: null
	,epsilon: null
});
class hxparse_Ruleset {
	constructor(state,functions,eofFunction,name) {
		if(name == null) {
			name = "";
		}
		this.state = state;
		this.functions = functions;
		this.eofFunction = eofFunction;
		this.name = name;
	}
}
$hxClasses["hxparse.Ruleset"] = hxparse_Ruleset;
hxparse_Ruleset.__name__ = "hxparse.Ruleset";
Object.assign(hxparse_Ruleset.prototype, {
	__class__: hxparse_Ruleset
	,state: null
	,functions: null
	,eofFunction: null
	,name: null
});
class hxparse_Position {
	constructor(source,min,max) {
		this.psource = source;
		this.pmin = min;
		this.pmax = max;
	}
	toString() {
		return "" + this.psource + ":characters " + this.pmin + "-" + this.pmax;
	}
	getLinePosition(input) {
		var lineMin = 1;
		var lineMax = 1;
		var posMin = 0;
		var posMax = 0;
		var cur = 0;
		while(cur < this.pmin) {
			if(input.b[cur] == 10) {
				++lineMin;
				posMin = cur + 1;
			}
			++cur;
		}
		lineMax = lineMin;
		posMax = posMin;
		posMin = cur - posMin;
		while(cur < this.pmax) {
			if(input.b[cur] == 10) {
				++lineMax;
				posMax = cur + 1;
			}
			++cur;
		}
		posMax = cur - posMax;
		return { lineMin : lineMin, lineMax : lineMax, posMin : posMin, posMax : posMax};
	}
	format(input) {
		var linePos = this.getLinePosition(input);
		if(linePos.lineMin != linePos.lineMax) {
			return "" + this.psource + ":lines " + linePos.lineMin + "-" + linePos.lineMax;
		} else {
			return "" + this.psource + ":" + linePos.lineMin + ": characters " + linePos.posMin + "-" + linePos.posMax;
		}
	}
}
$hxClasses["hxparse.Position"] = hxparse_Position;
hxparse_Position.__name__ = "hxparse.Position";
Object.assign(hxparse_Position.prototype, {
	__class__: hxparse_Position
	,psource: null
	,pmin: null
	,pmax: null
});
class haxeparser_HaxeLexer extends hxparse_Lexer {
	constructor(input,sourceName) {
		super(input,sourceName);
	}
	static mkPos(p) {
		return { file : p.psource, min : p.pmin, max : p.pmax};
	}
	static mk(lexer,td) {
		return new haxeparser_Token(td,haxeparser_HaxeLexer.mkPos(new hxparse_Position(lexer.source,lexer.pos - lexer.current.length,lexer.pos)));
	}
	static unescape(s,pos) {
		var b_b = "";
		var i = 0;
		var esc = false;
		while(s.length != i) {
			var c = HxOverrides.cca(s,i);
			if(esc) {
				var iNext = i + 1;
				var _hx_tmp;
				if(c == null) {
					_hx_tmp = c >= 48 && c <= 51;
					if(_hx_tmp == true) {
						iNext += 2;
					} else {
						var c1 = c;
						throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnknownEscapeSequence("\\" + String.fromCodePoint(c1)),{ file : pos.file, min : pos.min + i, max : pos.min + i + 1}));
					}
				} else {
					switch(c) {
					case 34:case 39:case 92:
						b_b += String.fromCodePoint(c);
						break;
					case 110:
						b_b += "\n";
						break;
					case 114:
						b_b += "\r";
						break;
					case 116:
						b_b += "\t";
						break;
					case 117:
						_hx_tmp = c >= 48 && c <= 51;
						if(_hx_tmp == true) {
							iNext += 2;
						} else {
							var c2;
							if(s.charAt(i + 1) == "{") {
								var endIndex = s.indexOf("}",i + 3);
								if(endIndex == -1) {
									throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedEscapeSequence,{ file : pos.file, min : pos.min + i, max : pos.min + i + 2}));
								}
								var l = endIndex - (i + 2);
								var chars = HxOverrides.substr(s,i + 2,l);
								if(!new EReg("^[0-9a-fA-F]+$","").match(chars)) {
									throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.InvalidEscapeSequence("\\u{" + chars + "}"),{ file : pos.file, min : pos.min + i, max : pos.min + i + (3 + l)}));
								}
								c2 = Std.parseInt("0x" + chars);
								if(c2 > 1114111) {
									throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.InvalidEscapeSequence("\\u{" + chars + "}"),{ file : pos.file, min : pos.min + i, max : pos.min + i + (3 + l)}));
								}
								iNext += 2 + l;
							} else {
								var chars1 = HxOverrides.substr(s,i + 1,4);
								if(!new EReg("^[0-9a-fA-F]{4}$","").match(chars1)) {
									throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.InvalidEscapeSequence("\\u" + chars1),{ file : pos.file, min : pos.min + i, max : pos.min + i + 5}));
								}
								c2 = Std.parseInt("0x" + chars1);
								iNext += 4;
							}
							b_b += String.fromCodePoint(c2);
						}
						break;
					case 120:
						_hx_tmp = c >= 48 && c <= 51;
						if(_hx_tmp == true) {
							iNext += 2;
						} else {
							var chars2 = HxOverrides.substr(s,i + 1,2);
							if(!new EReg("^[0-9a-fA-F]{2}$","").match(chars2)) {
								throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.InvalidEscapeSequence("\\x" + chars2),{ file : pos.file, min : pos.min + i, max : pos.min + i + 3}));
							}
							var c3 = Std.parseInt("0x" + chars2);
							b_b += String.fromCodePoint(c3);
							iNext += 2;
						}
						break;
					default:
						_hx_tmp = c >= 48 && c <= 51;
						if(_hx_tmp == true) {
							iNext += 2;
						} else {
							var c4 = c;
							throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnknownEscapeSequence("\\" + String.fromCodePoint(c4)),{ file : pos.file, min : pos.min + i, max : pos.min + i + 1}));
						}
					}
				}
				esc = false;
				i = iNext;
			} else if(c == null) {
				b_b += String.fromCodePoint(c);
				++i;
			} else if(c == 92) {
				++i;
				esc = true;
			} else {
				b_b += String.fromCodePoint(c);
				++i;
			}
		}
		return b_b;
	}
}
$hxClasses["haxeparser.HaxeLexer"] = haxeparser_HaxeLexer;
haxeparser_HaxeLexer.__name__ = "haxeparser.HaxeLexer";
haxeparser_HaxeLexer.__interfaces__ = [hxparse_RuleBuilder];
haxeparser_HaxeLexer.__super__ = hxparse_Lexer;
Object.assign(haxeparser_HaxeLexer.prototype, {
	__class__: haxeparser_HaxeLexer
});
class hxjsonast_Error {
	constructor(message,pos) {
		this.message = message;
		this.pos = pos;
	}
}
$hxClasses["hxjsonast.Error"] = hxjsonast_Error;
hxjsonast_Error.__name__ = "hxjsonast.Error";
Object.assign(hxjsonast_Error.prototype, {
	__class__: hxjsonast_Error
	,message: null
	,pos: null
});
class hxjsonast_Json {
	constructor(value,pos) {
		this.value = value;
		this.pos = pos;
	}
}
$hxClasses["hxjsonast.Json"] = hxjsonast_Json;
hxjsonast_Json.__name__ = "hxjsonast.Json";
Object.assign(hxjsonast_Json.prototype, {
	__class__: hxjsonast_Json
	,value: null
	,pos: null
});
var hxjsonast_JsonValue = $hxEnums["hxjsonast.JsonValue"] = { __ename__ : true, __constructs__ : ["JString","JNumber","JObject","JArray","JBool","JNull"]
	,JString: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["s"],$_)
	,JNumber: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["s"],$_)
	,JObject: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,JArray: ($_=function(values) { return {_hx_index:3,values:values,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["values"],$_)
	,JBool: ($_=function(b) { return {_hx_index:4,b:b,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["b"],$_)
	,JNull: {_hx_index:5,__enum__:"hxjsonast.JsonValue",toString:$estr}
};
class hxjsonast_JObjectField {
	constructor(name,namePos,value) {
		this.name = name;
		this.namePos = namePos;
		this.value = value;
	}
}
$hxClasses["hxjsonast.JObjectField"] = hxjsonast_JObjectField;
hxjsonast_JObjectField.__name__ = "hxjsonast.JObjectField";
Object.assign(hxjsonast_JObjectField.prototype, {
	__class__: hxjsonast_JObjectField
	,name: null
	,namePos: null
	,value: null
});
class hxjsonast_Parser {
	constructor(source,filename) {
		this.source = source;
		this.filename = filename;
		this.pos = 0;
	}
	parseRec() {
		while(true) {
			var c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				var save = this.pos;
				var s = this.parseString();
				return new hxjsonast_Json(hxjsonast_JsonValue.JString(s),new hxjsonast_Position(this.filename,save - 1,this.pos));
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var start = this.pos - 1;
				var minus = c == 45;
				var digit = !minus;
				var zero = c == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				while(true) {
					switch(this.source.charCodeAt(this.pos++)) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				var s1 = HxOverrides.substr(this.source,start,this.pos - start);
				return new hxjsonast_Json(hxjsonast_JsonValue.JNumber(s1),new hxjsonast_Position(this.filename,start,this.pos));
			case 91:
				var values = [];
				var comma = null;
				var startPos = this.pos - 1;
				while(true) switch(this.source.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 44:
					if(comma) {
						comma = false;
					} else {
						this.invalidChar();
					}
					break;
				case 93:
					if(comma == false) {
						this.invalidChar();
					}
					return new hxjsonast_Json(hxjsonast_JsonValue.JArray(values),new hxjsonast_Position(this.filename,startPos,this.pos));
				default:
					if(comma) {
						this.invalidChar();
					}
					this.pos--;
					values.push(this.parseRec());
					comma = true;
				}
				break;
			case 102:
				var save1 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 97 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 115 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save1;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JBool(false),new hxjsonast_Position(this.filename,save1 - 1,this.pos));
			case 110:
				var save2 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 108) {
					this.pos = save2;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position(this.filename,save2 - 1,this.pos));
			case 116:
				var save3 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 114 || this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save3;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JBool(true),new hxjsonast_Position(this.filename,save3 - 1,this.pos));
			case 123:
				var fields = [];
				var names = new haxe_ds_StringMap();
				var field = null;
				var fieldPos = null;
				var comma1 = null;
				var startPos1 = this.pos - 1;
				while(true) switch(this.source.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 34:
					if(comma1) {
						this.invalidChar();
					}
					var fieldStartPos = this.pos - 1;
					field = this.parseString();
					fieldPos = new hxjsonast_Position(this.filename,fieldStartPos,this.pos);
					if(__map_reserved[field] != null ? names.existsReserved(field) : names.h.hasOwnProperty(field)) {
						throw new js__$Boot_HaxeError(new hxjsonast_Error("Duplicate field name \"" + field + "\"",fieldPos));
					} else if(__map_reserved[field] != null) {
						names.setReserved(field,true);
					} else {
						names.h[field] = true;
					}
					break;
				case 44:
					if(comma1) {
						comma1 = false;
					} else {
						this.invalidChar();
					}
					break;
				case 58:
					if(field == null) {
						this.invalidChar();
					}
					fields.push(new hxjsonast_JObjectField(field,fieldPos,this.parseRec()));
					field = null;
					fieldPos = null;
					comma1 = true;
					break;
				case 125:
					if(field != null || comma1 == false) {
						this.invalidChar();
					}
					return new hxjsonast_Json(hxjsonast_JsonValue.JObject(fields),new hxjsonast_Position(this.filename,startPos1,this.pos));
				default:
					this.invalidChar();
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	parseString() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.source;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.source.charCodeAt(this.pos++);
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.source,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCodePoint(uc);
					break;
				default:
					throw new js__$Boot_HaxeError(new hxjsonast_Error("Invalid escape sequence \\" + String.fromCodePoint(c),new hxjsonast_Position(this.filename,this.pos - 2,this.pos)));
				}
				start = this.pos;
			} else if(c != c) {
				this.pos--;
				throw new js__$Boot_HaxeError(new hxjsonast_Error("Unclosed string",new hxjsonast_Position(this.filename,start - 1,this.pos)));
			}
		}
		if(buf == null) {
			return HxOverrides.substr(this.source,start,this.pos - start - 1);
		} else {
			var s1 = this.source;
			var len1 = this.pos - start - 1;
			buf.b += len1 == null ? HxOverrides.substr(s1,start,null) : HxOverrides.substr(s1,start,len1);
			return buf.b;
		}
	}
	invalidChar() {
		this.pos--;
		throw new js__$Boot_HaxeError(new hxjsonast_Error("Invalid character: " + this.source.charAt(this.pos),new hxjsonast_Position(this.filename,this.pos,this.pos + 1)));
	}
	invalidNumber(start) {
		throw new js__$Boot_HaxeError(new hxjsonast_Error("Invalid number: " + this.source.substring(start,this.pos),new hxjsonast_Position(this.filename,start,this.pos)));
	}
}
$hxClasses["hxjsonast.Parser"] = hxjsonast_Parser;
hxjsonast_Parser.__name__ = "hxjsonast.Parser";
Object.assign(hxjsonast_Parser.prototype, {
	__class__: hxjsonast_Parser
	,source: null
	,filename: null
	,pos: null
});
class hxjsonast_Position {
	constructor(file,min,max) {
		this.file = file;
		this.min = min;
		this.max = max;
	}
}
$hxClasses["hxjsonast.Position"] = hxjsonast_Position;
hxjsonast_Position.__name__ = "hxjsonast.Position";
Object.assign(hxjsonast_Position.prototype, {
	__class__: hxjsonast_Position
	,file: null
	,min: null
	,max: null
});
class hxparse_ParserError {
	constructor(pos) {
		this.pos = pos;
	}
}
$hxClasses["hxparse.ParserError"] = hxparse_ParserError;
hxparse_ParserError.__name__ = "hxparse.ParserError";
Object.assign(hxparse_ParserError.prototype, {
	__class__: hxparse_ParserError
	,pos: null
});
class hxparse_State {
	constructor() {
		this.finalId = -1;
		var this1 = new Array(256);
		this.trans = this1;
	}
}
$hxClasses["hxparse.State"] = hxparse_State;
hxparse_State.__name__ = "hxparse.State";
Object.assign(hxparse_State.prototype, {
	__class__: hxparse_State
	,trans: null
	,finalId: null
});
class hxparse_UnexpectedChar extends hxparse_ParserError {
	constructor(char,pos) {
		super(pos);
		this.char = char;
	}
	toString() {
		return "Unexpected " + this.char;
	}
}
$hxClasses["hxparse.UnexpectedChar"] = hxparse_UnexpectedChar;
hxparse_UnexpectedChar.__name__ = "hxparse.UnexpectedChar";
hxparse_UnexpectedChar.__super__ = hxparse_ParserError;
Object.assign(hxparse_UnexpectedChar.prototype, {
	__class__: hxparse_UnexpectedChar
	,char: null
});
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
}
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
Object.assign(js__$Boot_HaxeError.prototype, {
	__class__: js__$Boot_HaxeError
	,val: null
});
var json2object_Error = $hxEnums["json2object.Error"] = { __ename__ : true, __constructs__ : ["IncorrectType","IncorrectEnumValue","InvalidEnumConstructor","UninitializedVariable","UnknownVariable","ParserError"]
	,IncorrectType: ($_=function(variable,expected,pos) { return {_hx_index:0,variable:variable,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["variable","expected","pos"],$_)
	,IncorrectEnumValue: ($_=function(value,expected,pos) { return {_hx_index:1,value:value,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["value","expected","pos"],$_)
	,InvalidEnumConstructor: ($_=function(value,expected,pos) { return {_hx_index:2,value:value,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["value","expected","pos"],$_)
	,UninitializedVariable: ($_=function(variable,pos) { return {_hx_index:3,variable:variable,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["variable","pos"],$_)
	,UnknownVariable: ($_=function(variable,pos) { return {_hx_index:4,variable:variable,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["variable","pos"],$_)
	,ParserError: ($_=function(message,pos) { return {_hx_index:5,message:message,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_.__params__ = ["message","pos"],$_)
};
class json2object_PositionUtils {
	constructor(content) {
		this.linesInfo = [];
		var s = 0;
		var e = 0;
		var i = 0;
		var lineCount = 0;
		while(i < content.length) switch(content.charAt(i)) {
		case "\n":
			e = i;
			this.linesInfo.push({ number : lineCount, start : s, end : e});
			++lineCount;
			++i;
			s = i;
			break;
		case "\r":
			e = i;
			if(content.charAt(i + 1) == "\n") {
				++e;
			}
			this.linesInfo.push({ number : lineCount, start : s, end : e});
			++lineCount;
			i = e + 1;
			s = i;
			break;
		default:
			++i;
		}
		this.linesInfo.push({ number : lineCount, start : s, end : i});
	}
	convertPosition(position) {
		var file = position.file;
		var min = position.min;
		var max = position.max;
		var pos = { file : file, min : min + 1, max : max + 1, lines : []};
		var lastLine = this.linesInfo.length - 1;
		var bounds_min = 0;
		var bounds_max = lastLine;
		if(min > this.linesInfo[0].end) {
			while(bounds_max > bounds_min) {
				var i = (bounds_min + bounds_max) / 2 | 0;
				var line = this.linesInfo[i];
				if(line.start == min) {
					bounds_min = i;
					bounds_max = i;
				}
				if(line.end < min) {
					bounds_min = i + 1;
				}
				if(line.start > min || line.end >= min && line.start < min) {
					bounds_max = i;
				}
			}
		}
		var _g = bounds_min;
		var _g1 = this.linesInfo.length;
		while(_g < _g1) {
			var i1 = _g++;
			var line1 = this.linesInfo[i1];
			if(line1.start <= min && line1.end >= max) {
				pos.lines.push({ number : line1.number + 1, start : min - line1.start + 1, end : max - line1.start + 1});
				break;
			}
			if(line1.start <= min && min <= line1.end) {
				pos.lines.push({ number : line1.number + 1, start : min - line1.start + 1, end : line1.end + 1});
			}
			if(line1.start <= max && max <= line1.end) {
				pos.lines.push({ number : line1.number + 1, start : line1.start + 1, end : max - line1.start + 1});
			}
			if(line1.start >= max || line1.end >= max) {
				break;
			}
		}
		return pos;
	}
}
$hxClasses["json2object.PositionUtils"] = json2object_PositionUtils;
json2object_PositionUtils.__name__ = "json2object.PositionUtils";
Object.assign(json2object_PositionUtils.prototype, {
	__class__: json2object_PositionUtils
	,linesInfo: null
});
class markdown_Node {
}
$hxClasses["markdown.Node"] = markdown_Node;
markdown_Node.__name__ = "markdown.Node";
markdown_Node.__isInterface__ = true;
Object.assign(markdown_Node.prototype, {
	__class__: markdown_Node
	,accept: null
});
class markdown_NodeVisitor {
}
$hxClasses["markdown.NodeVisitor"] = markdown_NodeVisitor;
markdown_NodeVisitor.__name__ = "markdown.NodeVisitor";
markdown_NodeVisitor.__isInterface__ = true;
Object.assign(markdown_NodeVisitor.prototype, {
	__class__: markdown_NodeVisitor
	,visitText: null
	,visitElementBefore: null
	,visitElementAfter: null
});
class markdown_ElementNode {
	constructor(tag,children) {
		this.tag = tag;
		this.children = children;
		this.attributes = new haxe_ds_StringMap();
	}
	accept(visitor) {
		if(visitor.visitElementBefore(this)) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.accept(visitor);
			}
			visitor.visitElementAfter(this);
		}
	}
	static empty(tag) {
		return new markdown_ElementNode(tag,null);
	}
	static text(tag,text) {
		return new markdown_ElementNode(tag,[new markdown_TextNode(text)]);
	}
}
$hxClasses["markdown.ElementNode"] = markdown_ElementNode;
markdown_ElementNode.__name__ = "markdown.ElementNode";
markdown_ElementNode.__interfaces__ = [markdown_Node];
Object.assign(markdown_ElementNode.prototype, {
	__class__: markdown_ElementNode
	,tag: null
	,children: null
	,attributes: null
});
class markdown_TextNode {
	constructor(text) {
		this.text = text;
	}
	accept(visitor) {
		visitor.visitText(this);
	}
}
$hxClasses["markdown.TextNode"] = markdown_TextNode;
markdown_TextNode.__name__ = "markdown.TextNode";
markdown_TextNode.__interfaces__ = [markdown_Node];
Object.assign(markdown_TextNode.prototype, {
	__class__: markdown_TextNode
	,text: null
});
class markdown_BlockParser {
	constructor(lines,document) {
		this.lines = lines;
		this.document = document;
		this.pos = 0;
	}
	get_next() {
		if(this.pos >= this.lines.length - 1) {
			return null;
		}
		return this.lines[this.pos + 1];
	}
	advance() {
		this.pos++;
	}
	matches(ereg) {
		if(this.pos >= this.lines.length) {
			return false;
		}
		return ereg.match(this.lines[this.pos]);
	}
	matchesNext(ereg) {
		if(this.get_next() == null) {
			return false;
		}
		return ereg.match(this.get_next());
	}
}
$hxClasses["markdown.BlockParser"] = markdown_BlockParser;
markdown_BlockParser.__name__ = "markdown.BlockParser";
Object.assign(markdown_BlockParser.prototype, {
	__class__: markdown_BlockParser
	,lines: null
	,document: null
	,pos: null
});
class markdown_BlockSyntax {
	constructor() {
	}
	get_pattern() {
		return null;
	}
	get_canEndBlock() {
		return true;
	}
	canParse(parser) {
		return this.get_pattern().match(parser.lines[parser.pos]);
	}
	parse(parser) {
		return null;
	}
	static get_syntaxes() {
		if(markdown_BlockSyntax.syntaxes == null) {
			markdown_BlockSyntax.syntaxes = [new markdown_EmptyBlockSyntax(),new markdown_BlockHtmlSyntax(),new markdown_SetextHeaderSyntax(),new markdown_HeaderSyntax(),new markdown_CodeBlockSyntax(),new markdown_GitHubCodeBlockSyntax(),new markdown_BlockquoteSyntax(),new markdown_HorizontalRuleSyntax(),new markdown_UnorderedListSyntax(),new markdown_OrderedListSyntax(),new markdown_TableSyntax(),new markdown_ParagraphSyntax()];
		}
		return markdown_BlockSyntax.syntaxes;
	}
	static isAtBlockEnd(parser) {
		if(parser.pos >= parser.lines.length) {
			return true;
		}
		var _g = 0;
		var _g1 = markdown_BlockSyntax.get_syntaxes();
		while(_g < _g1.length) {
			var syntax = _g1[_g];
			++_g;
			if(syntax.canParse(parser) && syntax.get_canEndBlock()) {
				return true;
			}
		}
		return false;
	}
}
$hxClasses["markdown.BlockSyntax"] = markdown_BlockSyntax;
markdown_BlockSyntax.__name__ = "markdown.BlockSyntax";
Object.assign(markdown_BlockSyntax.prototype, {
	__class__: markdown_BlockSyntax
});
class markdown_EmptyBlockSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_EMPTY;
	}
	parse(parser) {
		parser.advance();
		return null;
	}
}
$hxClasses["markdown.EmptyBlockSyntax"] = markdown_EmptyBlockSyntax;
markdown_EmptyBlockSyntax.__name__ = "markdown.EmptyBlockSyntax";
markdown_EmptyBlockSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_EmptyBlockSyntax.prototype, {
	__class__: markdown_EmptyBlockSyntax
});
class markdown_SetextHeaderSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	canParse(parser) {
		return parser.matchesNext(markdown_BlockSyntax.RE_SETEXT);
	}
	parse(parser) {
		var re = markdown_BlockSyntax.RE_SETEXT;
		re.match(parser.get_next());
		var tag = re.matched(1).charAt(0) == "=" ? "h1" : "h2";
		var contents = parser.document.parseInline(parser.lines[parser.pos]);
		parser.advance();
		parser.advance();
		return new markdown_ElementNode(tag,contents);
	}
}
$hxClasses["markdown.SetextHeaderSyntax"] = markdown_SetextHeaderSyntax;
markdown_SetextHeaderSyntax.__name__ = "markdown.SetextHeaderSyntax";
markdown_SetextHeaderSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_SetextHeaderSyntax.prototype, {
	__class__: markdown_SetextHeaderSyntax
});
class markdown_HeaderSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_HEADER;
	}
	parse(parser) {
		this.get_pattern().match(parser.lines[parser.pos]);
		parser.advance();
		var level = this.get_pattern().matched(1).length;
		var contents = parser.document.parseInline(StringTools.trim(this.get_pattern().matched(2)));
		return new markdown_ElementNode("h" + level,contents);
	}
}
$hxClasses["markdown.HeaderSyntax"] = markdown_HeaderSyntax;
markdown_HeaderSyntax.__name__ = "markdown.HeaderSyntax";
markdown_HeaderSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_HeaderSyntax.prototype, {
	__class__: markdown_HeaderSyntax
});
class markdown_BlockquoteSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_BLOCKQUOTE;
	}
	parseChildLines(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length) if(this.get_pattern().match(parser.lines[parser.pos])) {
			childLines.push(this.get_pattern().matched(1));
			parser.advance();
		} else {
			var nextMatch = parser.get_next() != null && this.get_pattern().match(parser.get_next());
			if(StringTools.trim(parser.lines[parser.pos]) == "" && nextMatch) {
				childLines.push("");
				childLines.push(this.get_pattern().matched(1));
				parser.advance();
				parser.advance();
			} else {
				break;
			}
		}
		return childLines;
	}
	parse(parser) {
		var childLines = this.parseChildLines(parser);
		var children = parser.document.parseLines(childLines);
		return new markdown_ElementNode("blockquote",children);
	}
}
$hxClasses["markdown.BlockquoteSyntax"] = markdown_BlockquoteSyntax;
markdown_BlockquoteSyntax.__name__ = "markdown.BlockquoteSyntax";
markdown_BlockquoteSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_BlockquoteSyntax.prototype, {
	__class__: markdown_BlockquoteSyntax
});
class markdown_CodeBlockSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_INDENT;
	}
	parseChildLines(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length) if(this.get_pattern().match(parser.lines[parser.pos])) {
			childLines.push(this.get_pattern().matched(1));
			parser.advance();
		} else {
			var nextMatch = parser.get_next() != null && this.get_pattern().match(parser.get_next());
			if(StringTools.trim(parser.lines[parser.pos]) == "" && nextMatch) {
				childLines.push("");
				childLines.push(this.get_pattern().matched(1));
				parser.advance();
				parser.advance();
			} else {
				break;
			}
		}
		return childLines;
	}
	parse(parser) {
		var childLines = this.parseChildLines(parser);
		childLines.push("");
		var escaped = StringTools.htmlEscape(childLines.join("\n"));
		return new markdown_ElementNode("pre",[markdown_ElementNode.text("code",escaped)]);
	}
}
$hxClasses["markdown.CodeBlockSyntax"] = markdown_CodeBlockSyntax;
markdown_CodeBlockSyntax.__name__ = "markdown.CodeBlockSyntax";
markdown_CodeBlockSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_CodeBlockSyntax.prototype, {
	__class__: markdown_CodeBlockSyntax
});
class markdown_GitHubCodeBlockSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_CODE;
	}
	parseChildLines(parser) {
		var childLines = [];
		parser.advance();
		while(parser.pos < parser.lines.length) if(!this.get_pattern().match(parser.lines[parser.pos])) {
			childLines.push(parser.lines[parser.pos]);
			parser.advance();
		} else {
			parser.advance();
			break;
		}
		return childLines;
	}
	parse(parser) {
		var syntax = this.get_pattern().matched(1);
		var childLines = this.parseChildLines(parser);
		var code = null;
		var source = childLines.join("\n");
		var _this = parser.document.codeBlockSyntaxes;
		if(__map_reserved[syntax] != null ? _this.existsReserved(syntax) : _this.h.hasOwnProperty(syntax)) {
			var _this1 = parser.document.codeBlockSyntaxes;
			var format = __map_reserved[syntax] != null ? _this1.getReserved(syntax) : _this1.h[syntax];
			code = markdown_ElementNode.text("code",format(source));
		} else {
			code = markdown_ElementNode.text("code",StringTools.htmlEscape(source));
			if(syntax != null && syntax.length > 0) {
				var _this2 = code.attributes;
				var value = "prettyprint " + syntax;
				if(__map_reserved["class"] != null) {
					_this2.setReserved("class",value);
				} else {
					_this2.h["class"] = value;
				}
			}
		}
		return new markdown_ElementNode("pre",[code]);
	}
}
$hxClasses["markdown.GitHubCodeBlockSyntax"] = markdown_GitHubCodeBlockSyntax;
markdown_GitHubCodeBlockSyntax.__name__ = "markdown.GitHubCodeBlockSyntax";
markdown_GitHubCodeBlockSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_GitHubCodeBlockSyntax.prototype, {
	__class__: markdown_GitHubCodeBlockSyntax
});
class markdown_HorizontalRuleSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_HR;
	}
	parse(parser) {
		parser.advance();
		return markdown_ElementNode.empty("hr");
	}
}
$hxClasses["markdown.HorizontalRuleSyntax"] = markdown_HorizontalRuleSyntax;
markdown_HorizontalRuleSyntax.__name__ = "markdown.HorizontalRuleSyntax";
markdown_HorizontalRuleSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_HorizontalRuleSyntax.prototype, {
	__class__: markdown_HorizontalRuleSyntax
});
class markdown_BlockHtmlSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_HTML;
	}
	get_canEndBlock() {
		return false;
	}
	parse(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length && !parser.matches(markdown_BlockSyntax.RE_EMPTY)) {
			childLines.push(parser.lines[parser.pos]);
			parser.advance();
		}
		return new markdown_TextNode(childLines.join("\n"));
	}
}
$hxClasses["markdown.BlockHtmlSyntax"] = markdown_BlockHtmlSyntax;
markdown_BlockHtmlSyntax.__name__ = "markdown.BlockHtmlSyntax";
markdown_BlockHtmlSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_BlockHtmlSyntax.prototype, {
	__class__: markdown_BlockHtmlSyntax
});
class markdown_ListItem {
	constructor(lines) {
		this.forceBlock = false;
		this.lines = lines;
	}
}
$hxClasses["markdown.ListItem"] = markdown_ListItem;
markdown_ListItem.__name__ = "markdown.ListItem";
Object.assign(markdown_ListItem.prototype, {
	__class__: markdown_ListItem
	,forceBlock: null
	,lines: null
});
class markdown_ParagraphSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_canEndBlock() {
		return false;
	}
	canParse(parser) {
		return true;
	}
	parse(parser) {
		var childLines = [];
		while(!markdown_BlockSyntax.isAtBlockEnd(parser)) {
			childLines.push(StringTools.ltrim(parser.lines[parser.pos]));
			parser.advance();
		}
		var contents = parser.document.parseInline(childLines.join("\n"));
		return new markdown_ElementNode("p",contents);
	}
}
$hxClasses["markdown.ParagraphSyntax"] = markdown_ParagraphSyntax;
markdown_ParagraphSyntax.__name__ = "markdown.ParagraphSyntax";
markdown_ParagraphSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_ParagraphSyntax.prototype, {
	__class__: markdown_ParagraphSyntax
});
class markdown_ListSyntax extends markdown_BlockSyntax {
	constructor(listTag) {
		super();
		this.listTag = listTag;
	}
	get_canEndBlock() {
		return false;
	}
	parse(parser) {
		var items = [];
		var childLines = [];
		var endItem = function() {
			if(childLines.length > 0) {
				items.push(new markdown_ListItem(childLines));
				childLines = [];
			}
		};
		var match;
		var tryMatch = function(pattern) {
			match = pattern;
			return pattern.match(parser.lines[parser.pos]);
		};
		while(parser.pos < parser.lines.length) {
			if(tryMatch(markdown_BlockSyntax.RE_EMPTY)) {
				childLines.push("");
			} else if(tryMatch(markdown_BlockSyntax.RE_UL) || tryMatch(markdown_BlockSyntax.RE_OL)) {
				endItem();
				var tmp = match.matched(1);
				childLines.push(tmp);
			} else if(tryMatch(markdown_BlockSyntax.RE_INDENT)) {
				var tmp1 = match.matched(1);
				childLines.push(tmp1);
			} else if(markdown_BlockSyntax.isAtBlockEnd(parser)) {
				break;
			} else {
				if(childLines.length > 0 && childLines[childLines.length - 1] == "") {
					break;
				}
				childLines.push(parser.lines[parser.pos]);
			}
			parser.advance();
		}
		endItem();
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			var len = items[i].lines.length;
			var _g2 = 1;
			var _g11 = len + 1;
			while(_g2 < _g11) {
				var jj = _g2++;
				var j = len - jj;
				if(markdown_BlockSyntax.RE_EMPTY.match(items[i].lines[j])) {
					if(i < items.length - 1) {
						items[i].forceBlock = true;
						items[i + 1].forceBlock = true;
					}
					items[i].lines.pop();
				} else {
					break;
				}
			}
		}
		var itemNodes = [];
		var _g21 = 0;
		while(_g21 < items.length) {
			var item = items[_g21];
			++_g21;
			var blockItem = item.forceBlock || item.lines.length > 1;
			var blocksInList = [markdown_BlockSyntax.RE_BLOCKQUOTE,markdown_BlockSyntax.RE_HEADER,markdown_BlockSyntax.RE_HR,markdown_BlockSyntax.RE_INDENT,markdown_BlockSyntax.RE_UL,markdown_BlockSyntax.RE_OL];
			if(!blockItem) {
				var _g22 = 0;
				while(_g22 < blocksInList.length) {
					var pattern1 = blocksInList[_g22];
					++_g22;
					if(pattern1.match(item.lines[0])) {
						blockItem = true;
						break;
					}
				}
			}
			if(blockItem) {
				var children = parser.document.parseLines(item.lines);
				if(!item.forceBlock && children.length == 1) {
					if(((children[0]) instanceof markdown_ElementNode)) {
						var node = children[0];
						if(node.tag == "p") {
							children = node.children;
						}
					}
				}
				itemNodes.push(new markdown_ElementNode("li",children));
			} else {
				var contents = parser.document.parseInline(item.lines[0]);
				itemNodes.push(new markdown_ElementNode("li",contents));
			}
		}
		return new markdown_ElementNode(this.listTag,itemNodes);
	}
}
$hxClasses["markdown.ListSyntax"] = markdown_ListSyntax;
markdown_ListSyntax.__name__ = "markdown.ListSyntax";
markdown_ListSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_ListSyntax.prototype, {
	__class__: markdown_ListSyntax
	,listTag: null
});
class markdown_UnorderedListSyntax extends markdown_ListSyntax {
	constructor() {
		super("ul");
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_UL;
	}
}
$hxClasses["markdown.UnorderedListSyntax"] = markdown_UnorderedListSyntax;
markdown_UnorderedListSyntax.__name__ = "markdown.UnorderedListSyntax";
markdown_UnorderedListSyntax.__super__ = markdown_ListSyntax;
Object.assign(markdown_UnorderedListSyntax.prototype, {
	__class__: markdown_UnorderedListSyntax
});
class markdown_OrderedListSyntax extends markdown_ListSyntax {
	constructor() {
		super("ol");
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_OL;
	}
}
$hxClasses["markdown.OrderedListSyntax"] = markdown_OrderedListSyntax;
markdown_OrderedListSyntax.__name__ = "markdown.OrderedListSyntax";
markdown_OrderedListSyntax.__super__ = markdown_ListSyntax;
Object.assign(markdown_OrderedListSyntax.prototype, {
	__class__: markdown_OrderedListSyntax
});
class markdown_TableSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_TableSyntax.TABLE_PATTERN;
	}
	get_canEndBlock() {
		return false;
	}
	parse(parser) {
		var lines = [];
		while(parser.pos < parser.lines.length && parser.matches(markdown_TableSyntax.TABLE_PATTERN)) {
			lines.push(parser.lines[parser.pos]);
			parser.advance();
		}
		var heads = [];
		var rows = [];
		var headLine = lines.shift();
		var alignLine = lines.shift();
		var aligns = [];
		if(alignLine != null) {
			markdown_TableSyntax.CELL_PATTERN.map(alignLine,function(e) {
				var text = e.matched(2);
				var align = text.charAt(0) == ":" ? text.charAt(text.length - 1) == ":" ? "center" : "left" : text.charAt(text.length - 1) == ":" ? "right" : "left";
				aligns.push(align);
				return "";
			});
		}
		var index = 0;
		markdown_TableSyntax.CELL_PATTERN.map(headLine,function(e1) {
			var text1 = StringTools.trim(e1.matched(2));
			var cell = new markdown_ElementNode("th",parser.document.parseInline(text1));
			if(aligns[index] != "left") {
				var _this = cell.attributes;
				var value = aligns[index];
				if(__map_reserved["align"] != null) {
					_this.setReserved("align",value);
				} else {
					_this.h["align"] = value;
				}
			}
			heads.push(cell);
			index += 1;
			return "";
		});
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var cols = [[]];
			rows.push(new markdown_ElementNode("tr",cols[0]));
			var index1 = [0];
			markdown_TableSyntax.CELL_PATTERN.map(line,(function(index2,cols1) {
				return function(e2) {
					var text2 = StringTools.trim(e2.matched(2));
					var cell1 = new markdown_ElementNode("td",parser.document.parseInline(text2));
					if(aligns[index2[0]] != "left") {
						var _this1 = cell1.attributes;
						var value1 = aligns[index2[0]];
						if(__map_reserved["align"] != null) {
							_this1.setReserved("align",value1);
						} else {
							_this1.h["align"] = value1;
						}
					}
					cols1[0].push(cell1);
					index2[0] += 1;
					return "";
				};
			})(index1,cols));
		}
		return new markdown_ElementNode("table",[new markdown_ElementNode("thead",heads),new markdown_ElementNode("tbody",rows)]);
	}
}
$hxClasses["markdown.TableSyntax"] = markdown_TableSyntax;
markdown_TableSyntax.__name__ = "markdown.TableSyntax";
markdown_TableSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_TableSyntax.prototype, {
	__class__: markdown_TableSyntax
});
class markdown_HtmlRenderer {
	constructor() {
	}
	render(nodes) {
		this.buffer = new StringBuf();
		var _g = 0;
		while(_g < nodes.length) {
			var node = nodes[_g];
			++_g;
			node.accept(this);
		}
		return this.buffer.b;
	}
	visitText(text) {
		this.buffer.b += Std.string(text.text);
	}
	visitElementBefore(element) {
		if(this.buffer.b != "" && markdown_HtmlRenderer.BLOCK_TAGS.match(element.tag)) {
			this.buffer.b += "\n";
		}
		this.buffer.b += Std.string("<" + element.tag);
		var _g = [];
		var k = element.attributes.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var attributeNames = _g;
		attributeNames.sort(markdown_HtmlRenderer.sortAttributes);
		var _g1 = 0;
		while(_g1 < attributeNames.length) {
			var name = attributeNames[_g1];
			++_g1;
			var _this = this.buffer;
			var _this1 = element.attributes;
			var x = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
			_this.b += Std.string(" " + name + "=\"" + x + "\"");
		}
		if(element.children == null) {
			this.buffer.b += " />";
			return false;
		} else {
			this.buffer.b += ">";
			return true;
		}
	}
	visitElementAfter(element) {
		this.buffer.b += Std.string("</" + element.tag + ">");
	}
	static sortAttributes(a,b) {
		var ia = markdown_HtmlRenderer.attributeOrder.indexOf(a);
		var ib = markdown_HtmlRenderer.attributeOrder.indexOf(a);
		if(ia > -1 && ib > -1) {
			return ia - ib;
		}
		return Reflect.compare(a,b);
	}
}
$hxClasses["markdown.HtmlRenderer"] = markdown_HtmlRenderer;
markdown_HtmlRenderer.__name__ = "markdown.HtmlRenderer";
markdown_HtmlRenderer.__interfaces__ = [markdown_NodeVisitor];
Object.assign(markdown_HtmlRenderer.prototype, {
	__class__: markdown_HtmlRenderer
	,buffer: null
});
class markdown_InlineSyntax {
	constructor(pattern) {
		this.pattern = new EReg(pattern,"m");
	}
	tryMatch(parser) {
		if(this.pattern.match(parser.get_currentSource()) && this.pattern.matchedPos().pos == 0) {
			parser.writeText();
			if(this.onMatch(parser)) {
				parser.consume(this.pattern.matched(0).length);
			}
			return true;
		}
		return false;
	}
	onMatch(parser) {
		return false;
	}
}
$hxClasses["markdown.InlineSyntax"] = markdown_InlineSyntax;
markdown_InlineSyntax.__name__ = "markdown.InlineSyntax";
Object.assign(markdown_InlineSyntax.prototype, {
	__class__: markdown_InlineSyntax
	,pattern: null
});
class markdown_AutolinkSyntaxWithoutBrackets extends markdown_InlineSyntax {
	constructor() {
		super("\\b((http|https|ftp)://[^\\s]*)\\b");
	}
	tryMatch(parser) {
		return super.tryMatch(parser);
	}
	onMatch(parser) {
		var url = this.pattern.matched(1);
		var anchor = markdown_ElementNode.text("a",StringTools.htmlEscape(url));
		var _this = anchor.attributes;
		if(__map_reserved["href"] != null) {
			_this.setReserved("href",url);
		} else {
			_this.h["href"] = url;
		}
		parser.addNode(anchor);
		return true;
	}
}
$hxClasses["markdown.AutolinkSyntaxWithoutBrackets"] = markdown_AutolinkSyntaxWithoutBrackets;
markdown_AutolinkSyntaxWithoutBrackets.__name__ = "markdown.AutolinkSyntaxWithoutBrackets";
markdown_AutolinkSyntaxWithoutBrackets.__super__ = markdown_InlineSyntax;
Object.assign(markdown_AutolinkSyntaxWithoutBrackets.prototype, {
	__class__: markdown_AutolinkSyntaxWithoutBrackets
});
class markdown_TextSyntax extends markdown_InlineSyntax {
	constructor(pattern,substitute) {
		super(pattern);
		this.substitute = substitute;
	}
	onMatch(parser) {
		if(this.substitute == null) {
			parser.advanceBy(this.pattern.matched(0).length);
			return false;
		}
		parser.addNode(parser.createText(this.substitute));
		return true;
	}
}
$hxClasses["markdown.TextSyntax"] = markdown_TextSyntax;
markdown_TextSyntax.__name__ = "markdown.TextSyntax";
markdown_TextSyntax.__super__ = markdown_InlineSyntax;
Object.assign(markdown_TextSyntax.prototype, {
	__class__: markdown_TextSyntax
	,substitute: null
});
class markdown_AutolinkSyntax extends markdown_InlineSyntax {
	constructor() {
		super("<((http|https|ftp)://[^>]*)>");
	}
	onMatch(parser) {
		var url = this.pattern.matched(1);
		var anchor = markdown_ElementNode.text("a",StringTools.htmlEscape(url));
		var _this = anchor.attributes;
		if(__map_reserved["href"] != null) {
			_this.setReserved("href",url);
		} else {
			_this.h["href"] = url;
		}
		parser.addNode(anchor);
		return true;
	}
}
$hxClasses["markdown.AutolinkSyntax"] = markdown_AutolinkSyntax;
markdown_AutolinkSyntax.__name__ = "markdown.AutolinkSyntax";
markdown_AutolinkSyntax.__super__ = markdown_InlineSyntax;
Object.assign(markdown_AutolinkSyntax.prototype, {
	__class__: markdown_AutolinkSyntax
});
class markdown_TagSyntax extends markdown_InlineSyntax {
	constructor(pattern,tag,end) {
		super(pattern);
		this.tag = tag;
		this.endPattern = new EReg(end == null ? pattern : end,"m");
	}
	onMatch(parser) {
		parser.stack.push(new markdown_TagState(parser.pos,parser.pos + this.pattern.matched(0).length,this));
		return true;
	}
	onMatchEnd(parser,state) {
		parser.addNode(new markdown_ElementNode(this.tag,state.children));
		return true;
	}
}
$hxClasses["markdown.TagSyntax"] = markdown_TagSyntax;
markdown_TagSyntax.__name__ = "markdown.TagSyntax";
markdown_TagSyntax.__super__ = markdown_InlineSyntax;
Object.assign(markdown_TagSyntax.prototype, {
	__class__: markdown_TagSyntax
	,endPattern: null
	,tag: null
});
class markdown_LinkSyntax extends markdown_TagSyntax {
	constructor(linkResolver) {
		super("\\[",null,markdown_LinkSyntax.linkPattern);
		this.linkResolver = linkResolver;
	}
	onMatchEnd(parser,state) {
		var url;
		var title;
		if(this.endPattern.matched(1) == null || this.endPattern.matched(1) == "") {
			if(this.linkResolver == null) {
				return false;
			}
			if(state.children.length != 1) {
				return false;
			}
			if(!((state.children[0]) instanceof markdown_TextNode)) {
				return false;
			}
			var link = state.children[0];
			var node = this.linkResolver(link.text);
			if(node == null) {
				return false;
			}
			parser.addNode(node);
			return true;
		}
		if(this.endPattern.matched(3) != null && this.endPattern.matched(3) != "") {
			url = this.endPattern.matched(3);
			title = this.endPattern.matched(4);
			if(StringTools.startsWith(url,"<") && StringTools.endsWith(url,">")) {
				url = url.substring(1,url.length - 1);
			}
		} else {
			var id = this.endPattern.matched(2);
			if(id == "") {
				id = parser.source.substring(state.startPos + 1,parser.pos);
			}
			id = id.toLowerCase();
			var _this = parser.document.refLinks;
			var link1 = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(link1 == null) {
				return false;
			}
			url = link1.url;
			title = link1.title;
		}
		var anchor = new markdown_ElementNode("a",state.children);
		var this1 = anchor.attributes;
		var value = StringTools.htmlEscape(url);
		var _this1 = this1;
		if(__map_reserved["href"] != null) {
			_this1.setReserved("href",value);
		} else {
			_this1.h["href"] = value;
		}
		if(title != null && title != "") {
			var this2 = anchor.attributes;
			var value1 = StringTools.htmlEscape(title);
			var _this2 = this2;
			if(__map_reserved["title"] != null) {
				_this2.setReserved("title",value1);
			} else {
				_this2.h["title"] = value1;
			}
		}
		parser.addNode(anchor);
		return true;
	}
}
$hxClasses["markdown.LinkSyntax"] = markdown_LinkSyntax;
markdown_LinkSyntax.__name__ = "markdown.LinkSyntax";
markdown_LinkSyntax.__super__ = markdown_TagSyntax;
Object.assign(markdown_LinkSyntax.prototype, {
	__class__: markdown_LinkSyntax
	,linkResolver: null
});
class markdown_ImgSyntax extends markdown_TagSyntax {
	constructor(linkResolver) {
		super("!\\[",null,markdown_ImgSyntax.linkPattern);
		this.linkResolver = linkResolver;
	}
	onMatchEnd(parser,state) {
		var url;
		var title;
		if(this.endPattern.matched(1) == null || this.endPattern.matched(1) == "") {
			if(this.linkResolver == null) {
				return false;
			}
			if(state.children.length != 1) {
				return false;
			}
			if(!((state.children[0]) instanceof markdown_TextNode)) {
				return false;
			}
			var link = state.children[0];
			var node = this.linkResolver(link.text);
			if(node == null) {
				return false;
			}
			parser.addNode(node);
			return true;
		}
		if(this.endPattern.matched(3) != null && this.endPattern.matched(3) != "") {
			url = this.endPattern.matched(3);
			title = this.endPattern.matched(4);
			if(StringTools.startsWith(url,"<") && StringTools.endsWith(url,">")) {
				url = url.substring(1,url.length - 1);
			}
		} else {
			var id = this.endPattern.matched(2);
			if(id == "") {
				id = parser.source.substring(state.startPos + 1,parser.pos);
			}
			id = id.toLowerCase();
			var _this = parser.document.refLinks;
			var link1 = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(link1 == null) {
				return false;
			}
			url = link1.url;
			title = link1.title;
		}
		var img = new markdown_ElementNode("img",null);
		var this1 = img.attributes;
		var value = StringTools.htmlEscape(url);
		var _this1 = this1;
		if(__map_reserved["src"] != null) {
			_this1.setReserved("src",value);
		} else {
			_this1.h["src"] = value;
		}
		if(state.children.length == 1 && ((state.children[0]) instanceof markdown_TextNode)) {
			var alt = state.children[0];
			var value1 = alt.text;
			var _this2 = img.attributes;
			if(__map_reserved["alt"] != null) {
				_this2.setReserved("alt",value1);
			} else {
				_this2.h["alt"] = value1;
			}
		}
		if(title != null && title != "") {
			var this2 = img.attributes;
			var value2 = StringTools.htmlEscape(title);
			var _this3 = this2;
			if(__map_reserved["title"] != null) {
				_this3.setReserved("title",value2);
			} else {
				_this3.h["title"] = value2;
			}
		}
		parser.addNode(img);
		return true;
	}
}
$hxClasses["markdown.ImgSyntax"] = markdown_ImgSyntax;
markdown_ImgSyntax.__name__ = "markdown.ImgSyntax";
markdown_ImgSyntax.__super__ = markdown_TagSyntax;
Object.assign(markdown_ImgSyntax.prototype, {
	__class__: markdown_ImgSyntax
	,linkResolver: null
});
class markdown_CodeSyntax extends markdown_InlineSyntax {
	constructor(pattern) {
		super(pattern);
	}
	onMatch(parser) {
		parser.addNode(markdown_ElementNode.text("code",StringTools.htmlEscape(this.pattern.matched(1))));
		return true;
	}
}
$hxClasses["markdown.CodeSyntax"] = markdown_CodeSyntax;
markdown_CodeSyntax.__name__ = "markdown.CodeSyntax";
markdown_CodeSyntax.__super__ = markdown_InlineSyntax;
Object.assign(markdown_CodeSyntax.prototype, {
	__class__: markdown_CodeSyntax
});
class markdown_InlineParser {
	constructor(source,document) {
		this.start = 0;
		this.pos = 0;
		this.source = source;
		this.document = document;
		this.stack = [];
		if(document.inlineSyntaxes != null) {
			this.syntaxes = [];
			var _g = 0;
			var _g1 = document.inlineSyntaxes;
			while(_g < _g1.length) {
				var syntax = _g1[_g];
				++_g;
				this.syntaxes.push(syntax);
			}
			var _g2 = 0;
			var _g3 = markdown_InlineParser.defaultSyntaxes;
			while(_g2 < _g3.length) {
				var syntax1 = _g3[_g2];
				++_g2;
				this.syntaxes.push(syntax1);
			}
		} else {
			this.syntaxes = markdown_InlineParser.defaultSyntaxes;
		}
		var _this = this.syntaxes;
		var x = new markdown_LinkSyntax(document.linkResolver);
		_this.splice(1,0,x);
	}
	parse() {
		this.stack.push(new markdown_TagState(0,0,null));
		while(!this.get_isDone()) {
			var matched = false;
			var _g = 1;
			var _g1 = this.stack.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.stack[this.stack.length - i].tryMatch(this)) {
					matched = true;
					break;
				}
			}
			if(matched) {
				continue;
			}
			var _g2 = 0;
			var _g3 = this.syntaxes;
			while(_g2 < _g3.length) {
				var syntax = _g3[_g2];
				++_g2;
				if(syntax.tryMatch(this)) {
					matched = true;
					break;
				}
			}
			if(matched) {
				continue;
			}
			this.advanceBy(1);
		}
		return this.stack[0].close(this);
	}
	writeText() {
		this.writeTextRange(this.start,this.pos);
		this.start = this.pos;
	}
	writeTextRange(start,end) {
		if(end > start) {
			var text = this.source.substring(start,end);
			var nodes = this.stack[this.stack.length - 1].children;
			if(nodes.length > 0 && ((nodes[nodes.length - 1]) instanceof markdown_TextNode)) {
				var lastNode = nodes[nodes.length - 1];
				var newNode = this.createText("" + lastNode.text + text);
				nodes[nodes.length - 1] = newNode;
			} else {
				nodes.push(this.createText(text));
			}
		}
	}
	createText(text) {
		return new markdown_TextNode(this.unescape(text));
	}
	addNode(node) {
		this.stack[this.stack.length - 1].children.push(node);
	}
	get_currentSource() {
		return this.source.substring(this.pos,this.source.length);
	}
	get_isDone() {
		return this.pos == this.source.length;
	}
	advanceBy(length) {
		this.pos += length;
	}
	consume(length) {
		this.pos += length;
		this.start = this.pos;
	}
	unescape(text) {
		var _this_r = new RegExp("\\\\([\\\\`*_{}\\[\\]()#+-.!])","g".split("u").join(""));
		text = text.replace(_this_r,"$1");
		text = StringTools.replace(text,"\t","    ");
		return text;
	}
}
$hxClasses["markdown.InlineParser"] = markdown_InlineParser;
markdown_InlineParser.__name__ = "markdown.InlineParser";
Object.assign(markdown_InlineParser.prototype, {
	__class__: markdown_InlineParser
	,source: null
	,document: null
	,syntaxes: null
	,pos: null
	,start: null
	,stack: null
});
class markdown_TagState {
	constructor(startPos,endPos,syntax) {
		this.startPos = startPos;
		this.endPos = endPos;
		this.syntax = syntax;
		this.children = [];
	}
	tryMatch(parser) {
		if(this.syntax.endPattern.match(parser.get_currentSource()) && this.syntax.endPattern.matchedPos().pos == 0) {
			this.close(parser);
			return true;
		}
		return false;
	}
	close(parser) {
		var index = parser.stack.indexOf(this);
		var unmatchedTags = parser.stack.splice(index + 1,parser.stack.length - index);
		var _g = 0;
		while(_g < unmatchedTags.length) {
			var unmatched = unmatchedTags[_g];
			++_g;
			parser.writeTextRange(unmatched.startPos,unmatched.endPos);
			var _g1 = 0;
			var _g11 = unmatched.children;
			while(_g1 < _g11.length) {
				var child = _g11[_g1];
				++_g1;
				this.children.push(child);
			}
		}
		parser.writeText();
		parser.stack.pop();
		if(parser.stack.length == 0) {
			return this.children;
		}
		if(this.syntax.onMatchEnd(parser,this)) {
			parser.consume(this.syntax.endPattern.matched(0).length);
		} else {
			parser.start = this.startPos;
			parser.advanceBy(this.syntax.endPattern.matched(0).length);
		}
		return null;
	}
}
$hxClasses["markdown.TagState"] = markdown_TagState;
markdown_TagState.__name__ = "markdown.TagState";
Object.assign(markdown_TagState.prototype, {
	__class__: markdown_TagState
	,startPos: null
	,endPos: null
	,syntax: null
	,children: null
});
var tokentree_TokenStreamMode = $hxEnums["tokentree.TokenStreamMode"] = { __ename__ : true, __constructs__ : ["STRICT","RELAXED"]
	,STRICT: {_hx_index:0,__enum__:"tokentree.TokenStreamMode",toString:$estr}
	,RELAXED: {_hx_index:1,__enum__:"tokentree.TokenStreamMode",toString:$estr}
};
class tokentree_TokenStream {
	constructor(tokens,bytes) {
		this.tokens = tokens;
		this.bytes = bytes;
		this.sharpIfStack = [];
		this.tempStore = [];
		this.current = 0;
	}
	hasMore() {
		return this.current < this.tokens.length;
	}
	consumeToken() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("no more tokens");
			case 1:
				return this.createDummyToken(haxeparser_TokenDef.CommentLine("auto insert"));
			}
		}
		var token = this.tokens[this.current];
		this.current++;
		var space = "";
		return new tokentree_TokenTree(token.tok,space,token.pos,this.current - 1);
	}
	consumeConstIdent() {
		var _g = this.token();
		switch(_g._hx_index) {
		case 1:
			var _g1 = _g.c;
			if(_g1._hx_index == 3) {
				var _g2 = _g1.s;
				return this.consumeToken();
			} else {
				switch(tokentree_TokenStream.MODE._hx_index) {
				case 0:
					var s = "bad token " + Std.string(this.token()) + " != Const(CIdent(_))";
					throw new js__$Boot_HaxeError(this.formatCurrentPos() + ": " + s);
				case 1:
					return this.createDummyToken(haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent("autoInsert")));
				}
			}
			break;
		case 3:
			var _g3 = _g.s;
			return this.consumeToken();
		default:
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				var s1 = "bad token " + Std.string(this.token()) + " != Const(CIdent(_))";
				throw new js__$Boot_HaxeError(this.formatCurrentPos() + ": " + s1);
			case 1:
				return this.createDummyToken(haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent("autoInsert")));
			}
		}
	}
	consumeConst() {
		var _g = this.token();
		if(_g._hx_index == 1) {
			var _g1 = _g.c;
			return this.consumeToken();
		} else {
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				var s = "bad token " + Std.string(this.token()) + " != Const(_)";
				throw new js__$Boot_HaxeError(this.formatCurrentPos() + ": " + s);
			case 1:
				return this.createDummyToken(haxeparser_TokenDef.Const(haxe_macro_Constant.CString("autoInsert")));
			}
		}
	}
	consumeTokenDef(tokenDef) {
		if(this.is(tokenDef)) {
			return this.consumeToken();
		}
		switch(tokentree_TokenStream.MODE._hx_index) {
		case 0:
			var s = "bad token " + Std.string(this.token()) + " != " + Std.string(tokenDef);
			throw new js__$Boot_HaxeError(this.formatCurrentPos() + ": " + s);
		case 1:
			return this.createDummyToken(tokenDef);
		}
	}
	consumeToTempStore() {
		this.tempStore.push(this.consumeToken());
	}
	addToTempStore(token) {
		this.tempStore.push(token);
	}
	applyTempStore(parent) {
		while(this.tempStore.length > 0) parent.addChild(this.tempStore.shift());
	}
	getTempStore() {
		return this.tempStore;
	}
	clearTempStore() {
		this.tempStore = [];
	}
	formatCurrentPos() {
		var pos = this.tokens[this.current].pos;
		return new hxparse_Position(pos.file,pos.min,pos.max).format(this.bytes);
	}
	is(tokenDef) {
		if(this.current < 0 || this.current >= this.tokens.length) {
			return false;
		}
		var token = this.tokens[this.current];
		return Type.enumEq(tokenDef,token.tok);
	}
	isSharp() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			return false;
		}
		var token = this.tokens[this.current];
		var _g = token.tok;
		if(_g._hx_index == 2) {
			var _g1 = _g.s;
			return true;
		} else {
			return false;
		}
	}
	isTypedParam() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			return false;
		}
		var index = this.current + 1;
		var token = this.tokens[this.current];
		var _g = token.tok;
		if(_g._hx_index == 5) {
			if(_g.op._hx_index != 9) {
				return false;
			}
		} else {
			return false;
		}
		while(true) {
			token = this.tokens[index++];
			var _g2 = token.tok;
			switch(_g2._hx_index) {
			case 0:
				var _g5 = _g2.k;
				break;
			case 1:
				var _g4 = _g2.c;
				break;
			case 3:
				var _g6 = _g2.s;
				break;
			case 5:
				switch(_g2.op._hx_index) {
				case 7:
					return true;
				case 9:
					break;
				default:
					return false;
				}
				break;
			case 10:
				break;
			case 11:
				break;
			case 13:
				break;
			default:
				return false;
			}
		}
	}
	token() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("no more tokens");
			case 1:
				return haxeparser_TokenDef.CommentLine("auto insert");
			}
		}
		return this.tokens[this.current].tok;
	}
	peekNonCommentToken() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("no more tokens");
			case 1:
				return haxeparser_TokenDef.Const(haxe_macro_Constant.CString("auto insert"));
			}
		}
		var index = this.current;
		while(index < this.tokens.length) {
			var token = this.tokens[index++];
			if(haxeparser_Token == null) {
				continue;
			}
			var _g = token.tok;
			switch(_g._hx_index) {
			case 6:
				var _g2 = _g.s;
				break;
			case 7:
				var _g1 = _g.s;
				break;
			default:
				return token.tok;
			}
		}
		return null;
	}
	getTokenPos() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			return null;
		}
		return this.tokens[this.current].pos;
	}
	getStreamIndex() {
		return this.current;
	}
	rewindTo(pos) {
		this.current = pos;
	}
	consumeOpGt() {
		var tok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
		var _g = this.token();
		if(_g._hx_index == 5) {
			switch(_g.op._hx_index) {
			case 4:
				var assignTok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
				return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGte),tok.space + assignTok.space,{ file : tok.pos.file, min : tok.pos.min, max : assignTok.pos.max},tok.index);
			case 7:
				return this.consumeOpShr(tok);
			default:
				return tok;
			}
		} else {
			return tok;
		}
	}
	consumeOpShr(parent) {
		var tok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
		var _g = this.token();
		if(_g._hx_index == 5) {
			switch(_g.op._hx_index) {
			case 4:
				var assignTok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
				return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr)),assignTok.space,{ file : parent.pos.file, min : parent.pos.min, max : assignTok.pos.max},parent.index);
			case 7:
				var innerGt = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
				if(this.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
					var assignTok1 = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
					return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpUShr)),assignTok1.space,{ file : parent.pos.file, min : parent.pos.min, max : assignTok1.pos.max},parent.index);
				}
				return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpUShr),innerGt.space,{ file : parent.pos.file, min : parent.pos.min, max : innerGt.pos.max},parent.index);
			default:
				return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShr),tok.space,{ file : parent.pos.file, min : parent.pos.min, max : tok.pos.max},parent.index);
			}
		} else {
			return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShr),tok.space,{ file : parent.pos.file, min : parent.pos.min, max : tok.pos.max},parent.index);
		}
	}
	consumeOpSub() {
		var tok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpSub));
		var _g = this.token();
		if(_g._hx_index == 1) {
			var _g1 = _g.c;
			switch(_g1._hx_index) {
			case 0:
				var _g2 = _g1.v;
				break;
			case 1:
				var _g3 = _g1.f;
				break;
			default:
				return new tokentree_TokenTree(tok.tok,tok.space,tok.pos,tok.index);
			}
		} else {
			return new tokentree_TokenTree(tok.tok,tok.space,tok.pos,tok.index);
		}
		var previous = this.current - 2;
		if(previous < 0) {
			throw new js__$Boot_HaxeError("no more tokens");
		}
		var prevTok = this.tokens[previous];
		var _g4 = prevTok.tok;
		switch(_g4._hx_index) {
		case 0:
			switch(_g4.k._hx_index) {
			case 3:case 4:case 5:case 6:case 7:case 10:case 15:case 29:
				break;
			default:
				return new tokentree_TokenTree(tok.tok,tok.space,tok.pos,tok.index);
			}
			break;
		case 4:
			var _g6 = _g4.op;
			break;
		case 5:
			var _g5 = _g4.op;
			break;
		case 8:
			var _g7 = _g4.s;
			break;
		case 9:case 11:case 13:case 14:case 16:case 18:case 20:
			break;
		default:
			return new tokentree_TokenTree(tok.tok,tok.space,tok.pos,tok.index);
		}
		var _g9 = this.token();
		if(_g9._hx_index == 1) {
			var _g10 = _g9.c;
			switch(_g10._hx_index) {
			case 0:
				var n = _g10.v;
				var $const = this.consumeConst();
				return new tokentree_TokenTree(haxeparser_TokenDef.Const(haxe_macro_Constant.CInt("-" + n)),$const.space,{ file : tok.pos.file, min : tok.pos.min, max : $const.pos.max},tok.index);
			case 1:
				var n1 = _g10.f;
				var const1 = this.consumeConst();
				return new tokentree_TokenTree(haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat("-" + n1)),const1.space,{ file : tok.pos.file, min : tok.pos.min, max : const1.pos.max},tok.index);
			default:
				throw new js__$Boot_HaxeError("no more tokens");
			}
		} else {
			throw new js__$Boot_HaxeError("no more tokens");
		}
	}
	pushSharpIf(token) {
		this.sharpIfStack.push(token);
	}
	popSharpIf() {
		var token = this.sharpIfStack.pop();
		if(token == null) {
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("no more tokens");
			case 1:
				return this.createDummyToken(haxeparser_TokenDef.CommentLine("dummy token"));
			}
		}
		return token;
	}
	peekSharpIf() {
		if(this.sharpIfStack.length <= 0) {
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("no more tokens");
			case 1:
				return this.createDummyToken(haxeparser_TokenDef.CommentLine("dummy token"));
			}
		}
		return this.sharpIfStack[this.sharpIfStack.length - 1];
	}
	createDummyToken(tokDef) {
		var pos;
		if(this.current < 0 || this.current >= this.tokens.length) {
			var prevPos = this.tokens[this.tokens.length - 1].pos;
			pos = { min : prevPos.max, max : prevPos.max, file : prevPos.file};
		} else {
			var prevPos1 = this.tokens[this.current].pos;
			pos = { min : prevPos1.min, max : prevPos1.min, file : prevPos1.file};
		}
		return new tokentree_TokenTree(tokDef,"",pos,-1,true);
	}
}
$hxClasses["tokentree.TokenStream"] = tokentree_TokenStream;
tokentree_TokenStream.__name__ = "tokentree.TokenStream";
Object.assign(tokentree_TokenStream.prototype, {
	__class__: tokentree_TokenStream
	,tokens: null
	,current: null
	,bytes: null
	,sharpIfStack: null
	,tempStore: null
});
class tokentree_TokenStreamProgress {
	constructor(stream) {
		this.stream = stream;
		this.pos = -1;
	}
	streamHasChanged() {
		if(this.pos == -1) {
			this.pos = this.stream.getStreamIndex();
			return true;
		}
		var oldPos = this.pos;
		this.pos = this.stream.getStreamIndex();
		return this.pos != oldPos;
	}
}
$hxClasses["tokentree.TokenStreamProgress"] = tokentree_TokenStreamProgress;
tokentree_TokenStreamProgress.__name__ = "tokentree.TokenStreamProgress";
Object.assign(tokentree_TokenStreamProgress.prototype, {
	__class__: tokentree_TokenStreamProgress
	,stream: null
	,pos: null
});
class tokentree_TokenTree extends haxeparser_Token {
	constructor(tok,space,pos,index,inserted) {
		if(inserted == null) {
			inserted = false;
		}
		super(tok,pos);
		this.index = index;
		this.inserted = inserted;
		this.space = space;
		this.tokenTypeCache = { };
	}
	is(tokenDef) {
		if(this.tok == null) {
			return false;
		}
		return Type.enumEq(tokenDef,this.tok);
	}
	isCIdent() {
		if(this.tok == null) {
			return false;
		}
		var _g = this.tok;
		if(_g._hx_index == 1) {
			var _g1 = _g.c;
			if(_g1._hx_index == 3) {
				var _g2 = _g1.s;
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	isCIdentOrCString() {
		if(this.tok == null) {
			return false;
		}
		var _g = this.tok;
		if(_g._hx_index == 1) {
			var _g1 = _g.c;
			switch(_g1._hx_index) {
			case 2:
				var _g4 = _g1.kind;
				var _g3 = _g1.s;
				return true;
			case 3:
				var _g2 = _g1.s;
				return true;
			default:
				return false;
			}
		} else {
			return false;
		}
	}
	addChild(child) {
		if(child == null) {
			return;
		}
		if(this.children == null) {
			this.children = [];
		}
		if(this.children.length > 0) {
			child.previousSibling = this.children[this.children.length - 1];
			this.children[this.children.length - 1].nextSibling = child;
		}
		this.children.push(child);
		child.parent = this;
	}
	hasChildren() {
		if(this.children == null) {
			return false;
		}
		return this.children.length > 0;
	}
	getFirstChild() {
		if(!this.hasChildren()) {
			return null;
		}
		return this.children[0];
	}
	getLastChild() {
		if(!this.hasChildren()) {
			return null;
		}
		return this.children[this.children.length - 1];
	}
	getPos() {
		if(this.children == null || this.children.length <= 0) {
			return this.pos;
		}
		var fullPos = { file : this.pos.file, min : this.pos.min, max : this.pos.max};
		var childPos;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			childPos = child.getPos();
			if(childPos.min < fullPos.min) {
				fullPos.min = childPos.min;
			}
			if(childPos.max > fullPos.max) {
				fullPos.max = childPos.max;
			}
		}
		return fullPos;
	}
	filter(searchFor,mode,maxLevel) {
		if(maxLevel == null) {
			maxLevel = 9999;
		}
		return this.filterCallback(function(token,depth) {
			if(depth > maxLevel) {
				return tokentree_FilterResult.SKIP_SUBTREE;
			}
			if(token.matchesAny(searchFor)) {
				if(mode == tokentree_TokenFilterMode.ALL) {
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				}
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
	}
	filterCallback(callback) {
		var results = [];
		this.internalFilterCallback(callback,results,0);
		return results;
	}
	internalFilterCallback(callback,results,depth) {
		if(depth == null) {
			depth = 0;
		}
		if(this.tok != null) {
			switch(callback(this,depth)._hx_index) {
			case 0:
				results.push(this);
				return;
			case 1:
				results.push(this);
				break;
			case 2:
				return;
			case 3:
				break;
			}
		}
		if(this.children == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			if(_g2._hx_index == 2) {
				var _g11 = _g2.s;
				child.internalFilterCallback(callback,results,depth);
			} else {
				child.internalFilterCallback(callback,results,depth + 1);
			}
		}
	}
	matchesAny(searchFor) {
		if(searchFor == null || this.tok == null) {
			return false;
		}
		var _g = 0;
		while(_g < searchFor.length) {
			var search = searchFor[_g];
			++_g;
			if(Type.enumEq(this.tok,search)) {
				return true;
			}
		}
		return false;
	}
}
$hxClasses["tokentree.TokenTree"] = tokentree_TokenTree;
tokentree_TokenTree.__name__ = "tokentree.TokenTree";
tokentree_TokenTree.__super__ = haxeparser_Token;
Object.assign(tokentree_TokenTree.prototype, {
	__class__: tokentree_TokenTree
	,parent: null
	,previousSibling: null
	,nextSibling: null
	,children: null
	,index: null
	,inserted: null
	,space: null
	,tokenTypeCache: null
});
var tokentree_TokenFilterMode = $hxEnums["tokentree.TokenFilterMode"] = { __ename__ : true, __constructs__ : ["ALL","FIRST"]
	,ALL: {_hx_index:0,__enum__:"tokentree.TokenFilterMode",toString:$estr}
	,FIRST: {_hx_index:1,__enum__:"tokentree.TokenFilterMode",toString:$estr}
};
var tokentree_FilterResult = $hxEnums["tokentree.FilterResult"] = { __ename__ : true, __constructs__ : ["FOUND_SKIP_SUBTREE","FOUND_GO_DEEPER","SKIP_SUBTREE","GO_DEEPER"]
	,FOUND_SKIP_SUBTREE: {_hx_index:0,__enum__:"tokentree.FilterResult",toString:$estr}
	,FOUND_GO_DEEPER: {_hx_index:1,__enum__:"tokentree.FilterResult",toString:$estr}
	,SKIP_SUBTREE: {_hx_index:2,__enum__:"tokentree.FilterResult",toString:$estr}
	,GO_DEEPER: {_hx_index:3,__enum__:"tokentree.FilterResult",toString:$estr}
};
class tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$ {
	static parent(this1) {
		if(this1 != null) {
			return this1.parent;
		} else {
			return null;
		}
	}
	static previousSibling(this1) {
		if(this1 != null) {
			return this1.previousSibling;
		} else {
			return null;
		}
	}
	static firstChild(this1) {
		if(this1 != null) {
			return this1.getFirstChild();
		} else {
			return null;
		}
	}
	static lastChild(this1) {
		if(this1 != null) {
			return this1.getLastChild();
		} else {
			return null;
		}
	}
	static firstOf(this1,tokenDef) {
		if(this1 == null || this1.children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this1.children;
		while(_g < _g1.length) {
			var tok = _g1[_g];
			++_g;
			if(tok.is(tokenDef)) {
				return tok;
			}
		}
		return null;
	}
	static lastOf(this1,tokenDef) {
		if(this1 == null || this1.children == null) {
			return null;
		}
		var found = null;
		var _g = 0;
		var _g1 = this1.children;
		while(_g < _g1.length) {
			var tok = _g1[_g];
			++_g;
			if(tok.is(tokenDef)) {
				found = tok;
			}
		}
		return found;
	}
	static child(this1,index) {
		if(this1 != null && this1.children != null) {
			return this1.children[index];
		} else {
			return null;
		}
	}
	static is(this1,tokenDef) {
		if(this1 != null && this1.is(tokenDef)) {
			return this1;
		} else {
			return null;
		}
	}
	static isCIdent(this1) {
		if(this1 != null && this1.isCIdent()) {
			return this1;
		} else {
			return null;
		}
	}
}
$hxClasses["tokentree._TokenTreeAccessHelper.TokenTreeAccessHelper_Impl_"] = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$;
tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.__name__ = "tokentree._TokenTreeAccessHelper.TokenTreeAccessHelper_Impl_";
class tokentree_TokenTreeBuilder {
	static buildTokenTree(tokens,bytes,entryPoint) {
		if(entryPoint == null) {
			entryPoint = tokentree_TokenTreeEntryPoint.TYPE_LEVEL;
		}
		return tokentree_TokenTreeBuilder.buildTokenTreeFromStream(new tokentree_TokenStream(tokens,bytes),entryPoint);
	}
	static buildTokenTreeFromStream(stream,entryPoint) {
		var root = new tokentree_TokenTree(null,"",null,-1);
		switch(entryPoint._hx_index) {
		case 0:
			tokentree_walk_WalkFile.walkFile(stream,root);
			break;
		case 1:
			tokentree_walk_WalkClass.walkClassBody(stream,root);
			break;
		case 2:
			tokentree_walk_WalkStatement.walkStatement(stream,root);
			break;
		case 3:
			tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,root);
			break;
		}
		if(stream.hasMore()) {
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("invalid token tree structure - found:" + Std.string(stream.token()));
			case 1:
				var progress = new tokentree_TokenStreamProgress(stream);
				while(progress.streamHasChanged()) tokentree_walk_WalkStatement.walkStatement(stream,root);
				if(stream.hasMore()) {
					throw new js__$Boot_HaxeError("invalid token tree structure - found:" + Std.string(stream.token()));
				}
				break;
			}
		}
		var tempStore = stream.getTempStore();
		switch(tokentree_TokenStream.MODE._hx_index) {
		case 0:
			if(tempStore.length != 0) {
				throw new js__$Boot_HaxeError("invalid token tree structure - tokens in temp store:" + tempStore.join(", "));
			}
			break;
		case 1:
			var _g = 0;
			while(_g < tempStore.length) {
				var stored = tempStore[_g];
				++_g;
				root.addChild(stored);
			}
			break;
		}
		return root;
	}
}
$hxClasses["tokentree.TokenTreeBuilder"] = tokentree_TokenTreeBuilder;
tokentree_TokenTreeBuilder.__name__ = "tokentree.TokenTreeBuilder";
var tokentree_TokenTreeEntryPoint = $hxEnums["tokentree.TokenTreeEntryPoint"] = { __ename__ : true, __constructs__ : ["TYPE_LEVEL","FIELD_LEVEL","EXPRESSION_LEVEL","TYPE_HINT_LEVEL"]
	,TYPE_LEVEL: {_hx_index:0,__enum__:"tokentree.TokenTreeEntryPoint",toString:$estr}
	,FIELD_LEVEL: {_hx_index:1,__enum__:"tokentree.TokenTreeEntryPoint",toString:$estr}
	,EXPRESSION_LEVEL: {_hx_index:2,__enum__:"tokentree.TokenTreeEntryPoint",toString:$estr}
	,TYPE_HINT_LEVEL: {_hx_index:3,__enum__:"tokentree.TokenTreeEntryPoint",toString:$estr}
};
class tokentree_utils_FieldUtils {
	static getFieldType(field,defaultVisibility) {
		if(field == null) {
			return tokentree_utils_TokenFieldType.UNKNOWN;
		}
		var _g = field.tok;
		if(_g._hx_index == 0) {
			switch(_g.k._hx_index) {
			case 0:
				return tokentree_utils_FieldUtils.getFunctionFieldType(field,defaultVisibility);
			case 2:case 41:
				return tokentree_utils_FieldUtils.getVarFieldType(field,defaultVisibility);
			default:
			}
		}
		return tokentree_utils_TokenFieldType.UNKNOWN;
	}
	static getFunctionFieldType(field,defaultVisibility) {
		var access = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(field);
		if(access == null) {
			return tokentree_utils_TokenFieldType.UNKNOWN;
		}
		var name = tokentree_utils_TokenTreeCheckUtils.getName(tokentree_utils_TokenTreeCheckUtils.getNameToken(field));
		var visibility = defaultVisibility;
		var isStatic = false;
		var isInline = false;
		var isOverride = false;
		var isFinal = false;
		var isExtern = false;
		if(access.children != null) {
			var _g = 0;
			var _g1 = access.children;
			_hx_loop1: while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var _g2 = child.tok;
				switch(_g2._hx_index) {
				case 0:
					switch(_g2.k._hx_index) {
					case 17:
						isStatic = true;
						break;
					case 18:
						visibility = tokentree_utils_TokenFieldVisibility.PUBLIC;
						break;
					case 19:
						visibility = tokentree_utils_TokenFieldVisibility.PRIVATE;
						break;
					case 25:
						isExtern = true;
						break;
					case 30:
						isOverride = true;
						break;
					case 34:
						isInline = true;
						break;
					case 41:
						isFinal = true;
						break;
					default:
					}
					break;
				case 1:
					var _g21 = _g2.c;
					if(_g21._hx_index == 3) {
						if(_g21.s == "final") {
							isFinal = true;
						}
					}
					break;
				case 16:case 18:
					break _hx_loop1;
				default:
				}
			}
		}
		return tokentree_utils_TokenFieldType.FUNCTION(name,visibility,isStatic,isInline,isOverride,isFinal,isExtern);
	}
	static getVarFieldType(field,defaultVisibility) {
		var access = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(field);
		if(access == null) {
			return tokentree_utils_TokenFieldType.UNKNOWN;
		}
		var name = tokentree_utils_TokenTreeCheckUtils.getName(tokentree_utils_TokenTreeCheckUtils.getNameToken(field));
		var visibility = defaultVisibility;
		var isStatic = false;
		var isInline = false;
		var isFinal = field.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFinal));
		var isExtern = false;
		if(access.children != null) {
			var _g = 0;
			var _g1 = access.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var _g2 = child.tok;
				if(_g2._hx_index == 0) {
					switch(_g2.k._hx_index) {
					case 17:
						isStatic = true;
						break;
					case 18:
						visibility = tokentree_utils_TokenFieldVisibility.PUBLIC;
						break;
					case 19:
						visibility = tokentree_utils_TokenFieldVisibility.PRIVATE;
						break;
					case 25:
						isExtern = true;
						break;
					case 34:
						isInline = true;
						break;
					default:
					}
				}
			}
		}
		access = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(access,haxeparser_TokenDef.POpen);
		if(isFinal || access == null) {
			return tokentree_utils_TokenFieldType.VAR(name,visibility,isStatic,isInline,isFinal,isExtern);
		}
		var getterAccess = tokentree_utils_FieldUtils.makePropertyAccess(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(access));
		var setterAccess = tokentree_utils_FieldUtils.makePropertyAccess(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.child(access,1));
		return tokentree_utils_TokenFieldType.PROP(name,visibility,isStatic,getterAccess,setterAccess);
	}
	static makePropertyAccess(accessToken) {
		if(accessToken == null) {
			return tokentree_utils_TokenPropertyAccess.DEFAULT;
		}
		var _g = accessToken.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 16:
				return tokentree_utils_TokenPropertyAccess.DEFAULT;
			case 32:
				return tokentree_utils_TokenPropertyAccess.DYNAMIC;
			case 36:
				return tokentree_utils_TokenPropertyAccess.NULL;
			default:
				return tokentree_utils_TokenPropertyAccess.DEFAULT;
			}
			break;
		case 1:
			var _g2 = _g.c;
			if(_g2._hx_index == 3) {
				switch(_g2.s) {
				case "get":
					return tokentree_utils_TokenPropertyAccess.GET;
				case "never":
					return tokentree_utils_TokenPropertyAccess.NEVER;
				case "set":
					return tokentree_utils_TokenPropertyAccess.SET;
				default:
					return tokentree_utils_TokenPropertyAccess.DEFAULT;
				}
			} else {
				return tokentree_utils_TokenPropertyAccess.DEFAULT;
			}
			break;
		default:
			return tokentree_utils_TokenPropertyAccess.DEFAULT;
		}
	}
}
$hxClasses["tokentree.utils.FieldUtils"] = tokentree_utils_FieldUtils;
tokentree_utils_FieldUtils.__name__ = "tokentree.utils.FieldUtils";
var tokentree_utils_TokenFieldType = $hxEnums["tokentree.utils.TokenFieldType"] = { __ename__ : true, __constructs__ : ["FUNCTION","VAR","PROP","UNKNOWN"]
	,FUNCTION: ($_=function(name,visibility,isStatic,isInline,isOverride,isFinal,isExtern) { return {_hx_index:0,name:name,visibility:visibility,isStatic:isStatic,isInline:isInline,isOverride:isOverride,isFinal:isFinal,isExtern:isExtern,__enum__:"tokentree.utils.TokenFieldType",toString:$estr}; },$_.__params__ = ["name","visibility","isStatic","isInline","isOverride","isFinal","isExtern"],$_)
	,VAR: ($_=function(name,visibility,isStatic,isInline,isFinal,isExtern) { return {_hx_index:1,name:name,visibility:visibility,isStatic:isStatic,isInline:isInline,isFinal:isFinal,isExtern:isExtern,__enum__:"tokentree.utils.TokenFieldType",toString:$estr}; },$_.__params__ = ["name","visibility","isStatic","isInline","isFinal","isExtern"],$_)
	,PROP: ($_=function(name,visibility,isStatic,getter,setter) { return {_hx_index:2,name:name,visibility:visibility,isStatic:isStatic,getter:getter,setter:setter,__enum__:"tokentree.utils.TokenFieldType",toString:$estr}; },$_.__params__ = ["name","visibility","isStatic","getter","setter"],$_)
	,UNKNOWN: {_hx_index:3,__enum__:"tokentree.utils.TokenFieldType",toString:$estr}
};
var tokentree_utils_TokenFieldVisibility = $hxEnums["tokentree.utils.TokenFieldVisibility"] = { __ename__ : true, __constructs__ : ["PUBLIC","PRIVATE"]
	,PUBLIC: {_hx_index:0,__enum__:"tokentree.utils.TokenFieldVisibility",toString:$estr}
	,PRIVATE: {_hx_index:1,__enum__:"tokentree.utils.TokenFieldVisibility",toString:$estr}
};
var tokentree_utils_TokenPropertyAccess = $hxEnums["tokentree.utils.TokenPropertyAccess"] = { __ename__ : true, __constructs__ : ["DEFAULT","NULL","GET","SET","DYNAMIC","NEVER"]
	,DEFAULT: {_hx_index:0,__enum__:"tokentree.utils.TokenPropertyAccess",toString:$estr}
	,NULL: {_hx_index:1,__enum__:"tokentree.utils.TokenPropertyAccess",toString:$estr}
	,GET: {_hx_index:2,__enum__:"tokentree.utils.TokenPropertyAccess",toString:$estr}
	,SET: {_hx_index:3,__enum__:"tokentree.utils.TokenPropertyAccess",toString:$estr}
	,DYNAMIC: {_hx_index:4,__enum__:"tokentree.utils.TokenPropertyAccess",toString:$estr}
	,NEVER: {_hx_index:5,__enum__:"tokentree.utils.TokenPropertyAccess",toString:$estr}
};
class tokentree_utils_TokenTreeCheckUtils {
	static isImport(token) {
		var parent = token;
		while(parent != null) {
			if(parent.tok == null) {
				return false;
			}
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 13:
					return true;
				case 25:
					break;
				case 35:
					return true;
				case 40:
					break;
				default:
					return false;
				}
				break;
			case 1:
				var _g3 = _g.c;
				if(_g3._hx_index == 3) {
					var _g4 = _g3.s;
				} else {
					return false;
				}
				break;
			case 5:
				if(_g.op._hx_index != 23) {
					return false;
				}
				break;
			case 10:
				break;
			default:
				return false;
			}
			parent = parent.parent;
		}
		return false;
	}
	static isTypeParameter(token) {
		var _g = token.tok;
		if(_g._hx_index == 5) {
			switch(_g.op._hx_index) {
			case 7:
				return tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(token),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt)) != null;
			case 9:
				return tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt)) != null;
			default:
				return false;
			}
		} else {
			return false;
		}
	}
	static isOpGtTypedefExtension(token) {
		var _g = token.tok;
		if(_g._hx_index == 5) {
			if(_g.op._hx_index == 7) {
				return tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.isCIdent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(token),haxeparser_TokenDef.BrOpen)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))))),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef)) != null;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	static filterOpSub(token) {
		if(token == null) {
			return false;
		}
		var _g = token.tok;
		if(!(_g._hx_index == 5 && _g.op._hx_index == 3)) {
			return false;
		}
		var prev = token.previousSibling;
		if(token.previousSibling == null) {
			prev = token.parent;
		} else {
			prev = tokentree_utils_TokenTreeCheckUtils.getLastToken(token.previousSibling);
			if(prev == null) {
				return false;
			}
		}
		var _g2 = prev.tok;
		switch(_g2._hx_index) {
		case 0:
			switch(_g2.k._hx_index) {
			case 4:
				return true;
			case 5:
				return true;
			case 6:
				return true;
			case 10:
				return true;
			default:
				return false;
			}
			break;
		case 5:
			if(_g2.op._hx_index == 23) {
				return true;
			} else {
				return true;
			}
			break;
		case 11:
			return true;
		case 12:
			return true;
		case 13:
			return true;
		case 14:
			return true;
		case 15:
			return false;
		case 16:
			return true;
		case 17:
			return true;
		case 18:
			return true;
		case 19:
			var pOpen = prev.parent;
			var type = tokentree_utils_TokenTreeCheckUtils.getPOpenType(pOpen);
			switch(type._hx_index) {
			case 0:
				return true;
			case 1:
				return true;
			case 2:
				return false;
			case 3:
				return true;
			case 4:
				return true;
			case 5:
				return true;
			case 6:
				return true;
			case 7:
				return false;
			case 8:
				return true;
			case 9:
				return false;
			}
			break;
		case 20:
			return true;
		default:
			return false;
		}
	}
	static isTernary(token) {
		if(token == null) {
			return false;
		}
		if(token.is(haxeparser_TokenDef.DblDot)) {
			return tokentree_utils_TokenTreeCheckUtils.isTernary(token.parent);
		}
		if(!token.is(haxeparser_TokenDef.Question)) {
			return false;
		}
		if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.DblDot) == null) {
			return false;
		}
		if(token.parent == null) {
			return false;
		}
		var _g = token.parent.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:case 2:
				return false;
			case 41:
				return false;
			default:
				return true;
			}
			break;
		case 1:
			var _g4 = _g.c;
			if(_g4._hx_index == 3) {
				if(_g4.s == "final") {
					return false;
				} else {
					return true;
				}
			} else {
				return true;
			}
			break;
		case 2:
			var _g2 = _g.s;
			return false;
		case 5:
			var _g1 = _g.op;
			return true;
		case 13:
			return false;
		case 18:
			var prev = token.previousSibling;
			if(prev == null) {
				return false;
			}
			var lastToken = tokentree_utils_TokenTreeCheckUtils.getLastToken(prev);
			if(lastToken == null) {
				return false;
			}
			switch(lastToken.tok._hx_index) {
			case 9:
				return false;
			case 13:
				return false;
			default:
				return true;
			}
			break;
		default:
			return true;
		}
	}
	static isTypeEnumAbstract(type) {
		var _g = type.tok;
		if(_g._hx_index == 0) {
			if(_g.k._hx_index == 39) {
				var name = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(type);
				if(name == null || name.children == null || name.children.length <= 0) {
					return false;
				}
				if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(name,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdEnum)) != null) {
					return true;
				}
				var _g1 = 0;
				var _g11 = name.children;
				while(_g1 < _g11.length) {
					var child = _g11[_g1];
					++_g1;
					if(!child.is(haxeparser_TokenDef.At)) {
						continue;
					}
					var enumTok = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(child),haxeparser_TokenDef.DblDot)),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdEnum));
					if(enumTok == null) {
						continue;
					}
					return true;
				}
			}
		}
		return false;
	}
	static getName(token) {
		if(token == null) {
			return null;
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			if(_g.k._hx_index == 22) {
				return "new";
			} else {
				return null;
			}
			break;
		case 1:
			var _g1 = _g.c;
			if(_g1._hx_index == 3) {
				var ident = _g1.s;
				return ident;
			} else {
				return null;
			}
			break;
		default:
			return null;
		}
	}
	static getNameToken(token) {
		if(tokentree_utils_TokenTreeCheckUtils.isNameToken(token)) {
			return token;
		}
		var nameToken = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(token);
		if(tokentree_utils_TokenTreeCheckUtils.isNameToken(nameToken)) {
			return nameToken;
		}
		nameToken = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(nameToken,haxeparser_TokenDef.Question));
		if(tokentree_utils_TokenTreeCheckUtils.isNameToken(nameToken)) {
			return nameToken;
		}
		return null;
	}
	static isNameToken(token) {
		if(token == null) {
			return false;
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			if(_g.k._hx_index == 22) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			var _g1 = _g.c;
			if(_g1._hx_index == 3) {
				var _g2 = _g1.s;
				return true;
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	static getBrOpenType(token) {
		if(token == null) {
			return tokentree_utils_BrOpenType.UNKNOWN;
		}
		if(token.tokenTypeCache.brOpenType != null) {
			return token.tokenTypeCache.brOpenType;
		}
		var type = tokentree_utils_TokenTreeCheckUtils.determineBrOpenType(token);
		token.tokenTypeCache.brOpenType = type;
		return type;
	}
	static determineBrOpenType(token) {
		if(token == null) {
			return tokentree_utils_BrOpenType.UNKNOWN;
		}
		if(token.parent == null || token.parent.tok == null) {
			return tokentree_utils_TokenTreeCheckUtils.determinBrChildren(token);
		}
		var _g = token.parent.tok;
		switch(_g._hx_index) {
		case 0:
			if(_g.k._hx_index == 10) {
				return tokentree_utils_TokenTreeCheckUtils.determinBrChildren(token);
			}
			break;
		case 1:
			var _g3 = _g.c;
			if(_g3._hx_index == 3) {
				switch(_g3.s) {
				case "from":case "to":
					return tokentree_utils_BrOpenType.ANONTYPE;
				default:
					return tokentree_utils_BrOpenType.BLOCK;
				}
			} else {
				return tokentree_utils_BrOpenType.BLOCK;
			}
			break;
		case 3:
			var _g5 = _g.s;
			return tokentree_utils_BrOpenType.BLOCK;
		case 5:
			switch(_g.op._hx_index) {
			case 4:
				if(tokentree_utils_TokenTreeCheckUtils.isInsideTypedef(token.parent)) {
					return tokentree_utils_BrOpenType.TYPEDEFDECL;
				}
				return tokentree_utils_TokenTreeCheckUtils.determinBrChildren(token);
			case 9:
				return tokentree_utils_BrOpenType.ANONTYPE;
			default:
				return tokentree_utils_BrOpenType.OBJECTDECL;
			}
			break;
		case 11:
			if(tokentree_utils_TokenTreeCheckUtils.isTernary(token.parent)) {
				return tokentree_utils_BrOpenType.OBJECTDECL;
			}
			var parent = token.parent.parent;
			var _g1 = parent.tok;
			switch(_g1._hx_index) {
			case 0:
				switch(_g1.k._hx_index) {
				case 15:
					return tokentree_utils_BrOpenType.OBJECTDECL;
				case 16:
					return tokentree_utils_BrOpenType.OBJECTDECL;
				default:
					return tokentree_utils_BrOpenType.ANONTYPE;
				}
				break;
			case 1:
				var _g11 = _g1.c;
				switch(_g11._hx_index) {
				case 2:
					var _g4 = _g11.kind;
					var _g31 = _g11.s;
					break;
				case 3:
					var _g2 = _g11.s;
					break;
				default:
					return tokentree_utils_BrOpenType.ANONTYPE;
				}
				break;
			default:
				return tokentree_utils_BrOpenType.ANONTYPE;
			}
			parent = parent.parent;
			var _g6 = parent.tok;
			switch(_g6._hx_index) {
			case 0:
				switch(_g6.k._hx_index) {
				case 0:
					return tokentree_utils_BrOpenType.ANONTYPE;
				case 2:
					return tokentree_utils_BrOpenType.ANONTYPE;
				default:
					return tokentree_utils_BrOpenType.OBJECTDECL;
				}
				break;
			case 5:
				if(_g6.op._hx_index == 9) {
					return tokentree_utils_BrOpenType.ANONTYPE;
				} else {
					return tokentree_utils_BrOpenType.OBJECTDECL;
				}
				break;
			case 16:
				return tokentree_utils_TokenTreeCheckUtils.getBrOpenType(parent);
			case 18:
				return tokentree_utils_BrOpenType.ANONTYPE;
			case 20:
				return tokentree_utils_BrOpenType.ANONTYPE;
			default:
				return tokentree_utils_BrOpenType.OBJECTDECL;
			}
			break;
		case 14:
			return tokentree_utils_BrOpenType.OBJECTDECL;
		case 18:
			var pOpenType = tokentree_utils_TokenTreeCheckUtils.getPOpenType(token.parent);
			switch(pOpenType._hx_index) {
			case 0:
				return tokentree_utils_BrOpenType.OBJECTDECL;
			case 1:
				return tokentree_utils_BrOpenType.ANONTYPE;
			case 2:
				return tokentree_utils_BrOpenType.OBJECTDECL;
			case 3:
				return tokentree_utils_BrOpenType.UNKNOWN;
			case 4:
				return tokentree_utils_BrOpenType.UNKNOWN;
			case 5:
				return tokentree_utils_BrOpenType.UNKNOWN;
			case 6:
				return tokentree_utils_BrOpenType.UNKNOWN;
			case 7:
				return tokentree_utils_BrOpenType.UNKNOWN;
			case 8:
				return tokentree_utils_BrOpenType.UNKNOWN;
			case 9:
				return tokentree_utils_BrOpenType.OBJECTDECL;
			}
			break;
		case 20:
			if(tokentree_utils_TokenTreeCheckUtils.isTernary(token.parent)) {
				return tokentree_utils_BrOpenType.OBJECTDECL;
			}
			break;
		default:
		}
		return tokentree_utils_TokenTreeCheckUtils.determinBrChildren(token);
	}
	static determinBrChildren(token) {
		if(token.children == null || token.children.length <= 0) {
			var _g = token.parent.tok;
			if(_g._hx_index == 0) {
				var _g1 = _g.k;
				return tokentree_utils_BrOpenType.BLOCK;
			} else {
				return tokentree_utils_BrOpenType.OBJECTDECL;
			}
		}
		if(token.parent != null && token.parent.tok != null) {
			if(token.children.length == 1) {
				var _g2 = token.parent.tok;
				if(_g2._hx_index == 0) {
					var _g11 = _g2.k;
					return tokentree_utils_BrOpenType.BLOCK;
				} else {
					return tokentree_utils_BrOpenType.OBJECTDECL;
				}
			}
			if(token.children.length == 2 && token.getLastChild().is(haxeparser_TokenDef.Semicolon)) {
				var _g3 = token.parent.tok;
				if(_g3._hx_index == 0) {
					var _g12 = _g3.k;
					return tokentree_utils_BrOpenType.BLOCK;
				} else {
					return tokentree_utils_BrOpenType.OBJECTDECL;
				}
			}
		}
		if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.Arrow) != null) {
			return tokentree_utils_BrOpenType.ANONTYPE;
		}
		if(token.nextSibling != null && token.nextSibling.is(haxeparser_TokenDef.Arrow)) {
			return tokentree_utils_BrOpenType.ANONTYPE;
		}
		var onlyComment = true;
		var _g4 = 0;
		var _g13 = token.children;
		while(_g4 < _g13.length) {
			var child = _g13[_g4];
			++_g4;
			var _g5 = child.tok;
			switch(_g5._hx_index) {
			case 1:
				var _g21 = _g5.c;
				switch(_g21._hx_index) {
				case 2:
					var _g51 = _g21.kind;
					var _g41 = _g21.s;
					if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(child),haxeparser_TokenDef.DblDot) == null) {
						return tokentree_utils_BrOpenType.BLOCK;
					}
					onlyComment = false;
					break;
				case 3:
					var _g31 = _g21.s;
					if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(child),haxeparser_TokenDef.DblDot) == null) {
						return tokentree_utils_BrOpenType.BLOCK;
					}
					onlyComment = false;
					break;
				default:
					return tokentree_utils_BrOpenType.BLOCK;
				}
				break;
			case 2:
				var _g14 = _g5.s;
				break;
			case 6:
				var _g7 = _g5.s;
				break;
			case 7:
				var _g6 = _g5.s;
				break;
			case 17:
				if(onlyComment) {
					if(token.parent != null && token.parent.tok != null) {
						var _g8 = token.parent.tok;
						if(_g8._hx_index == 0) {
							var _g15 = _g8.k;
							return tokentree_utils_BrOpenType.BLOCK;
						} else {
							return tokentree_utils_BrOpenType.OBJECTDECL;
						}
					} else {
						return tokentree_utils_BrOpenType.OBJECTDECL;
					}
				}
				return tokentree_utils_BrOpenType.OBJECTDECL;
			default:
				return tokentree_utils_BrOpenType.BLOCK;
			}
		}
		return tokentree_utils_BrOpenType.OBJECTDECL;
	}
	static getPOpenType(token) {
		if(token == null) {
			return tokentree_utils_POpenType.EXPRESSION;
		}
		switch(token.tok._hx_index) {
		case 18:
			break;
		case 19:
			return tokentree_utils_TokenTreeCheckUtils.getPOpenType(token.parent);
		default:
			return tokentree_utils_POpenType.EXPRESSION;
		}
		if(token.tokenTypeCache.pOpenType != null) {
			return token.tokenTypeCache.pOpenType;
		}
		var type = tokentree_utils_TokenTreeCheckUtils.determinePOpenType(token);
		token.tokenTypeCache.pOpenType = type;
		return type;
	}
	static determinePOpenType(token) {
		var parent = token.parent;
		if(parent == null || parent.tok == null) {
			return tokentree_utils_POpenType.EXPRESSION;
		}
		if(tokentree_utils_TokenTreeCheckUtils.hasAtParent(token)) {
			return tokentree_utils_POpenType.AT;
		}
		var lastChild = token.getLastChild();
		if(lastChild != null) {
			if(lastChild.tok._hx_index == 12) {
				return tokentree_utils_POpenType.PARAMETER;
			}
		}
		_hx_loop1: while(parent != null && parent.tok != null) {
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 2:
				switch(_g.s) {
				case "elseif":case "if":
					if(parent.getFirstChild() == token) {
						return tokentree_utils_POpenType.SHARP_CONDITION;
					}
					parent = parent.parent;
					break;
				default:
					break _hx_loop1;
				}
				break;
			case 5:
				if(_g.op._hx_index == 9) {
					parent = parent.parent;
				} else {
					break _hx_loop1;
				}
				break;
			default:
				break _hx_loop1;
			}
		}
		if(parent == null || parent.tok == null) {
			return tokentree_utils_POpenType.EXPRESSION;
		}
		var _g1 = parent.tok;
		switch(_g1._hx_index) {
		case 0:
			switch(_g1.k._hx_index) {
			case 0:
				return tokentree_utils_POpenType.PARAMETER;
			case 3:
				var firstChild = parent.getFirstChild();
				if(firstChild == null) {
					return tokentree_utils_POpenType.IF_CONDITION;
				}
				if(firstChild.index == token.index) {
					return tokentree_utils_POpenType.IF_CONDITION;
				}
				return tokentree_utils_POpenType.EXPRESSION;
			case 5:
				return tokentree_utils_POpenType.WHILE_CONDITION;
			case 7:
				return tokentree_utils_POpenType.FORLOOP;
			case 14:
				return tokentree_utils_POpenType.SWITCH_CONDITION;
			case 21:
				return tokentree_utils_POpenType.CATCH;
			case 22:
				return tokentree_utils_POpenType.PARAMETER;
			default:
			}
			break;
		case 1:
			var _g2 = _g1.c;
			if(_g2._hx_index == 3) {
				var _g3 = _g2.s;
				if(parent.parent == null || parent.parent.tok == null) {
					return tokentree_utils_POpenType.CALL;
				}
				var _g4 = parent.parent.tok;
				switch(_g4._hx_index) {
				case 0:
					switch(_g4.k._hx_index) {
					case 0:
						if(parent.previousSibling == null) {
							return tokentree_utils_POpenType.PARAMETER;
						}
						return tokentree_utils_POpenType.CALL;
					case 39:
						return tokentree_utils_POpenType.PARAMETER;
					default:
						return tokentree_utils_POpenType.CALL;
					}
					break;
				case 16:
					if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.parent(parent.parent)),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdEnum)) != null) {
						return tokentree_utils_POpenType.PARAMETER;
					}
					return tokentree_utils_POpenType.CALL;
				default:
					return tokentree_utils_POpenType.CALL;
				}
			}
			break;
		case 18:
			return tokentree_utils_POpenType.EXPRESSION;
		default:
		}
		if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(token,haxeparser_TokenDef.Arrow) != null) {
			return tokentree_utils_POpenType.PARAMETER;
		}
		return tokentree_utils_POpenType.EXPRESSION;
	}
	static hasAtParent(token) {
		var parent = token.parent;
		while(parent.tok != null) {
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				if(_g.k._hx_index != 16) {
					return false;
				}
				break;
			case 1:
				var _g1 = _g.c;
				break;
			case 10:
				break;
			case 11:
				break;
			case 21:
				return true;
			default:
				return false;
			}
			parent = parent.parent;
		}
		return false;
	}
	static isInsideTypedef(token) {
		if(token == null) {
			return false;
		}
		var parent = token;
		while(parent.parent != null) {
			if(parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef))) {
				return true;
			}
			parent = parent.parent;
		}
		return false;
	}
	static getArrowType(token) {
		if(token == null) {
			return tokentree_utils_ArrowType.ARROW_FUNCTION;
		}
		if(token.tokenTypeCache.arrowType != null) {
			return token.tokenTypeCache.arrowType;
		}
		var type = tokentree_utils_TokenTreeCheckUtils.determineArrowType(token);
		if(type == null) {
			type = tokentree_utils_ArrowType.ARROW_FUNCTION;
		}
		token.tokenTypeCache.arrowType = type;
		return type;
	}
	static determineArrowType(token) {
		if(token == null) {
			return tokentree_utils_ArrowType.ARROW_FUNCTION;
		}
		var child = token.getFirstChild();
		while(child != null) {
			var _g = child.tok;
			switch(_g._hx_index) {
			case 0:
				if(_g.k._hx_index != 40) {
					return tokentree_utils_ArrowType.ARROW_FUNCTION;
				}
				break;
			case 1:
				var _g2 = _g.c;
				if(_g2._hx_index == 3) {
					var _g3 = _g2.s;
				} else {
					return tokentree_utils_ArrowType.ARROW_FUNCTION;
				}
				break;
			case 5:
				if(_g.op._hx_index == 9) {
					child = child.nextSibling;
					continue;
				} else {
					return tokentree_utils_ArrowType.ARROW_FUNCTION;
				}
				break;
			case 6:
				var _g6 = _g.s;
				break;
			case 7:
				var _g5 = _g.s;
				break;
			case 9:case 10:case 12:case 20:
				break;
			case 16:
				var brClose = child.getFirstChild();
				if(brClose.is(haxeparser_TokenDef.BrClose)) {
					return tokentree_utils_ArrowType.ARROW_FUNCTION;
				}
				var brType = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(child);
				if(brType == null) {
					brType = tokentree_utils_BrOpenType.UNKNOWN;
				}
				if(brType != null) {
					switch(brType._hx_index) {
					case 0:
						return tokentree_utils_ArrowType.ARROW_FUNCTION;
					case 3:
						break;
					default:
					}
				}
				child = child.nextSibling;
				continue;
			case 18:
				break;
			default:
				return tokentree_utils_ArrowType.ARROW_FUNCTION;
			}
			child = child.getFirstChild();
		}
		var parent = token.parent;
		if(parent == null) {
			return tokentree_utils_ArrowType.ARROW_FUNCTION;
		}
		var resultType = tokentree_utils_TokenTreeCheckUtils.checkArrowParent(parent);
		if(resultType != null) {
			return resultType;
		}
		return tokentree_utils_TokenTreeCheckUtils.checkArrowChildren(parent);
	}
	static checkArrowChildren(parent) {
		var child = parent.getFirstChild();
		if(child == null) {
			return tokentree_utils_ArrowType.ARROW_FUNCTION;
		}
		var seenArrow = false;
		while(child != null) {
			var _g = child.tok;
			switch(_g._hx_index) {
			case 0:
				var _g4 = _g.k;
				return tokentree_utils_ArrowType.ARROW_FUNCTION;
			case 1:
				var _g2 = _g.c;
				if(_g2._hx_index == 3) {
					var _g3 = _g2.s;
				} else {
					return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE4;
				}
				break;
			case 5:
				if(_g.op._hx_index == 9) {
					child = child.nextSibling;
					continue;
				} else {
					return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE4;
				}
				break;
			case 6:
				var _g6 = _g.s;
				break;
			case 7:
				var _g5 = _g.s;
				break;
			case 9:case 10:
				break;
			case 11:case 16:
				break;
			case 12:
				seenArrow = true;
				break;
			case 18:
				var result = tokentree_utils_TokenTreeCheckUtils.checkArrowPOpen(child);
				if(result != null) {
					return result;
				}
				child = child.nextSibling;
				continue;
			case 19:
				break;
			case 20:
				break;
			default:
				return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE4;
			}
			child = child.getFirstChild();
		}
		if(seenArrow) {
			return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
		}
		return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE4;
	}
	static checkArrowPOpen(token) {
		if(token.children == null || token.children.length <= 1) {
			return null;
		}
		if(token.parent.isCIdent()) {
			return tokentree_utils_ArrowType.ARROW_FUNCTION;
		}
		var childArrows = token.filter([haxeparser_TokenDef.Arrow],tokentree_TokenFilterMode.ALL);
		if(childArrows.length <= 0) {
			return tokentree_utils_ArrowType.ARROW_FUNCTION;
		}
		var childArrows1 = token.filter([haxeparser_TokenDef.DblDot],tokentree_TokenFilterMode.ALL);
		if(childArrows1.length > 0) {
			return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE4;
		}
		return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
	}
	static checkArrowParent(parent) {
		if(parent == null) {
			return tokentree_utils_ArrowType.ARROW_FUNCTION;
		}
		var _g = parent.tok;
		switch(_g._hx_index) {
		case 1:
			var _g1 = _g.c;
			if(_g1._hx_index == 3) {
				var _g2 = _g1.s;
				if(parent.parent == null || parent.parent.tok == null) {
					return tokentree_utils_ArrowType.ARROW_FUNCTION;
				}
				var _g3 = parent.parent.tok;
				switch(_g3._hx_index) {
				case 5:
					switch(_g3.op._hx_index) {
					case 4:
						if(tokentree_utils_TokenTreeCheckUtils.isInsideTypedef(parent.parent)) {
							return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
						}
						return tokentree_utils_ArrowType.ARROW_FUNCTION;
					case 22:
						return tokentree_utils_ArrowType.ARROW_FUNCTION;
					default:
					}
					break;
				case 11:
					var type = tokentree_utils_TokenTreeCheckUtils.getColonType(parent.parent);
					switch(type._hx_index) {
					case 1:
						return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
					case 2:
						return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
					case 0:case 3:case 4:case 5:case 6:
						return tokentree_utils_ArrowType.ARROW_FUNCTION;
					}
					break;
				case 12:
					return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
				case 18:
					var type1 = tokentree_utils_TokenTreeCheckUtils.getPOpenType(parent.parent);
					if(type1 == null) {
						type1 = tokentree_utils_POpenType.EXPRESSION;
					}
					switch(type1._hx_index) {
					case 1:
						return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
					case 9:
						return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
					default:
						return tokentree_utils_ArrowType.ARROW_FUNCTION;
					}
					break;
				default:
				}
			} else {
				return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
			}
			break;
		case 18:
			break;
		default:
			return tokentree_utils_ArrowType.FUNCTION_TYPE_HAXE3;
		}
		return null;
	}
	static getColonType(token) {
		if(token == null) {
			return tokentree_utils_ColonType.UNKNOWN;
		}
		if(token.tokenTypeCache.colonType != null) {
			return token.tokenTypeCache.colonType;
		}
		var type = tokentree_utils_TokenTreeCheckUtils.determineColonType(token);
		token.tokenTypeCache.colonType = type;
		return type;
	}
	static determineColonType(token) {
		if(token == null) {
			return tokentree_utils_ColonType.UNKNOWN;
		}
		if(tokentree_utils_TokenTreeCheckUtils.isTernary(token)) {
			return tokentree_utils_ColonType.TERNARY;
		}
		var parent = token.parent;
		if(parent == null) {
			return tokentree_utils_ColonType.UNKNOWN;
		}
		var _g = parent.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return tokentree_utils_ColonType.TYPE_HINT;
			case 15:case 16:
				return tokentree_utils_ColonType.SWITCH_CASE;
			case 22:
				return tokentree_utils_TokenTreeCheckUtils.findColonParent(parent);
			case 23:
				return tokentree_utils_TokenTreeCheckUtils.findColonParent(parent);
			default:
			}
			break;
		case 1:
			var _g3 = _g.c;
			return tokentree_utils_TokenTreeCheckUtils.findColonParent(parent);
		case 5:
			if(_g.op._hx_index == 9) {
				return tokentree_utils_TokenTreeCheckUtils.findColonParent(parent);
			}
			break;
		case 16:
			var brClose = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(parent,haxeparser_TokenDef.BrClose);
			if(brClose == null) {
				return tokentree_utils_ColonType.UNKNOWN;
			}
			if(brClose.pos.max <= token.pos.min) {
				return tokentree_utils_ColonType.TYPE_CHECK;
			}
			break;
		case 18:
			return tokentree_utils_TokenTreeCheckUtils.findColonParent(token);
		case 20:
			return tokentree_utils_TokenTreeCheckUtils.findColonParent(parent);
		case 21:
			return tokentree_utils_ColonType.AT;
		default:
		}
		return tokentree_utils_ColonType.UNKNOWN;
	}
	static findColonParent(token) {
		var parent = token;
		while(parent.tok != null) {
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:case 2:
					return tokentree_utils_ColonType.TYPE_HINT;
				case 41:
					return tokentree_utils_ColonType.TYPE_HINT;
				default:
				}
				break;
			case 1:
				var _g2 = _g.c;
				if(_g2._hx_index == 3) {
					if(_g2.s == "final") {
						return tokentree_utils_ColonType.TYPE_HINT;
					}
				}
				break;
			case 16:
				var brType = tokentree_utils_TokenTreeCheckUtils.getBrOpenType(parent);
				switch(brType._hx_index) {
				case 0:
					return tokentree_utils_ColonType.UNKNOWN;
				case 1:
					return tokentree_utils_ColonType.TYPE_HINT;
				case 2:
					return tokentree_utils_ColonType.OBJECT_LITERAL;
				case 3:
					return tokentree_utils_ColonType.TYPE_HINT;
				case 4:
					return tokentree_utils_ColonType.UNKNOWN;
				}
				break;
			case 18:
				var pClose = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(parent,haxeparser_TokenDef.PClose);
				if(pClose != null && pClose.pos.max <= token.pos.min) {
					return tokentree_utils_ColonType.TYPE_CHECK;
				}
				var pType = tokentree_utils_TokenTreeCheckUtils.getPOpenType(parent);
				switch(pType._hx_index) {
				case 0:
					return tokentree_utils_ColonType.OBJECT_LITERAL;
				case 1:
					return tokentree_utils_ColonType.TYPE_HINT;
				case 2:
					return tokentree_utils_ColonType.UNKNOWN;
				case 3:
					return tokentree_utils_ColonType.TYPE_CHECK;
				case 4:
					return tokentree_utils_ColonType.UNKNOWN;
				case 5:
					return tokentree_utils_ColonType.UNKNOWN;
				case 6:
					return tokentree_utils_ColonType.UNKNOWN;
				case 7:
					return tokentree_utils_ColonType.UNKNOWN;
				case 8:
					return tokentree_utils_ColonType.TYPE_CHECK;
				case 9:
					return tokentree_utils_ColonType.TYPE_CHECK;
				}
				break;
			default:
			}
			parent = parent.parent;
		}
		return tokentree_utils_ColonType.UNKNOWN;
	}
	static getLastToken(token) {
		if(token == null) {
			return null;
		}
		if(token.children == null) {
			return token;
		}
		if(token.children.length <= 0) {
			return token;
		}
		var lastChild = token.getLastChild();
		while(lastChild != null) {
			var newLast = lastChild.getLastChild();
			if(newLast == null) {
				return lastChild;
			}
			lastChild = newLast;
		}
		return null;
	}
	static isMetadata(token) {
		if(token == null || token.tok == null) {
			return false;
		}
		var parent = token.parent;
		while(parent != null && parent.tok != null) switch(parent.tok._hx_index) {
		case 11:
			parent = parent.parent;
			if(parent == null || parent.tok == null) {
				return false;
			}
			if(parent.tok._hx_index == 21) {
				return true;
			} else {
				return false;
			}
			break;
		case 21:
			return true;
		default:
			parent = parent.parent;
		}
		return false;
	}
}
$hxClasses["tokentree.utils.TokenTreeCheckUtils"] = tokentree_utils_TokenTreeCheckUtils;
tokentree_utils_TokenTreeCheckUtils.__name__ = "tokentree.utils.TokenTreeCheckUtils";
var tokentree_utils_BrOpenType = $hxEnums["tokentree.utils.BrOpenType"] = { __ename__ : true, __constructs__ : ["BLOCK","TYPEDEFDECL","OBJECTDECL","ANONTYPE","UNKNOWN"]
	,BLOCK: {_hx_index:0,__enum__:"tokentree.utils.BrOpenType",toString:$estr}
	,TYPEDEFDECL: {_hx_index:1,__enum__:"tokentree.utils.BrOpenType",toString:$estr}
	,OBJECTDECL: {_hx_index:2,__enum__:"tokentree.utils.BrOpenType",toString:$estr}
	,ANONTYPE: {_hx_index:3,__enum__:"tokentree.utils.BrOpenType",toString:$estr}
	,UNKNOWN: {_hx_index:4,__enum__:"tokentree.utils.BrOpenType",toString:$estr}
};
var tokentree_utils_POpenType = $hxEnums["tokentree.utils.POpenType"] = { __ename__ : true, __constructs__ : ["AT","PARAMETER","CALL","SWITCH_CONDITION","WHILE_CONDITION","IF_CONDITION","SHARP_CONDITION","CATCH","FORLOOP","EXPRESSION"]
	,AT: {_hx_index:0,__enum__:"tokentree.utils.POpenType",toString:$estr}
	,PARAMETER: {_hx_index:1,__enum__:"tokentree.utils.POpenType",toString:$estr}
	,CALL: {_hx_index:2,__enum__:"tokentree.utils.POpenType",toString:$estr}
	,SWITCH_CONDITION: {_hx_index:3,__enum__:"tokentree.utils.POpenType",toString:$estr}
	,WHILE_CONDITION: {_hx_index:4,__enum__:"tokentree.utils.POpenType",toString:$estr}
	,IF_CONDITION: {_hx_index:5,__enum__:"tokentree.utils.POpenType",toString:$estr}
	,SHARP_CONDITION: {_hx_index:6,__enum__:"tokentree.utils.POpenType",toString:$estr}
	,CATCH: {_hx_index:7,__enum__:"tokentree.utils.POpenType",toString:$estr}
	,FORLOOP: {_hx_index:8,__enum__:"tokentree.utils.POpenType",toString:$estr}
	,EXPRESSION: {_hx_index:9,__enum__:"tokentree.utils.POpenType",toString:$estr}
};
var tokentree_utils_ArrowType = $hxEnums["tokentree.utils.ArrowType"] = { __ename__ : true, __constructs__ : ["ARROW_FUNCTION","FUNCTION_TYPE_HAXE3","FUNCTION_TYPE_HAXE4"]
	,ARROW_FUNCTION: {_hx_index:0,__enum__:"tokentree.utils.ArrowType",toString:$estr}
	,FUNCTION_TYPE_HAXE3: {_hx_index:1,__enum__:"tokentree.utils.ArrowType",toString:$estr}
	,FUNCTION_TYPE_HAXE4: {_hx_index:2,__enum__:"tokentree.utils.ArrowType",toString:$estr}
};
var tokentree_utils_ColonType = $hxEnums["tokentree.utils.ColonType"] = { __ename__ : true, __constructs__ : ["SWITCH_CASE","TYPE_HINT","TYPE_CHECK","TERNARY","OBJECT_LITERAL","AT","UNKNOWN"]
	,SWITCH_CASE: {_hx_index:0,__enum__:"tokentree.utils.ColonType",toString:$estr}
	,TYPE_HINT: {_hx_index:1,__enum__:"tokentree.utils.ColonType",toString:$estr}
	,TYPE_CHECK: {_hx_index:2,__enum__:"tokentree.utils.ColonType",toString:$estr}
	,TERNARY: {_hx_index:3,__enum__:"tokentree.utils.ColonType",toString:$estr}
	,OBJECT_LITERAL: {_hx_index:4,__enum__:"tokentree.utils.ColonType",toString:$estr}
	,AT: {_hx_index:5,__enum__:"tokentree.utils.ColonType",toString:$estr}
	,UNKNOWN: {_hx_index:6,__enum__:"tokentree.utils.ColonType",toString:$estr}
};
class tokentree_walk_WalkAbstract {
	static walkAbstract(stream,parent) {
		var typeTok = stream.consumeToken();
		parent.addChild(typeTok);
		var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
		stream.applyTempStore(name);
		if(stream.is(haxeparser_TokenDef.POpen)) {
			tokentree_walk_WalkPOpen.walkPOpen(stream,name);
		}
		var typeParent = name;
		var typeChild;
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 1:
				var _g1 = _g.c;
				if(_g1._hx_index == 3) {
					switch(_g1.s) {
					case "from":case "to":
						var fromToken = stream.consumeToken();
						name.addChild(fromToken);
						tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,fromToken);
						break;
					default:
						typeChild = stream.consumeToken();
						typeParent.addChild(typeChild);
						typeParent = typeChild;
					}
				} else {
					typeChild = stream.consumeToken();
					typeParent.addChild(typeChild);
					typeParent = typeChild;
				}
				break;
			case 6:
				var _g4 = _g.s;
				name.addChild(stream.consumeToken());
				break;
			case 7:
				var _g3 = _g.s;
				name.addChild(stream.consumeToken());
				break;
			case 16:
				break _hx_loop1;
			default:
				typeChild = stream.consumeToken();
				typeParent.addChild(typeChild);
				typeParent = typeChild;
			}
		}
		var block = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
		name.addChild(block);
		tokentree_walk_WalkAbstract.walkAbstractBody(stream,block);
		block.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
	}
	static walkAbstractBody(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					tokentree_walk_WalkFunction.walkFunction(stream,parent);
					break;
				case 2:
					tokentree_walk_WalkVar.walkVar(stream,parent);
					break;
				case 41:
					tokentree_walk_WalkFinal.walkFinal(stream,parent);
					break;
				default:
					stream.consumeToTempStore();
				}
				break;
			case 1:
				var _g3 = _g.c;
				if(_g3._hx_index == 3) {
					if(_g3.s == "final") {
						tokentree_walk_WalkFinal.walkFinal(stream,parent);
					} else {
						stream.consumeToTempStore();
					}
				} else {
					stream.consumeToTempStore();
				}
				break;
			case 2:
				var _g1 = _g.s;
				tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkAbstract.walkAbstractBody);
				break;
			case 6:
				var _g6 = _g.s;
				parent.addChild(stream.consumeToken());
				break;
			case 7:
				var _g5 = _g.s;
				parent.addChild(stream.consumeToken());
				break;
			case 9:
				parent.addChild(stream.consumeToken());
				break;
			case 17:
				break _hx_loop1;
			case 21:
				stream.addToTempStore(tokentree_walk_WalkAt.walkAt(stream));
				break;
			default:
				stream.consumeToTempStore();
			}
		}
		stream.applyTempStore(parent);
	}
}
$hxClasses["tokentree.walk.WalkAbstract"] = tokentree_walk_WalkAbstract;
tokentree_walk_WalkAbstract.__name__ = "tokentree.walk.WalkAbstract";
class tokentree_walk_WalkArrayAccess {
	static walkArrayAccess(stream,parent) {
		var bkOpen = stream.consumeTokenDef(haxeparser_TokenDef.BkOpen);
		parent.addChild(bkOpen);
		stream.applyTempStore(bkOpen);
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					tokentree_walk_WalkFunction.walkFunction(stream,bkOpen);
					break;
				case 5:
					stream.applyTempStore(bkOpen);
					tokentree_walk_WalkWhile.walkWhile(stream,bkOpen);
					break;
				case 7:
					stream.applyTempStore(bkOpen);
					tokentree_walk_WalkFor.walkFor(stream,bkOpen);
					break;
				default:
					stream.applyTempStore(bkOpen);
					tokentree_walk_WalkStatement.walkStatement(stream,bkOpen);
				}
				break;
			case 5:
				if(_g.op._hx_index == 22) {
					var child = bkOpen.getLastChild();
					if(child == null) {
						child = bkOpen;
					}
					tokentree_walk_WalkStatement.walkStatement(stream,child);
				} else {
					stream.applyTempStore(bkOpen);
					tokentree_walk_WalkStatement.walkStatement(stream,bkOpen);
				}
				break;
			case 13:
				var comma = stream.consumeToken();
				var child1 = bkOpen.getLastChild();
				if(child1 == null) {
					child1 = bkOpen;
				}
				child1.addChild(comma);
				break;
			case 14:
				tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,bkOpen);
				break;
			case 15:
				break _hx_loop1;
			case 16:
				stream.applyTempStore(bkOpen);
				tokentree_walk_WalkBlock.walkBlock(stream,bkOpen);
				break;
			case 18:
				stream.applyTempStore(bkOpen);
				tokentree_walk_WalkPOpen.walkPOpen(stream,bkOpen);
				break;
			case 21:
				stream.addToTempStore(tokentree_walk_WalkAt.walkAt(stream));
				break;
			default:
				stream.applyTempStore(bkOpen);
				tokentree_walk_WalkStatement.walkStatement(stream,bkOpen);
			}
		}
		bkOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BkClose));
	}
}
$hxClasses["tokentree.walk.WalkArrayAccess"] = tokentree_walk_WalkArrayAccess;
tokentree_walk_WalkArrayAccess.__name__ = "tokentree.walk.WalkArrayAccess";
class tokentree_walk_WalkAt {
	static walkAt(stream) {
		var atTok = stream.consumeTokenDef(haxeparser_TokenDef.At);
		var parent = atTok;
		if(stream.is(haxeparser_TokenDef.DblDot)) {
			var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
			atTok.addChild(dblDot);
			parent = dblDot;
		}
		tokentree_walk_WalkAt.walkIdent(stream,parent);
		return atTok;
	}
	static walkIdent(stream,parent) {
		var ident;
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			var _g3 = _g.k;
			ident = stream.consumeToken();
			break;
		case 1:
			var _g1 = _g.c;
			if(_g1._hx_index == 3) {
				var _g2 = _g1.s;
				ident = stream.consumeConstIdent();
			} else {
				return;
			}
			break;
		default:
			return;
		}
		parent.addChild(ident);
		switch(stream.token()._hx_index) {
		case 10:
			var child = stream.consumeToken();
			ident.addChild(child);
			tokentree_walk_WalkAt.walkIdent(stream,child);
			break;
		case 18:
			var pOpenPos = stream.getTokenPos();
			if(ident.pos.max == pOpenPos.min) {
				var tempStore = stream.getTempStore();
				stream.clearTempStore();
				tokentree_walk_WalkPOpen.walkPOpen(stream,ident,false);
				var _g4 = 0;
				while(_g4 < tempStore.length) {
					var temp = tempStore[_g4];
					++_g4;
					stream.addToTempStore(temp);
				}
			}
			break;
		default:
		}
	}
	static walkAts(stream) {
		var progress = new tokentree_TokenStreamProgress(stream);
		while(progress.streamHasChanged()) if(stream.token()._hx_index == 21) {
			stream.addToTempStore(tokentree_walk_WalkAt.walkAt(stream));
		}
	}
}
$hxClasses["tokentree.walk.WalkAt"] = tokentree_walk_WalkAt;
tokentree_walk_WalkAt.__name__ = "tokentree.walk.WalkAt";
class tokentree_walk_WalkBinopSub {
	static walkBinopSub(stream,parent) {
		var sub = stream.consumeOpSub();
		parent.addChild(sub);
		var _g = sub.tok;
		if(_g._hx_index == 1) {
			var _g1 = _g.c;
			tokentree_walk_WalkStatement.walkStatementContinue(stream,sub);
		} else {
			tokentree_walk_WalkStatement.walkStatement(stream,sub);
		}
	}
}
$hxClasses["tokentree.walk.WalkBinopSub"] = tokentree_walk_WalkBinopSub;
tokentree_walk_WalkBinopSub.__name__ = "tokentree.walk.WalkBinopSub";
class tokentree_walk_WalkBlock {
	static walkBlock(stream,parent) {
		while(stream.is(haxeparser_TokenDef.At)) stream.addToTempStore(tokentree_walk_WalkAt.walkAt(stream));
		if(stream.is(haxeparser_TokenDef.BrOpen)) {
			var openTok = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
			parent.addChild(openTok);
			stream.applyTempStore(openTok);
			tokentree_walk_WalkBlock.walkBlockContinue(stream,openTok);
		} else {
			tokentree_walk_WalkStatement.walkStatement(stream,parent);
		}
	}
	static walkBlockContinue(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 15:case 16:
					tokentree_walk_WalkSwitch.walkSwitchCases(stream,parent);
					break;
				default:
					tokentree_walk_WalkStatement.walkStatement(stream,parent);
				}
				break;
			case 13:
				var child = stream.consumeToken();
				var lastChild = parent.getLastChild();
				if(lastChild == null) {
					parent.addChild(child);
				} else {
					lastChild.addChild(child);
				}
				break;
			case 15:case 19:
				var child1 = stream.consumeToken();
				parent.addChild(child1);
				break;
			case 17:
				break _hx_loop1;
			default:
				tokentree_walk_WalkStatement.walkStatement(stream,parent);
			}
		}
		tokentree_walk_WalkBlock.walkBlockEnd(stream,parent);
	}
	static walkBlockEnd(stream,parent) {
		parent.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
		if(stream.hasMore()) {
			var _g = stream.token();
			if(_g._hx_index == 5) {
				if(_g.op._hx_index == 7) {
					return;
				}
			}
			tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
			if(stream.hasMore()) {
				if(stream.token()._hx_index == 9) {
					var semicolon = stream.consumeToken();
					parent.addChild(semicolon);
				}
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkBlock"] = tokentree_walk_WalkBlock;
tokentree_walk_WalkBlock.__name__ = "tokentree.walk.WalkBlock";
class tokentree_walk_WalkClass {
	static walkClass(stream,parent) {
		var typeTok = stream.consumeToken();
		parent.addChild(typeTok);
		tokentree_walk_WalkComment.walkComment(stream,parent);
		var name = typeTok;
		var _g = stream.token();
		switch(_g._hx_index) {
		case 1:
			var _g1 = _g.c;
			if(_g1._hx_index == 3) {
				var _g2 = _g1.s;
				name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
				stream.applyTempStore(name);
			}
			break;
		case 3:
			var _g3 = _g.s;
			name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
			stream.applyTempStore(name);
			break;
		default:
		}
		tokentree_walk_WalkClass.walkClassExtends(stream,name);
		var block = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
		name.addChild(block);
		tokentree_walk_WalkClass.walkClassBody(stream,block);
		block.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
	}
	static walkClassExtends(stream,name) {
		var progress = new tokentree_TokenStreamProgress(stream);
		while(progress.streamHasChanged()) {
			tokentree_walk_WalkExtends.walkExtends(stream,name);
			tokentree_walk_WalkImplements.walkImplements(stream,name);
			if(stream.isSharp()) {
				tokentree_walk_WalkSharp.walkSharp(stream,name,tokentree_walk_WalkClass.walkClassExtends);
			}
			tokentree_walk_WalkComment.walkComment(stream,name);
		}
	}
	static walkClassBody(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(stream.hasMore() && progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					tokentree_walk_WalkFunction.walkFunction(stream,parent);
					break;
				case 2:
					tokentree_walk_WalkVar.walkVar(stream,parent);
					break;
				case 17:case 18:case 19:case 25:case 30:case 32:case 34:case 40:
					stream.consumeToTempStore();
					break;
				case 41:
					tokentree_walk_WalkFinal.walkFinal(stream,parent);
					break;
				default:
					switch(tokentree_TokenStream.MODE._hx_index) {
					case 0:
						throw new js__$Boot_HaxeError("invalid token tree structure - found:" + ("" + Std.string(stream.token())));
					case 1:
						tokentree_walk_WalkStatement.walkStatement(stream,parent);
						break;
					}
				}
				break;
			case 1:
				var _g3 = _g.c;
				if(_g3._hx_index == 3) {
					if(_g3.s == "final") {
						tokentree_walk_WalkFinal.walkFinal(stream,parent);
					} else {
						switch(tokentree_TokenStream.MODE._hx_index) {
						case 0:
							throw new js__$Boot_HaxeError("invalid token tree structure - found:" + ("" + Std.string(stream.token())));
						case 1:
							tokentree_walk_WalkStatement.walkStatement(stream,parent);
							break;
						}
					}
				} else {
					switch(tokentree_TokenStream.MODE._hx_index) {
					case 0:
						throw new js__$Boot_HaxeError("invalid token tree structure - found:" + ("" + Std.string(stream.token())));
					case 1:
						tokentree_walk_WalkStatement.walkStatement(stream,parent);
						break;
					}
				}
				break;
			case 2:
				var _g1 = _g.s;
				tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkClass.walkClassBody);
				tokentree_walk_WalkClass.walkClassContinueAfterSharp(stream,parent);
				break;
			case 6:
				var _g6 = _g.s;
				parent.addChild(stream.consumeToken());
				break;
			case 7:
				var _g5 = _g.s;
				parent.addChild(stream.consumeToken());
				break;
			case 9:
				parent.addChild(stream.consumeToken());
				break;
			case 17:
				break _hx_loop1;
			case 21:
				stream.addToTempStore(tokentree_walk_WalkAt.walkAt(stream));
				break;
			default:
				switch(tokentree_TokenStream.MODE._hx_index) {
				case 0:
					throw new js__$Boot_HaxeError("invalid token tree structure - found:" + ("" + Std.string(stream.token())));
				case 1:
					tokentree_walk_WalkStatement.walkStatement(stream,parent);
					break;
				}
			}
		}
		var tempStore = stream.getTempStore();
		if(tempStore.length > 0) {
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("invalid token tree structure - found:" + ("" + Std.string(tempStore)));
			case 1:
				stream.applyTempStore(parent);
				break;
			}
		}
	}
	static walkClassContinueAfterSharp(stream,parent) {
		var brOpen = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.lastChild(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstChild(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.lastOf(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.lastChild(parent),haxeparser_TokenDef.Sharp("if")),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)))),haxeparser_TokenDef.BrOpen);
		if(brOpen == null) {
			return;
		}
		if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.is(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.lastChild(brOpen),haxeparser_TokenDef.BrClose) != null) {
			return;
		}
		tokentree_walk_WalkBlock.walkBlockContinue(stream,parent);
	}
}
$hxClasses["tokentree.walk.WalkClass"] = tokentree_walk_WalkClass;
tokentree_walk_WalkClass.__name__ = "tokentree.walk.WalkClass";
class tokentree_walk_WalkComment {
	static walkComment(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		while(stream.hasMore() && progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 6:
				var _g2 = _g.s;
				var comment = stream.consumeToken();
				parent.addChild(comment);
				break;
			case 7:
				var _g1 = _g.s;
				var comment1 = stream.consumeToken();
				parent.addChild(comment1);
				break;
			default:
				return;
			}
		}
	}
	static tryWalkComment(stream,parent,expect) {
		var currentPos = stream.getStreamIndex();
		var progress = new tokentree_TokenStreamProgress(stream);
		var comments = [];
		while(stream.hasMore() && progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 6:
				var _g2 = _g.s;
				comments.push(stream.consumeToken());
				break;
			case 7:
				var _g1 = _g.s;
				comments.push(stream.consumeToken());
				break;
			default:
				if(stream.is(expect)) {
					var _g3 = 0;
					while(_g3 < comments.length) {
						var comment = comments[_g3];
						++_g3;
						parent.addChild(comment);
					}
					return;
				}
				stream.rewindTo(currentPos);
				return;
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkComment"] = tokentree_walk_WalkComment;
tokentree_walk_WalkComment.__name__ = "tokentree.walk.WalkComment";
class tokentree_walk_WalkDoWhile {
	static walkDoWhile(stream,parent) {
		var doTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo));
		parent.addChild(doTok);
		stream.applyTempStore(doTok);
		tokentree_walk_WalkComment.walkComment(stream,doTok);
		tokentree_walk_WalkBlock.walkBlock(stream,doTok);
		var whileTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdWhile));
		doTok.addChild(whileTok);
		tokentree_walk_WalkStatement.walkStatement(stream,whileTok);
		tokentree_walk_WalkComment.walkComment(stream,whileTok);
		if(stream.is(haxeparser_TokenDef.Semicolon)) {
			whileTok.addChild(stream.consumeToken());
		}
	}
}
$hxClasses["tokentree.walk.WalkDoWhile"] = tokentree_walk_WalkDoWhile;
tokentree_walk_WalkDoWhile.__name__ = "tokentree.walk.WalkDoWhile";
class tokentree_walk_WalkEnum {
	static walkEnum(stream,parent) {
		var typeTok = stream.consumeToken();
		if(stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdAbstract))) {
			stream.addToTempStore(typeTok);
			tokentree_walk_WalkAbstract.walkAbstract(stream,parent);
			return;
		}
		parent.addChild(typeTok);
		var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
		stream.applyTempStore(name);
		tokentree_walk_WalkBlock.walkBlock(stream,name);
	}
}
$hxClasses["tokentree.walk.WalkEnum"] = tokentree_walk_WalkEnum;
tokentree_walk_WalkEnum.__name__ = "tokentree.walk.WalkEnum";
class tokentree_walk_WalkExtends {
	static walkExtends(stream,parent) {
		if(!stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdExtends))) {
			return;
		}
		var parentType = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdExtends));
		parent.addChild(parentType);
		tokentree_walk_WalkComment.walkComment(stream,parent);
		tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,parentType);
		tokentree_walk_WalkComment.walkComment(stream,parent);
		tokentree_walk_WalkExtends.walkExtends(stream,parentType);
		tokentree_walk_WalkComment.walkComment(stream,parent);
	}
}
$hxClasses["tokentree.walk.WalkExtends"] = tokentree_walk_WalkExtends;
tokentree_walk_WalkExtends.__name__ = "tokentree.walk.WalkExtends";
class tokentree_walk_WalkFieldDef {
	static walkFieldDef(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:case 2:
					var tok = stream.consumeToken();
					parent.addChild(tok);
					parent = tok;
					break;
				case 41:
					var tok1 = stream.consumeToken();
					parent.addChild(tok1);
					parent = tok1;
					break;
				default:
					break _hx_loop1;
				}
				break;
			case 1:
				var _g2 = _g.c;
				if(_g2._hx_index == 3) {
					if(_g2.s == "final") {
						var tok2 = stream.consumeToken();
						parent.addChild(tok2);
						parent = tok2;
					} else {
						break _hx_loop1;
					}
				} else {
					break _hx_loop1;
				}
				break;
			case 6:
				var _g5 = _g.s;
				tokentree_walk_WalkComment.walkComment(stream,parent);
				break;
			case 7:
				var _g4 = _g.s;
				tokentree_walk_WalkComment.walkComment(stream,parent);
				break;
			case 21:
				stream.addToTempStore(tokentree_walk_WalkAt.walkAt(stream));
				break;
			default:
				break _hx_loop1;
			}
		}
		var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,parent);
		stream.applyTempStore(name);
		if(stream.is(haxeparser_TokenDef.DblDot)) {
			var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
			name.addChild(dblDot);
			tokentree_walk_WalkTypedefBody.walkTypedefBody(stream,dblDot);
		}
		if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
			tokentree_walk_WalkStatement.walkStatement(stream,name);
		}
		switch(stream.token()._hx_index) {
		case 9:
			name.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Semicolon));
			break;
		case 13:
			name.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Comma));
			break;
		default:
		}
	}
}
$hxClasses["tokentree.walk.WalkFieldDef"] = tokentree_walk_WalkFieldDef;
tokentree_walk_WalkFieldDef.__name__ = "tokentree.walk.WalkFieldDef";
class tokentree_walk_WalkFile {
	static walkFile(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		while(stream.hasMore() && progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					tokentree_walk_WalkFunction.walkFunction(stream,parent);
					break;
				case 2:
					tokentree_walk_WalkVar.walkVar(stream,parent);
					break;
				case 13:case 33:case 35:
					stream.applyTempStore(parent);
					tokentree_walk_WalkPackageImport.walkPackageImport(stream,parent);
					break;
				case 17:case 18:case 19:case 25:case 32:case 34:case 40:
					stream.consumeToTempStore();
					break;
				case 1:case 26:case 27:case 31:case 39:
					tokentree_walk_WalkType.walkType(stream,parent);
					break;
				case 41:
					tokentree_walk_WalkFinal.walkFinal(stream,parent);
					break;
				default:
					tokentree_walk_WalkBlock.walkBlock(stream,parent);
				}
				break;
			case 1:
				var _g3 = _g.c;
				if(_g3._hx_index == 2) {
					var _g5 = _g3.kind;
					if(_g3.s == "final") {
						stream.consumeToTempStore();
					} else {
						tokentree_walk_WalkBlock.walkBlock(stream,parent);
					}
				} else {
					tokentree_walk_WalkBlock.walkBlock(stream,parent);
				}
				break;
			case 2:
				var _g1 = _g.s;
				tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkFile.walkFile);
				if(!stream.hasMore()) {
					return;
				}
				if(stream.token()._hx_index == 16) {
					tokentree_walk_WalkBlock.walkBlock(stream,parent.children[parent.children.length - 1]);
				}
				break;
			case 6:
				var _g7 = _g.s;
				tokentree_walk_WalkComment.walkComment(stream,parent);
				break;
			case 7:
				var _g6 = _g.s;
				tokentree_walk_WalkComment.walkComment(stream,parent);
				break;
			case 9:case 13:case 15:case 17:case 19:
				parent.addChild(stream.consumeToken());
				break;
			case 21:
				stream.addToTempStore(tokentree_walk_WalkAt.walkAt(stream));
				break;
			default:
				tokentree_walk_WalkBlock.walkBlock(stream,parent);
			}
		}
		var tempStore = stream.getTempStore();
		var _g2 = 0;
		while(_g2 < tempStore.length) {
			var stored = tempStore[_g2];
			++_g2;
			var _g4 = stored.tok;
			switch(_g4._hx_index) {
			case 0:
				switch(_g4.k._hx_index) {
				case 18:case 19:case 25:
					switch(tokentree_TokenStream.MODE._hx_index) {
					case 0:
						throw new js__$Boot_HaxeError("invalid token tree structure - found:" + Std.string(stored));
					case 1:
						parent.addChild(stored);
						break;
					}
					break;
				default:
					parent.addChild(stored);
				}
				break;
			case 21:
				switch(tokentree_TokenStream.MODE._hx_index) {
				case 0:
					throw new js__$Boot_HaxeError("invalid token tree structure - found:" + Std.string(stored));
				case 1:
					parent.addChild(stored);
					break;
				}
				break;
			default:
				parent.addChild(stored);
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkFile"] = tokentree_walk_WalkFile;
tokentree_walk_WalkFile.__name__ = "tokentree.walk.WalkFile";
class tokentree_walk_WalkFinal {
	static walkFinal(stream,parent) {
		var name = null;
		var finalTok = stream.consumeToken();
		stream.addToTempStore(finalTok);
		tokentree_walk_WalkComment.walkComment(stream,parent);
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					return;
				case 1:
					return;
				case 17:case 18:case 19:case 25:case 30:case 32:case 34:case 40:
					stream.consumeToTempStore();
					break;
				default:
				}
				break;
			case 1:
				var _g1 = _g.c;
				if(_g1._hx_index == 3) {
					var _g2 = _g1.s;
					name = stream.consumeToken();
					break _hx_loop1;
				}
				break;
			case 6:
				var _g5 = _g.s;
				stream.consumeToTempStore();
				break;
			case 7:
				var _g4 = _g.s;
				stream.consumeToTempStore();
				break;
			case 20:
				var nameParent = stream.consumeToken();
				name = stream.consumeConstIdent();
				nameParent.addChild(name);
				name = nameParent;
				break _hx_loop1;
			default:
			}
		}
		parent.addChild(finalTok);
		var tempStore = stream.getTempStore();
		var _g3 = 0;
		while(_g3 < tempStore.length) {
			var stored = tempStore[_g3];
			++_g3;
			var _g6 = stored.tok;
			switch(_g6._hx_index) {
			case 0:
				if(_g6.k._hx_index != 41) {
					name.addChild(stored);
				}
				break;
			case 1:
				var _g11 = _g6.c;
				if(_g11._hx_index == 3) {
					if(_g11.s != "final") {
						name.addChild(stored);
					}
				} else {
					name.addChild(stored);
				}
				break;
			default:
				name.addChild(stored);
			}
		}
		stream.clearTempStore();
		finalTok.addChild(name);
		tokentree_walk_WalkComment.walkComment(stream,name);
		if(stream.is(haxeparser_TokenDef.DblDot)) {
			var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
			name.addChild(dblDot);
			tokentree_walk_WalkTypedefBody.walkTypedefAlias(stream,dblDot);
		}
		if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
			tokentree_walk_WalkStatement.walkStatement(stream,name);
		}
		if(stream.is(haxeparser_TokenDef.Semicolon)) {
			name.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Semicolon));
		}
	}
}
$hxClasses["tokentree.walk.WalkFinal"] = tokentree_walk_WalkFinal;
tokentree_walk_WalkFinal.__name__ = "tokentree.walk.WalkFinal";
class tokentree_walk_WalkFor {
	static walkFor(stream,parent) {
		var forTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFor));
		parent.addChild(forTok);
		stream.applyTempStore(forTok);
		tokentree_walk_WalkComment.walkComment(stream,forTok);
		tokentree_walk_WalkFor.walkForPOpen(stream,forTok);
		tokentree_walk_WalkComment.walkComment(stream,forTok);
		tokentree_walk_WalkBlock.walkBlock(stream,forTok);
	}
	static walkForPOpen(stream,parent) {
		var pOpen = stream.consumeTokenDef(haxeparser_TokenDef.POpen);
		parent.addChild(pOpen);
		tokentree_walk_WalkComment.walkComment(stream,pOpen);
		var identifier = null;
		var _g = stream.token();
		if(_g._hx_index == 3) {
			var _g1 = _g.s;
			tokentree_walk_WalkStatement.walkStatement(stream,pOpen);
			identifier = pOpen.getLastChild();
		} else {
			identifier = stream.consumeConstIdent();
			pOpen.addChild(identifier);
		}
		tokentree_walk_WalkComment.walkComment(stream,identifier);
		if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpArrow))) {
			var arrowTok = stream.consumeToken();
			identifier.addChild(arrowTok);
			var _g2 = stream.token();
			if(_g2._hx_index == 3) {
				var _g3 = _g2.s;
				tokentree_walk_WalkStatement.walkStatement(stream,arrowTok);
			} else {
				arrowTok.addChild(stream.consumeConstIdent());
			}
		}
		var inTok = null;
		var _g21 = stream.token();
		switch(_g21._hx_index) {
		case 5:
			if(_g21.op._hx_index == 23) {
				inTok = stream.consumeToken();
				identifier.addChild(inTok);
				tokentree_walk_WalkComment.walkComment(stream,inTok);
				tokentree_walk_WalkStatement.walkStatement(stream,inTok);
				tokentree_walk_WalkComment.walkComment(stream,pOpen);
				pOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.PClose));
				tokentree_walk_WalkComment.walkComment(stream,parent);
			}
			break;
		case 19:
			pOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.PClose));
			tokentree_walk_WalkComment.walkComment(stream,parent);
			return;
		default:
		}
	}
}
$hxClasses["tokentree.walk.WalkFor"] = tokentree_walk_WalkFor;
tokentree_walk_WalkFor.__name__ = "tokentree.walk.WalkFor";
class tokentree_walk_WalkFunction {
	static walkFunction(stream,parent) {
		var funcTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction));
		parent.addChild(funcTok);
		tokentree_walk_WalkComment.walkComment(stream,funcTok);
		var name = funcTok;
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			if(_g.k._hx_index == 22) {
				name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,funcTok);
			} else {
				name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,funcTok);
			}
			break;
		case 5:
			if(_g.op._hx_index == 9) {
				tokentree_walk_WalkLtGt.walkLtGt(stream,funcTok);
				name = funcTok.getLastChild();
			} else {
				name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,funcTok);
			}
			break;
		case 18:
			break;
		default:
			name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,funcTok);
		}
		stream.applyTempStore(name);
		tokentree_walk_WalkComment.walkComment(stream,name);
		tokentree_walk_WalkFunction.walkFunctionParameters(stream,name);
		tokentree_walk_WalkComment.walkComment(stream,name);
		if(stream.is(haxeparser_TokenDef.DblDot)) {
			var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
			name.addChild(dblDot);
			tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,dblDot);
		}
		tokentree_walk_WalkBlock.walkBlock(stream,name);
	}
	static walkFunctionParameters(stream,parent) {
		var pOpen = stream.consumeTokenDef(haxeparser_TokenDef.POpen);
		parent.addChild(pOpen);
		var progress = new tokentree_TokenStreamProgress(stream);
		while(progress.streamHasChanged()) {
			tokentree_walk_WalkComment.walkComment(stream,pOpen);
			if(stream.is(haxeparser_TokenDef.PClose)) {
				break;
			}
			tokentree_walk_WalkFieldDef.walkFieldDef(stream,pOpen);
		}
		pOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.PClose));
	}
}
$hxClasses["tokentree.walk.WalkFunction"] = tokentree_walk_WalkFunction;
tokentree_walk_WalkFunction.__name__ = "tokentree.walk.WalkFunction";
class tokentree_walk_WalkIf {
	static walkIf(stream,parent) {
		var ifTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdIf));
		parent.addChild(ifTok);
		stream.applyTempStore(ifTok);
		tokentree_walk_WalkStatement.walkStatement(stream,ifTok);
		if(stream.is(haxeparser_TokenDef.DblDot)) {
			return;
		}
		tokentree_walk_WalkBlock.walkBlock(stream,ifTok);
		tokentree_walk_WalkComment.tryWalkComment(stream,ifTok,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse));
		if(stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse))) {
			var elseTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse));
			ifTok.addChild(elseTok);
			tokentree_walk_WalkBlock.walkBlock(stream,elseTok);
		}
	}
}
$hxClasses["tokentree.walk.WalkIf"] = tokentree_walk_WalkIf;
tokentree_walk_WalkIf.__name__ = "tokentree.walk.WalkIf";
class tokentree_walk_WalkImplements {
	static walkImplements(stream,parent) {
		if(!stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdImplements))) {
			return;
		}
		var interfacePart = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdImplements));
		parent.addChild(interfacePart);
		tokentree_walk_WalkComment.walkComment(stream,parent);
		tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,interfacePart);
		tokentree_walk_WalkComment.walkComment(stream,parent);
		tokentree_walk_WalkImplements.walkImplements(stream,parent);
		tokentree_walk_WalkComment.walkComment(stream,parent);
	}
}
$hxClasses["tokentree.walk.WalkImplements"] = tokentree_walk_WalkImplements;
tokentree_walk_WalkImplements.__name__ = "tokentree.walk.WalkImplements";
class tokentree_walk_WalkInterface {
	static walkInterface(stream,parent) {
		var typeTok = stream.consumeToken();
		parent.addChild(typeTok);
		var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
		stream.applyTempStore(name);
		tokentree_walk_WalkClass.walkClassExtends(stream,name);
		var block = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
		name.addChild(block);
		tokentree_walk_WalkInterface.walkInterfaceBody(stream,block);
		block.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
	}
	static walkInterfaceBody(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					tokentree_walk_WalkFunction.walkFunction(stream,parent);
					break;
				case 2:
					tokentree_walk_WalkVar.walkVar(stream,parent);
					break;
				case 17:case 18:case 19:case 25:case 30:case 32:case 34:case 40:
					stream.consumeToTempStore();
					break;
				case 41:
					tokentree_walk_WalkFinal.walkFinal(stream,parent);
					break;
				default:
					stream.consumeToTempStore();
				}
				break;
			case 1:
				var _g3 = _g.c;
				if(_g3._hx_index == 3) {
					if(_g3.s == "final") {
						tokentree_walk_WalkFinal.walkFinal(stream,parent);
					} else {
						stream.consumeToTempStore();
					}
				} else {
					stream.consumeToTempStore();
				}
				break;
			case 2:
				var _g1 = _g.s;
				tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkInterface.walkInterfaceBody);
				break;
			case 6:
				var _g6 = _g.s;
				parent.addChild(stream.consumeToken());
				break;
			case 7:
				var _g5 = _g.s;
				parent.addChild(stream.consumeToken());
				break;
			case 9:
				parent.addChild(stream.consumeToken());
				break;
			case 17:
				break _hx_loop1;
			case 21:
				stream.addToTempStore(tokentree_walk_WalkAt.walkAt(stream));
				break;
			default:
				stream.consumeToTempStore();
			}
		}
		stream.applyTempStore(parent);
	}
}
$hxClasses["tokentree.walk.WalkInterface"] = tokentree_walk_WalkInterface;
tokentree_walk_WalkInterface.__name__ = "tokentree.walk.WalkInterface";
class tokentree_walk_WalkLtGt {
	static walkLtGt(stream,parent) {
		var ltTok = stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt));
		parent.addChild(ltTok);
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 5:
				if(_g.op._hx_index == 7) {
					break _hx_loop1;
				} else {
					tokentree_walk_WalkFieldDef.walkFieldDef(stream,ltTok);
				}
				break;
			case 11:
				var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
				ltTok.addChild(dblDot);
				tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,ltTok);
				break;
			case 13:
				var comma = stream.consumeTokenDef(haxeparser_TokenDef.Comma);
				ltTok.addChild(comma);
				tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,ltTok);
				tokentree_walk_WalkFieldDef.walkFieldDef(stream,ltTok);
				break;
			default:
				tokentree_walk_WalkFieldDef.walkFieldDef(stream,ltTok);
			}
		}
		ltTok.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt)));
	}
}
$hxClasses["tokentree.walk.WalkLtGt"] = tokentree_walk_WalkLtGt;
tokentree_walk_WalkLtGt.__name__ = "tokentree.walk.WalkLtGt";
class tokentree_walk_WalkNew {
	static walkNew(stream,parent) {
		var newTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdNew));
		parent.addChild(newTok);
		var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,newTok);
		tokentree_walk_WalkComment.walkComment(stream,name);
		var _g = stream.token();
		switch(_g._hx_index) {
		case 2:
			var _g1 = _g.s;
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkStatement.walkStatement);
			break;
		case 18:
			tokentree_walk_WalkPOpen.walkPOpen(stream,name);
			break;
		default:
		}
		tokentree_walk_WalkComment.walkComment(stream,name);
		if(stream.is(haxeparser_TokenDef.Dot)) {
			tokentree_walk_WalkStatement.walkStatement(stream,name);
		}
	}
}
$hxClasses["tokentree.walk.WalkNew"] = tokentree_walk_WalkNew;
tokentree_walk_WalkNew.__name__ = "tokentree.walk.WalkNew";
class tokentree_walk_WalkPOpen {
	static walkPOpen(stream,parent,walkTrailingComments) {
		if(walkTrailingComments == null) {
			walkTrailingComments = true;
		}
		var pOpen = stream.consumeTokenDef(haxeparser_TokenDef.POpen);
		parent.addChild(pOpen);
		tokentree_walk_WalkPOpen.walkPOpenParts(stream,pOpen);
		pOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.PClose));
		if(walkTrailingComments) {
			tokentree_walk_WalkComment.walkComment(stream,parent);
		}
		return pOpen;
	}
	static walkPOpenParts(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 2:
				var _g1 = _g.s;
				tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkPOpen.walkPOpenParts);
				break;
			case 13:
				var comma = stream.consumeToken();
				var child = parent.getLastChild();
				if(child == null) {
					child = parent;
				}
				child.addChild(comma);
				break;
			case 14:
				tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,parent);
				break;
			case 16:
				tokentree_walk_WalkBlock.walkBlock(stream,parent);
				break;
			case 19:
				break _hx_loop1;
			default:
				tokentree_walk_WalkStatement.walkStatement(stream,parent);
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkPOpen"] = tokentree_walk_WalkPOpen;
tokentree_walk_WalkPOpen.__name__ = "tokentree.walk.WalkPOpen";
class tokentree_walk_WalkPackageImport {
	static walkPackageImport(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		while(stream.hasMore() && progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 2:
				var _g1 = _g.s;
				tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkPackageImport.walkPackageImport);
				break;
			case 9:
				var newChild = stream.consumeToken();
				parent.addChild(newChild);
				return;
			default:
				var newChild1 = stream.consumeToken();
				parent.addChild(newChild1);
				parent = newChild1;
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkPackageImport"] = tokentree_walk_WalkPackageImport;
tokentree_walk_WalkPackageImport.__name__ = "tokentree.walk.WalkPackageImport";
class tokentree_walk_WalkQuestion {
	static walkQuestion(stream,parent) {
		var ternary = tokentree_walk_WalkQuestion.isTernary(parent);
		var question = stream.consumeTokenDef(haxeparser_TokenDef.Question);
		parent.addChild(question);
		tokentree_walk_WalkComment.walkComment(stream,question);
		if(!ternary) {
			tokentree_walk_WalkStatement.walkStatement(stream,question);
			return;
		}
		tokentree_walk_WalkStatement.walkStatement(stream,question);
		tokentree_walk_WalkComment.walkComment(stream,question);
		var dblDotTok = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
		question.addChild(dblDotTok);
		tokentree_walk_WalkStatement.walkStatement(stream,dblDotTok);
	}
	static isTernary(parent) {
		var lastChild = parent.getLastChild();
		if(lastChild == null) {
			var _g = parent.tok;
			if(_g._hx_index == 1) {
				var _g1 = _g.c;
				return true;
			} else {
				return false;
			}
		} else {
			var _g2 = lastChild.tok;
			switch(_g2._hx_index) {
			case 0:
				switch(_g2.k._hx_index) {
				case 0:
					return true;
				case 22:
					return true;
				case 23:case 28:case 40:
					return true;
				case 29:
					return true;
				case 36:case 37:case 38:
					return true;
				default:
					return false;
				}
				break;
			case 1:
				var _g3 = _g2.c;
				return true;
			case 3:
				var _g5 = _g2.s;
				return true;
			case 4:
				var _g21 = _g2.op;
				return true;
			case 5:
				switch(_g2.op._hx_index) {
				case 0:case 3:
					return true;
				default:
					return false;
				}
				break;
			case 11:
				return true;
			case 14:
				return true;
			case 16:
				return true;
			case 18:
				return true;
			case 19:
				return true;
			default:
				return false;
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkQuestion"] = tokentree_walk_WalkQuestion;
tokentree_walk_WalkQuestion.__name__ = "tokentree.walk.WalkQuestion";
class tokentree_walk_WalkSharp {
	static walkSharp(stream,parent,walker) {
		var _g = stream.token();
		if(_g._hx_index == 2) {
			switch(_g.s) {
			case "else":
				tokentree_walk_WalkSharp.walkSharpElse(stream,parent);
				break;
			case "elseif":
				tokentree_walk_WalkSharp.walkSharpElseIf(stream,parent);
				break;
			case "end":
				tokentree_walk_WalkSharp.walkSharpEnd(stream,parent);
				break;
			case "error":
				var errorToken = stream.consumeToken();
				parent.addChild(errorToken);
				var _g1 = stream.token();
				if(_g1._hx_index == 1) {
					var _g11 = _g1.c;
					if(_g11._hx_index == 2) {
						var _g3 = _g11.kind;
						var _g2 = _g11.s;
						errorToken.addChild(stream.consumeToken());
					}
				}
				break;
			case "if":
				tokentree_walk_WalkSharp.walkSharpIf(stream,parent,walker);
				break;
			default:
				parent.addChild(stream.consumeToken());
			}
		}
	}
	static walkSharpIf(stream,parent,walker) {
		var ifToken = stream.consumeToken();
		parent.addChild(ifToken);
		tokentree_walk_WalkSharp.walkSharpIfExpr(stream,ifToken);
		stream.pushSharpIf(ifToken);
		var newParent = ifToken;
		var progress = new tokentree_TokenStreamProgress(stream);
		while(progress.streamHasChanged()) try {
			walker(stream,newParent);
			switch(stream.token()._hx_index) {
			case 13:case 17:case 19:
				var newChild = stream.consumeToken();
				newParent.addChild(newChild);
				break;
			default:
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof tokentree_walk_SharpElseException)) {
				newParent = e1.token;
			} else if(((e1) instanceof tokentree_walk_SharpEndException)) {
				var e2 = e1;
				stream.popSharpIf();
				return;
			} else {
				throw e;
			}
		}
	}
	static walkSharpElse(stream,parent) {
		var sharpIfParent = stream.peekSharpIf();
		var ifToken = stream.consumeToken();
		sharpIfParent.addChild(ifToken);
		stream.applyTempStore(sharpIfParent);
		throw new js__$Boot_HaxeError(new tokentree_walk_SharpElseException(ifToken));
	}
	static walkSharpElseIf(stream,parent) {
		var sharpIfParent = stream.peekSharpIf();
		var ifToken = stream.consumeToken();
		sharpIfParent.addChild(ifToken);
		stream.applyTempStore(sharpIfParent);
		tokentree_walk_WalkSharp.walkSharpIfExpr(stream,ifToken);
		throw new js__$Boot_HaxeError(new tokentree_walk_SharpElseException(ifToken));
	}
	static walkSharpEnd(stream,parent) {
		var sharpIfParent = stream.peekSharpIf();
		var endToken = stream.consumeToken();
		stream.applyTempStore(sharpIfParent);
		sharpIfParent.addChild(endToken);
		throw new js__$Boot_HaxeError(new tokentree_walk_SharpEndException());
	}
	static walkSharpIfExpr(stream,parent) {
		var childToken;
		var progress = new tokentree_TokenStreamProgress(stream);
		while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				var _g2 = _g.k;
				childToken = stream.consumeToken();
				parent.addChild(childToken);
				if(!stream.hasMore()) {
					return;
				}
				if(stream.token()._hx_index != 10) {
					return;
				}
				var pos = stream.getTokenPos();
				if(pos == null) {
					return;
				}
				if(pos.min == childToken.pos.max + 1) {
					continue;
				}
				var dot = stream.consumeToken();
				childToken.addChild(dot);
				tokentree_walk_WalkSharp.walkSharpIfExpr(stream,dot);
				return;
			case 1:
				var _g3 = _g.c;
				if(_g3._hx_index == 3) {
					var _g4 = _g3.s;
					childToken = stream.consumeToken();
					parent.addChild(childToken);
					if(!stream.hasMore()) {
						return;
					}
					if(stream.token()._hx_index != 10) {
						return;
					}
					var pos1 = stream.getTokenPos();
					if(pos1 == null) {
						return;
					}
					if(pos1.min == childToken.pos.max + 1) {
						continue;
					}
					var dot1 = stream.consumeToken();
					childToken.addChild(dot1);
					tokentree_walk_WalkSharp.walkSharpIfExpr(stream,dot1);
					return;
				} else {
					return;
				}
				break;
			case 4:
				if(_g.op._hx_index == 2) {
					childToken = stream.consumeToken();
					parent.addChild(childToken);
					tokentree_walk_WalkSharp.walkSharpIfExpr(stream,childToken);
					return;
				} else {
					return;
				}
				break;
			case 18:
				tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
				return;
			default:
				return;
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkSharp"] = tokentree_walk_WalkSharp;
tokentree_walk_WalkSharp.__name__ = "tokentree.walk.WalkSharp";
class tokentree_walk_SharpElseException {
	constructor(token) {
		this.token = token;
	}
}
$hxClasses["tokentree.walk.SharpElseException"] = tokentree_walk_SharpElseException;
tokentree_walk_SharpElseException.__name__ = "tokentree.walk.SharpElseException";
Object.assign(tokentree_walk_SharpElseException.prototype, {
	__class__: tokentree_walk_SharpElseException
	,token: null
});
class tokentree_walk_SharpEndException {
	constructor() {
	}
}
$hxClasses["tokentree.walk.SharpEndException"] = tokentree_walk_SharpEndException;
tokentree_walk_SharpEndException.__name__ = "tokentree.walk.SharpEndException";
Object.assign(tokentree_walk_SharpEndException.prototype, {
	__class__: tokentree_walk_SharpEndException
});
class tokentree_walk_WalkStatement {
	static walkStatement(stream,parent) {
		tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
		if(stream.is(haxeparser_TokenDef.Semicolon)) {
			var semicolon = stream.consumeToken();
			var lastChild = parent.getLastChild();
			if(lastChild == null) {
				lastChild = parent;
			}
			switch(lastChild.tok._hx_index) {
			case 15:case 17:case 19:
				lastChild = parent;
				break;
			default:
			}
			lastChild.addChild(semicolon);
		}
	}
	static walkStatementWithoutSemicolon(stream,parent) {
		tokentree_walk_WalkComment.walkComment(stream,parent);
		var wantMore = true;
		tokentree_walk_WalkAt.walkAts(stream);
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			var _g5 = _g.k;
			if(tokentree_walk_WalkStatement.walkKeyword(stream,parent)) {
				wantMore = true;
			} else {
				return;
			}
			break;
		case 2:
			var _g4 = _g.s;
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkStatement.walkStatement);
			tokentree_walk_WalkStatement.walkStatementContinueAfterSharp(stream,parent);
			return;
		case 3:
			var name = _g.s;
			var dollarTok = stream.consumeToken();
			parent.addChild(dollarTok);
			if(stream.is(haxeparser_TokenDef.DblDot)) {
				return;
			}
			tokentree_walk_WalkBlock.walkBlock(stream,dollarTok);
			return;
		case 4:
			var _g2 = _g.op;
			if(parent.isCIdentOrCString()) {
				var newChild = stream.consumeToken();
				parent.addChild(newChild);
				if(!stream.hasMore()) {
					return;
				}
				if(stream.token()._hx_index == 10) {
					tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,newChild);
				}
				return;
			}
			break;
		case 5:
			switch(_g.op._hx_index) {
			case 3:
				tokentree_walk_WalkBinopSub.walkBinopSub(stream,parent);
				return;
			case 7:
				var gtTok = stream.consumeOpGt();
				parent.addChild(gtTok);
				tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,gtTok);
				return;
			case 9:
				if(stream.isTypedParam()) {
					tokentree_walk_WalkLtGt.walkLtGt(stream,parent);
					if(stream.is(haxeparser_TokenDef.Arrow)) {
						tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
					}
					return;
				}
				wantMore = true;
				break;
			case 12:
				if(parent.parent != null && parent.parent.tok != null) {
					var _g1 = parent.parent.tok;
					if(_g1._hx_index == 0) {
						if(_g1.k._hx_index == 15) {
							var orTok = stream.consumeToken();
							parent.addChild(orTok);
							tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent.parent);
							return;
						}
					}
				}
				wantMore = true;
				break;
			default:
				wantMore = true;
			}
			break;
		case 8:
			var _g3 = _g.s;
			wantMore = true;
			break;
		case 9:
			return;
		case 10:
			wantMore = true;
			break;
		case 11:
			if(parent.is(haxeparser_TokenDef.Dot)) {
				return;
			}
			if(tokentree_walk_WalkQuestion.isTernary(parent)) {
				tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
				return;
			}
			wantMore = true;
			break;
		case 12:
			wantMore = true;
			break;
		case 13:
			return;
		case 14:
			tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,parent);
			tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
			return;
		case 16:
			tokentree_walk_WalkBlock.walkBlock(stream,parent);
			return;
		case 15:case 17:case 19:
			return;
		case 18:
			tokentree_walk_WalkStatement.walkPOpen(stream,parent);
			return;
		case 20:
			tokentree_walk_WalkQuestion.walkQuestion(stream,parent);
			return;
		default:
			wantMore = false;
		}
		var newChild1 = stream.consumeToken();
		parent.addChild(newChild1);
		stream.applyTempStore(newChild1);
		tokentree_walk_WalkStatement.walkTrailingComment(stream,newChild1);
		if(wantMore) {
			tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,newChild1);
		}
		tokentree_walk_WalkStatement.walkStatementContinue(stream,newChild1);
		tokentree_walk_WalkStatement.walkTrailingComment(stream,newChild1);
	}
	static walkTrailingComment(stream,parent) {
		if(!stream.hasMore()) {
			return;
		}
		var _g = stream.token();
		if(_g._hx_index == 7) {
			var _g1 = _g.s;
			var currentPos = stream.getStreamIndex();
			var commentTok = stream.consumeToken();
			if(!stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse))) {
				stream.rewindTo(currentPos);
				return;
			}
			parent.addChild(commentTok);
		}
	}
	static walkStatementContinue(stream,parent) {
		if(!stream.hasMore()) {
			return;
		}
		var _g = stream.token();
		switch(_g._hx_index) {
		case 4:
			var _g2 = _g.op;
			if(parent.isCIdentOrCString()) {
				tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
			}
			break;
		case 5:
			switch(_g.op._hx_index) {
			case 0:case 3:
				tokentree_walk_WalkStatement.walkOpAdd(stream,parent);
				break;
			case 14:case 15:
				tokentree_walk_WalkStatement.walkOpBool(stream,parent);
				break;
			default:
				tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
			}
			break;
		case 6:
			var _g4 = _g.s;
			var nextTokDef = stream.peekNonCommentToken();
			if(nextTokDef == null) {
				return;
			}
			if(nextTokDef != null) {
				switch(nextTokDef._hx_index) {
				case 4:
					var _g1 = nextTokDef.op;
					tokentree_walk_WalkComment.walkComment(stream,parent);
					tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
					break;
				case 5:
					var _g3 = nextTokDef.op;
					tokentree_walk_WalkComment.walkComment(stream,parent);
					tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
					break;
				case 10:case 11:case 20:
					tokentree_walk_WalkComment.walkComment(stream,parent);
					tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
					break;
				default:
				}
			}
			break;
		case 7:
			var _g31 = _g.s;
			var nextTokDef1 = stream.peekNonCommentToken();
			if(nextTokDef1 == null) {
				return;
			}
			if(nextTokDef1 != null) {
				switch(nextTokDef1._hx_index) {
				case 4:
					var _g11 = nextTokDef1.op;
					tokentree_walk_WalkComment.walkComment(stream,parent);
					tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
					break;
				case 5:
					var _g5 = nextTokDef1.op;
					tokentree_walk_WalkComment.walkComment(stream,parent);
					tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
					break;
				case 10:case 11:case 20:
					tokentree_walk_WalkComment.walkComment(stream,parent);
					tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
					break;
				default:
				}
			}
			break;
		case 9:
			return;
		case 10:
			tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
			break;
		case 11:
			tokentree_walk_WalkStatement.walkDblDot(stream,parent);
			break;
		case 12:
			tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
			break;
		case 14:
			tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
			break;
		case 18:
			tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
			break;
		case 20:
			tokentree_walk_WalkQuestion.walkQuestion(stream,parent);
			break;
		default:
		}
	}
	static walkKeyword(stream,parent) {
		var _g = stream.token();
		if(_g._hx_index == 0) {
			switch(_g.k._hx_index) {
			case 0:
				tokentree_walk_WalkFunction.walkFunction(stream,parent);
				break;
			case 1:
				tokentree_walk_WalkClass.walkClass(stream,parent);
				break;
			case 2:
				tokentree_walk_WalkVar.walkVar(stream,parent);
				break;
			case 3:
				tokentree_walk_WalkIf.walkIf(stream,parent);
				break;
			case 5:
				if(!parent.is(haxeparser_TokenDef.BrOpen) && parent.parent.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo))) {
					return false;
				}
				tokentree_walk_WalkWhile.walkWhile(stream,parent);
				break;
			case 6:
				tokentree_walk_WalkDoWhile.walkDoWhile(stream,parent);
				break;
			case 7:
				tokentree_walk_WalkFor.walkFor(stream,parent);
				break;
			case 10:case 40:
				return true;
			case 14:
				tokentree_walk_WalkSwitch.walkSwitch(stream,parent);
				break;
			case 15:
				return false;
			case 16:
				if(parent.is(haxeparser_TokenDef.BrOpen)) {
					return false;
				}
				return true;
			case 20:
				tokentree_walk_WalkTry.walkTry(stream,parent);
				break;
			case 22:
				if(parent.is(haxeparser_TokenDef.Dot)) {
					var newChild = stream.consumeToken();
					parent.addChild(newChild);
					tokentree_walk_WalkStatement.walkStatementContinue(stream,newChild);
				} else {
					tokentree_walk_WalkNew.walkNew(stream,parent);
				}
				break;
			case 23:
				var newChild1 = stream.consumeToken();
				parent.addChild(newChild1);
				tokentree_walk_WalkStatement.walkStatementContinue(stream,newChild1);
				return false;
			case 29:
				var newChild2 = stream.consumeToken();
				parent.addChild(newChild2);
				tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,newChild2);
				return false;
			case 36:case 37:case 38:
				var newChild3 = stream.consumeToken();
				parent.addChild(newChild3);
				var _g1 = stream.token();
				if(_g1._hx_index == 5) {
					switch(_g1.op._hx_index) {
					case 14:case 15:
						tokentree_walk_WalkStatement.walkOpBool(stream,newChild3);
						break;
					default:
						tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,newChild3);
					}
				}
				return false;
			default:
				return true;
			}
		} else {
			return true;
		}
		return false;
	}
	static walkDblDot(stream,parent) {
		var question = tokentree_walk_WalkStatement.findQuestionParent(parent);
		if(question != null) {
			return;
		}
		var dblDotTok = stream.consumeToken();
		parent.addChild(dblDotTok);
		if(parent.isCIdentOrCString() && parent.parent.is(haxeparser_TokenDef.BrOpen)) {
			tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,dblDotTok);
			return;
		}
		if(stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdNew))) {
			tokentree_walk_WalkNew.walkNew(stream,dblDotTok);
			return;
		}
		if(!tokentree_walk_WalkStatement.walkKeyword(stream,dblDotTok)) {
			return;
		}
		tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,dblDotTok);
		if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
			tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
		}
		if(stream.is(haxeparser_TokenDef.Arrow)) {
			tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,parent);
		}
	}
	static walkPOpen(stream,parent) {
		var pOpen = tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
		if(parent.tok == null) {
			return;
		}
		if(parent.isCIdent()) {
			tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
		} else {
			var _g = parent.tok;
			if(_g._hx_index == 0) {
				switch(_g.k._hx_index) {
				case 3:case 5:case 7:case 14:
					var _g1 = stream.token();
					switch(_g1._hx_index) {
					case 5:
						if(_g1.op._hx_index == 3) {
							return;
						}
						break;
					case 10:
						break;
					default:
						return;
					}
					break;
				default:
				}
			}
			tokentree_walk_WalkStatement.walkStatementContinue(stream,pOpen);
		}
	}
	static findQuestionParent(token) {
		var parent = token;
		while(parent != null && parent.tok != null) {
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 10:
					return parent;
				case 15:
					return parent;
				case 16:
					return parent;
				default:
				}
				break;
			case 5:
				var _g1 = _g.op;
				return parent;
			case 13:
				return null;
			case 16:
				if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(parent,haxeparser_TokenDef.BrClose) == null) {
					return null;
				}
				break;
			case 18:
				if(tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(parent,haxeparser_TokenDef.PClose) == null) {
					return null;
				}
				break;
			case 20:
				if(tokentree_walk_WalkQuestion.isTernary(parent)) {
					return parent;
				}
				return null;
			default:
			}
			parent = parent.parent;
		}
		return null;
	}
	static walkStatementContinueAfterSharp(stream,parent) {
		var _g = stream.token();
		if(_g._hx_index == 0) {
			switch(_g.k._hx_index) {
			case 15:case 16:
				var lastChild = parent.getLastChild();
				if(lastChild == null) {
					lastChild = parent;
				}
				tokentree_walk_WalkSwitch.walkSwitchCases(stream,lastChild);
				break;
			default:
			}
		}
	}
	static walkOpBool(stream,token) {
		var parent = token.parent;
		_hx_loop1: while(parent.tok != null) {
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					break _hx_loop1;
				case 3:case 5:case 10:case 24:case 28:
					break _hx_loop1;
				case 14:case 15:case 16:
					break _hx_loop1;
				default:
					token = parent;
					parent = parent.parent;
				}
				break;
			case 5:
				var _g1 = _g.op;
				switch(_g1._hx_index) {
				case 4:
					break _hx_loop1;
				case 14:case 15:
					token = parent.parent;
					break _hx_loop1;
				case 20:
					var _g2 = _g1.op;
					break _hx_loop1;
				default:
					token = parent;
					parent = parent.parent;
				}
				break;
			case 11:
				token = parent;
				break _hx_loop1;
			case 12:case 20:
				break _hx_loop1;
			case 18:
				if(token.is(haxeparser_TokenDef.POpen)) {
					token = parent;
				}
				break _hx_loop1;
			default:
				token = parent;
				parent = parent.parent;
			}
		}
		tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,token);
	}
	static walkOpAdd(stream,token) {
		var parent = token.parent;
		_hx_loop1: while(parent.tok != null) {
			var _g = parent.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					break _hx_loop1;
				case 3:case 5:case 10:case 24:case 28:
					break _hx_loop1;
				default:
					token = parent;
					parent = parent.parent;
				}
				break;
			case 5:
				var _g1 = _g.op;
				switch(_g1._hx_index) {
				case 0:case 3:
					token = parent.parent;
					break _hx_loop1;
				case 1:case 2:
					token = parent;
					parent = parent.parent;
					break;
				case 4:
					break _hx_loop1;
				case 20:
					var _g2 = _g1.op;
					break _hx_loop1;
				default:
					break _hx_loop1;
				}
				break;
			case 8:
				var _g3 = _g.s;
				break _hx_loop1;
			case 11:
				break _hx_loop1;
			case 12:case 20:
				break _hx_loop1;
			case 14:case 16:
				break _hx_loop1;
			case 18:
				var pClose = tokentree__$TokenTreeAccessHelper_TokenTreeAccessHelper_$Impl_$.firstOf(parent,haxeparser_TokenDef.PClose);
				if(pClose == null) {
					token = parent;
					break _hx_loop1;
				}
				token = parent;
				parent = parent.parent;
				break;
			default:
				token = parent;
				parent = parent.parent;
			}
		}
		tokentree_walk_WalkStatement.walkStatementWithoutSemicolon(stream,token);
	}
}
$hxClasses["tokentree.walk.WalkStatement"] = tokentree_walk_WalkStatement;
tokentree_walk_WalkStatement.__name__ = "tokentree.walk.WalkStatement";
class tokentree_walk_WalkSwitch {
	static walkSwitch(stream,parent) {
		var switchTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdSwitch));
		parent.addChild(switchTok);
		stream.applyTempStore(switchTok);
		tokentree_walk_WalkComment.walkComment(stream,switchTok);
		tokentree_walk_WalkStatement.walkStatement(stream,switchTok);
		tokentree_walk_WalkComment.walkComment(stream,switchTok);
		var _g = stream.token();
		if(_g._hx_index == 2) {
			var _g1 = _g.s;
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkSwitch.walkSwitchCases);
		}
		if(stream.is(haxeparser_TokenDef.BrOpen)) {
			var brOpen = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
			switchTok.addChild(brOpen);
			tokentree_walk_WalkSwitch.walkSwitchCases(stream,brOpen);
			brOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
		}
	}
	static walkSwitchCases(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 15:case 16:
					tokentree_walk_WalkSwitch.walkCase(stream,parent);
					break;
				default:
					tokentree_walk_WalkStatement.walkStatement(stream,parent);
				}
				break;
			case 2:
				var _g1 = _g.s;
				tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkSwitch.walkSwitchCases);
				break;
			case 6:
				var _g4 = _g.s;
				tokentree_walk_WalkComment.walkComment(stream,parent);
				break;
			case 7:
				var _g3 = _g.s;
				tokentree_walk_WalkComment.walkComment(stream,parent);
				break;
			case 17:
				break _hx_loop1;
			default:
				tokentree_walk_WalkStatement.walkStatement(stream,parent);
			}
		}
	}
	static walkCase(stream,parent) {
		tokentree_walk_WalkComment.walkComment(stream,parent);
		var caseTok = stream.consumeToken();
		parent.addChild(caseTok);
		tokentree_walk_WalkSwitch.walkCaseExpr(stream,caseTok);
		var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
		caseTok.addChild(dblDot);
		var progress = new tokentree_TokenStreamProgress(stream);
		while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 15:case 16:
					return;
				default:
					tokentree_walk_WalkStatement.walkStatement(stream,dblDot);
				}
				break;
			case 2:
				var _g1 = _g.s;
				tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkSwitch.walkSwitchCases);
				tokentree_walk_WalkSwitch.relocateSharpTree(parent,dblDot);
				break;
			case 6:
				var _g4 = _g.s;
				var _g2 = stream.peekNonCommentToken();
				if(_g2 != null) {
					if(_g2._hx_index == 0) {
						switch(_g2.k._hx_index) {
						case 15:case 16:
							return;
						default:
						}
					}
				}
				tokentree_walk_WalkComment.walkComment(stream,dblDot);
				break;
			case 7:
				var _g3 = _g.s;
				var _g5 = stream.peekNonCommentToken();
				if(_g5 != null) {
					if(_g5._hx_index == 0) {
						switch(_g5.k._hx_index) {
						case 15:case 16:
							return;
						default:
						}
					}
				}
				tokentree_walk_WalkComment.walkComment(stream,dblDot);
				break;
			case 16:
				tokentree_walk_WalkBlock.walkBlock(stream,dblDot);
				break;
			case 17:
				return;
			default:
				tokentree_walk_WalkStatement.walkStatement(stream,dblDot);
			}
		}
	}
	static relocateSharpTree(parent,dblDot) {
		var sharp = parent.getLastChild();
		if(sharp.children.length < 2) {
			return;
		}
		var body = sharp.children[1];
		if(body.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCase))) {
			return;
		}
		parent.children.pop();
		dblDot.addChild(sharp);
	}
	static walkCaseExpr(stream,parent) {
		var progress = new tokentree_TokenStreamProgress(stream);
		while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				if(_g.k._hx_index == 2) {
					var varTok = stream.consumeToken();
					parent.addChild(varTok);
					tokentree_walk_WalkStatement.walkStatement(stream,varTok);
				} else {
					tokentree_walk_WalkStatement.walkStatement(stream,parent);
				}
				break;
			case 13:
				var comma = stream.consumeToken();
				var child = parent.getLastChild();
				if(child == null) {
					child = parent;
				}
				child.addChild(comma);
				break;
			case 9:case 11:case 15:case 17:case 19:
				return;
			default:
				tokentree_walk_WalkStatement.walkStatement(stream,parent);
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkSwitch"] = tokentree_walk_WalkSwitch;
tokentree_walk_WalkSwitch.__name__ = "tokentree.walk.WalkSwitch";
class tokentree_walk_WalkTry {
	static walkTry(stream,parent) {
		var tryTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTry));
		parent.addChild(tryTok);
		stream.applyTempStore(tryTok);
		tokentree_walk_WalkBlock.walkBlock(stream,tryTok);
		var currentPos = stream.getStreamIndex();
		var progress = new tokentree_TokenStreamProgress(stream);
		var comments = [];
		while(stream.hasMore() && progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				if(_g.k._hx_index == 21) {
					var _g1 = 0;
					while(_g1 < comments.length) {
						var comment = comments[_g1];
						++_g1;
						tryTok.addChild(comment);
					}
					comments = [];
					tokentree_walk_WalkTry.walkCatch(stream,tryTok);
					currentPos = stream.getStreamIndex();
				} else {
					stream.rewindTo(currentPos);
					return;
				}
				break;
			case 6:
				var _g3 = _g.s;
				comments.push(stream.consumeToken());
				break;
			case 7:
				var _g2 = _g.s;
				comments.push(stream.consumeToken());
				break;
			default:
				stream.rewindTo(currentPos);
				return;
			}
		}
	}
	static walkCatch(stream,parent) {
		var catchTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCatch));
		parent.addChild(catchTok);
		tokentree_walk_WalkPOpen.walkPOpen(stream,catchTok);
		tokentree_walk_WalkComment.walkComment(stream,catchTok);
		tokentree_walk_WalkBlock.walkBlock(stream,catchTok);
	}
}
$hxClasses["tokentree.walk.WalkTry"] = tokentree_walk_WalkTry;
tokentree_walk_WalkTry.__name__ = "tokentree.walk.WalkTry";
class tokentree_walk_WalkType {
	static walkType(stream,parent) {
		var _g = stream.token();
		if(_g._hx_index == 0) {
			switch(_g.k._hx_index) {
			case 1:
				tokentree_walk_WalkClass.walkClass(stream,parent);
				break;
			case 26:
				tokentree_walk_WalkEnum.walkEnum(stream,parent);
				break;
			case 27:
				tokentree_walk_WalkInterface.walkInterface(stream,parent);
				break;
			case 31:
				tokentree_walk_WalkTypedef.walkTypedef(stream,parent);
				break;
			case 39:
				tokentree_walk_WalkAbstract.walkAbstract(stream,parent);
				break;
			default:
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkType"] = tokentree_walk_WalkType;
tokentree_walk_WalkType.__name__ = "tokentree.walk.WalkType";
class tokentree_walk_WalkTypeNameDef {
	static walkTypeNameDef(stream,parent) {
		tokentree_walk_WalkComment.walkComment(stream,parent);
		tokentree_walk_WalkAt.walkAts(stream);
		if(stream.is(haxeparser_TokenDef.Question)) {
			var questTok = stream.consumeTokenDef(haxeparser_TokenDef.Question);
			parent.addChild(questTok);
			parent = questTok;
			tokentree_walk_WalkComment.walkComment(stream,parent);
		}
		var name;
		var bAdd = true;
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 22:case 25:case 40:
				name = stream.consumeToken();
				break;
			default:
				name = stream.consumeToken();
			}
			break;
		case 1:
			var _g3 = _g.c;
			name = stream.consumeConst();
			break;
		case 2:
			var _g1 = _g.s;
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkStatement.walkStatement);
			if(!stream.hasMore()) {
				return parent.getFirstChild();
			}
			var _g2 = stream.token();
			if(_g2._hx_index == 1) {
				var _g11 = _g2.c;
				name = stream.consumeConst();
			} else {
				return parent.getFirstChild();
			}
			break;
		case 3:
			var _g4 = _g.s;
			name = stream.consumeToken();
			break;
		case 14:
			tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,parent);
			return parent.getFirstChild();
		case 16:
			tokentree_walk_WalkTypedefBody.walkTypedefBody(stream,parent);
			return parent.getFirstChild();
		case 18:
			name = tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
			if(stream.is(haxeparser_TokenDef.Question)) {
				tokentree_walk_WalkQuestion.walkQuestion(stream,name);
			}
			bAdd = false;
			break;
		default:
			name = stream.consumeToken();
		}
		stream.applyTempStore(name);
		if(bAdd) {
			parent.addChild(name);
		}
		tokentree_walk_WalkTypeNameDef.walkTypeNameDefContinue(stream,name);
		return name;
	}
	static walkTypeNameDefContinue(stream,parent) {
		tokentree_walk_WalkTypeNameDef.walkTypeNameDefComment(stream,parent);
		if(stream.is(haxeparser_TokenDef.Dot)) {
			var dot = stream.consumeTokenDef(haxeparser_TokenDef.Dot);
			parent.addChild(dot);
			tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,dot);
			return;
		}
		if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt))) {
			tokentree_walk_WalkLtGt.walkLtGt(stream,parent);
		}
		if(stream.is(haxeparser_TokenDef.Arrow)) {
			var arrow = stream.consumeTokenDef(haxeparser_TokenDef.Arrow);
			parent.addChild(arrow);
			tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,arrow);
			return;
		}
		if(stream.is(haxeparser_TokenDef.BkOpen)) {
			tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,parent);
		}
		tokentree_walk_WalkTypeNameDef.walkTypeNameDefComment(stream,parent);
	}
	static walkTypeNameDefComment(stream,parent) {
		var currentPos = stream.getStreamIndex();
		var progress = new tokentree_TokenStreamProgress(stream);
		var comments = [];
		while(stream.hasMore() && progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 5:
				var _g1 = _g.op;
				var _g2 = 0;
				while(_g2 < comments.length) {
					var comment = comments[_g2];
					++_g2;
					parent.addChild(comment);
				}
				return;
			case 6:
				var _g3 = _g.s;
				comments.push(stream.consumeToken());
				break;
			case 7:
				var _g21 = _g.s;
				comments.push(stream.consumeToken());
				break;
			case 9:case 10:case 11:case 13:case 14:case 16:case 18:
				var _g4 = 0;
				while(_g4 < comments.length) {
					var comment1 = comments[_g4];
					++_g4;
					parent.addChild(comment1);
				}
				return;
			default:
				stream.rewindTo(currentPos);
				return;
			}
		}
	}
}
$hxClasses["tokentree.walk.WalkTypeNameDef"] = tokentree_walk_WalkTypeNameDef;
tokentree_walk_WalkTypeNameDef.__name__ = "tokentree.walk.WalkTypeNameDef";
class tokentree_walk_WalkTypedef {
	static walkTypedef(stream,parent) {
		var typeTok = stream.consumeToken();
		parent.addChild(typeTok);
		var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
		stream.applyTempStore(name);
		if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
			var assign = stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
			name.addChild(assign);
			name = assign;
		}
		tokentree_walk_WalkTypedefBody.walkTypedefBody(stream,name);
	}
}
$hxClasses["tokentree.walk.WalkTypedef"] = tokentree_walk_WalkTypedef;
tokentree_walk_WalkTypedef.__name__ = "tokentree.walk.WalkTypedef";
class tokentree_walk_WalkTypedefBody {
	static walkTypedefBody(stream,parent) {
		if(stream.is(haxeparser_TokenDef.BrOpen)) {
			var openTok = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
			parent.addChild(openTok);
			tokentree_walk_WalkTypedefBody.walkTypedefCurlyBody(stream,openTok);
			openTok.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
		} else {
			tokentree_walk_WalkTypedefBody.walkTypedefAlias(stream,parent);
		}
		if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd))) {
			var and = stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd));
			parent.getLastChild().addChild(and);
			tokentree_walk_WalkTypedefBody.walkTypedefBody(stream,parent);
		}
		if(stream.is(haxeparser_TokenDef.Arrow)) {
			tokentree_walk_WalkStatement.walkStatement(stream,parent);
		}
	}
	static walkTypedefCurlyBody(stream,openTok) {
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 0:
					tokentree_walk_WalkFunction.walkFunction(stream,openTok);
					break;
				case 2:
					tokentree_walk_WalkVar.walkVar(stream,openTok);
					break;
				case 17:case 18:case 19:case 25:case 30:case 32:case 34:case 40:
					stream.consumeToTempStore();
					break;
				case 41:
					tokentree_walk_WalkFinal.walkFinal(stream,openTok);
					break;
				default:
					tokentree_walk_WalkFieldDef.walkFieldDef(stream,openTok);
				}
				break;
			case 1:
				var _g4 = _g.c;
				if(_g4._hx_index == 3) {
					if(_g4.s == "final") {
						tokentree_walk_WalkFinal.walkFinal(stream,openTok);
					} else {
						tokentree_walk_WalkFieldDef.walkFieldDef(stream,openTok);
					}
				} else {
					tokentree_walk_WalkFieldDef.walkFieldDef(stream,openTok);
				}
				break;
			case 2:
				var _g2 = _g.s;
				tokentree_walk_WalkSharp.walkSharp(stream,openTok,tokentree_walk_WalkTypedefBody.walkTypedefCurlyBody);
				break;
			case 5:
				if(_g.op._hx_index == 7) {
					tokentree_walk_WalkTypedefBody.walkStructureExtension(stream,openTok);
				} else {
					tokentree_walk_WalkFieldDef.walkFieldDef(stream,openTok);
				}
				break;
			case 6:
				var _g7 = _g.s;
				tokentree_walk_WalkComment.walkComment(stream,openTok);
				break;
			case 7:
				var _g6 = _g.s;
				tokentree_walk_WalkComment.walkComment(stream,openTok);
				break;
			case 17:
				break _hx_loop1;
			case 21:
				stream.addToTempStore(tokentree_walk_WalkAt.walkAt(stream));
				break;
			default:
				tokentree_walk_WalkFieldDef.walkFieldDef(stream,openTok);
			}
		}
		var tempStore = stream.getTempStore();
		if(tempStore.length > 0) {
			switch(tokentree_TokenStream.MODE._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("invalid token tree structure - found:" + ("" + Std.string(tempStore)));
			case 1:
				stream.applyTempStore(openTok);
				break;
			}
		}
	}
	static walkTypedefAlias(stream,parent) {
		var newParent;
		if(stream.is(haxeparser_TokenDef.POpen)) {
			newParent = tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
		} else {
			newParent = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,parent);
		}
		if(stream.is(haxeparser_TokenDef.Arrow)) {
			var arrowTok = stream.consumeTokenDef(haxeparser_TokenDef.Arrow);
			newParent.addChild(arrowTok);
			tokentree_walk_WalkTypedefBody.walkTypedefAlias(stream,arrowTok);
		}
		if(stream.is(haxeparser_TokenDef.Semicolon)) {
			newParent.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Semicolon));
		}
	}
	static walkStructureExtension(stream,parent) {
		var gt = stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
		parent.addChild(gt);
		var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,parent);
		gt.addChild(name);
		if(stream.is(haxeparser_TokenDef.Comma)) {
			name.addChild(stream.consumeToken());
		}
	}
}
$hxClasses["tokentree.walk.WalkTypedefBody"] = tokentree_walk_WalkTypedefBody;
tokentree_walk_WalkTypedefBody.__name__ = "tokentree.walk.WalkTypedefBody";
class tokentree_walk_WalkVar {
	static walkVar(stream,parent) {
		var name = null;
		var varTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar));
		parent.addChild(varTok);
		tokentree_walk_WalkComment.walkComment(stream,parent);
		var progress = new tokentree_TokenStreamProgress(stream);
		while(progress.streamHasChanged()) {
			if(stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar))) {
				return;
			}
			tokentree_walk_WalkComment.walkComment(stream,parent);
			if(stream.token()._hx_index == 21) {
				tokentree_walk_WalkAt.walkAts(stream);
			}
			tokentree_walk_WalkComment.walkComment(stream,parent);
			var nameParent = varTok;
			if(stream.is(haxeparser_TokenDef.Question)) {
				nameParent = stream.consumeToken();
				varTok.addChild(nameParent);
			}
			name = stream.consumeConstIdent();
			nameParent.addChild(name);
			stream.applyTempStore(name);
			tokentree_walk_WalkComment.walkComment(stream,name);
			if(stream.is(haxeparser_TokenDef.POpen)) {
				tokentree_walk_WalkPOpen.walkPOpen(stream,name);
			}
			if(stream.is(haxeparser_TokenDef.DblDot)) {
				var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
				name.addChild(dblDot);
				tokentree_walk_WalkTypedefBody.walkTypedefAlias(stream,dblDot);
			}
			if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
				tokentree_walk_WalkStatement.walkStatement(stream,name);
			}
			if(stream.is(haxeparser_TokenDef.Comma)) {
				var comma = stream.consumeTokenDef(haxeparser_TokenDef.Comma);
				name.addChild(comma);
				continue;
			}
			break;
		}
		if(stream.is(haxeparser_TokenDef.Semicolon)) {
			name.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Semicolon));
		}
	}
}
$hxClasses["tokentree.walk.WalkVar"] = tokentree_walk_WalkVar;
tokentree_walk_WalkVar.__name__ = "tokentree.walk.WalkVar";
class tokentree_walk_WalkWhile {
	static walkWhile(stream,parent) {
		var whileTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdWhile));
		parent.addChild(whileTok);
		stream.applyTempStore(whileTok);
		tokentree_walk_WalkComment.walkComment(stream,whileTok);
		tokentree_walk_WalkStatement.walkStatement(stream,whileTok);
		tokentree_walk_WalkComment.walkComment(stream,whileTok);
		tokentree_walk_WalkBlock.walkBlock(stream,whileTok);
	}
}
$hxClasses["tokentree.walk.WalkWhile"] = tokentree_walk_WalkWhile;
tokentree_walk_WalkWhile.__name__ = "tokentree.walk.WalkWhile";
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
js_Boot.__toStr = ({ }).toString;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
codesamples_SampleBase.DATA_FIELD_PATH = "field-path";
codesamples_CommonSamples.__meta__ = { obj : { sectionName : ["Common samples"]}, fields : { allman_curlies : { codeSampleName : ["allman.curlies"], keywords : [["allman","curlies","probably","most","searched","option","formatter","note","lineends","leftcurly","affects","left","there","specialised","options","different","curly","places","blockcurly","objectliteralcurly","haxeflixel","style","sample","codesamples","commonsamples","haxeflixel_style","both","emptycurly","break"]]}, haxeflixel_style : { codeSampleName : ["haxeflixel.style"], keywords : [["haxeflixel","style","formatter","configuration","used","lineends","leftcurly","both","rightcurly","objectliteralcurly","after","sameline","ifelse","next","dowhile","trybody","trycatch"]]}, indentation_with_space : { codeSampleName : ["indentation.with.space"], keywords : [["indentation","with","space","character","takes","string","that","either","number","literal","spaces","text","tabs"]]}}};
codesamples_EmptylinesSamples.__meta__ = { obj : { sectionName : ["Emptylines samples"]}, fields : { import_and_using_emptylines : { codeSampleName : ["import.and.using.emptylines"], keywords : [["import","using","emptylines","showcases","different","empty","lines","settings","imports","goes","great","with","vscode","organise","code","action","importandusing","betweenimportslevel","firstlevelpackage","betweenimports","beforeusing","maxanywhereinfile"]]}}};
codesamples_IndentationSamples.__meta__ = { obj : { sectionName : ["Indentation samples"]}, fields : { trailing_whitespace : { codeSampleName : ["trailing.whitespace"], keywords : [["trailing","whitespace","adds","empty","lines","copying","indentation","from","previous","line","trailingwhitespace","true"]]}}};
codesamples_LineendsSamples.__meta__ = { obj : { sectionName : ["Lineends samples"]}};
codesamples_SamelineSamples.__meta__ = { obj : { sectionName : ["Sameline samples"]}, fields : { blockless_function_body : { codeSampleName : ["blockless.function.body"], keywords : [["blockless","function","body","keep","tries","linebreaks","from","input","source","sameline","functionbody","same","anonfunctionbody"]]}}};
codesamples_WhitespaceSamples.__meta__ = { obj : { sectionName : ["Whitespace samples"]}, fields : { colon_whitespace : { codeSampleName : ["colon.whitespace"], keywords : [["colon","whitespace","note","policies","overruled","code","parts","preceeding","following","location","because","these","might","have","that","contradict","their","neighbours","colonpolicy","none","casecolonpolicy","onlyafter","objectfieldcolonpolicy","after","typehintcolonpolicy","typecheckcolonpolicy","around","ternarypolicy"]]}, conditional_parens_detailed : { codeSampleName : ["conditional.parens.detailed"], keywords : [["conditional","parens","detailed","following","whitespace","settings","were","added","version","childs","parenconfig","catchparens","catch","expr","ifconditionparens","sharpconditionparens","switchconditionparens","switch","whileconditionparens","while","same","structure","conditionparens","short","codesamples","whitespacesamples","conditional_parens_short","allow","finer","control","over","each","location","default","null","which","means","applies","locations","also","only","have","values","those","where","want","formatter","behave","differently","note","using","removeinnerwhenempty","technically","possible","since","code","with","empty","condtion","expression","doesn","make","sense","probably","compile","there","much","openingpolicy","onlyafter","closingpolicy","before"]]}, conditional_parens_short : { codeSampleName : ["conditional.parens.short"], keywords : [["conditional","parens","short","whitespace","policies","parenconfig","well","bracesconfig","curly","braces","data","structure","that","three","fields","each","their","locations","openingpolicy","policy","opening","closingpolicy","closing","removeinnerwhenempty","true","when","want","remove","inner","curlies","empty","following","element","being","either","none","before","after","nonebefore","never","onlybefore","only","noneafter","onlyafter","around","note","overruled","code","parts","preceeding","location","because","these","might","have","contradict","neighbours","conditionparens"]]}, function_parens : { codeSampleName : ["function.parens"], keywords : [["function","parens","conditional","short","codesamples","whitespacesamples","conditional_parens_short","details","about","structure","values","note","whitespace","policies","overruled","code","parts","preceeding","following","location","because","these","might","have","that","contradict","their","neighbours","parenconfig","funcparamparens","openingpolicy","before","closingpolicy","none","removeinnerwhenempty","true","anonfuncparamparens","onlyafter"]]}, function_types_and_arrows : { codeSampleName : ["function.types.and.arrows"], keywords : [["function","types","arrows","note","whitespace","policies","overruled","code","parts","preceeding","following","location","because","these","might","have","that","contradict","their","neighbours","arrowfunctionspolicy","around","functiontypehaxe","policy","none"]]}}};
codesamples_WrappingSamples.__meta__ = { obj : { sectionName : ["Wrapping samples"]}, fields : { array_matrix_wrapping : { codeSampleName : ["array.matrix.wrapping"], keywords : [["array","matrix","wrapping","arrays","layout","only","works","that","have","equal","number","elements","line","your","input","source","code","should","already","shape","note","equalnumber","implemented","arraymatrixwrap","matrixwrapwithalign","arraywrap","defaultwrap","fillline","defaultlocation","afterlast","maxlinelength"]]}, case_pattern_wrapping : { codeSampleName : ["case.pattern.wrapping"], keywords : [["case","pattern","wrapping","large","amounts","patterns","note","equalnumber","implemented","casepattern","defaultwrap","fillline","defaultlocation","beforelast","maxlinelength"]]}, method_chain_wrapping : { codeSampleName : ["method.chain.wrapping"], keywords : [["method","chain","wrapping","chains","calls","note","equalnumber","implemented","methodchain","defaultwrap","oneperline","defaultlocation","afterlast","rules","maxlinelength"]]}, operator_add_chain_wrapping : { codeSampleName : ["operator.add.chain.wrapping"], keywords : [["operator","chain","wrapping","chains","note","equalnumber","implemented","opaddsubchain","defaultwrap","fillline","defaultlocation","beforelast","rules","maxlinelength"]]}}};
doc_Docs.__meta__ = { obj : { sectionName : ["Documentation"]}, fields : { compile_dev_version : { docName : ["compile.dev.version"], keywords : [["compile","version","command","line","haxe","clone","https","github","haxecheckstyle","formatter","install","download","buildall","hxml","neko","nodejs","java","json","schema","buildcpp","haxe_libraries","_libraries","language","server","vshaxe","languageserver","tokentree","build","target","vscode","extensions","nadako","vshaxe_version","replace","with","actual","assuming","have","installed","restart","note","will","whenever","there","marketplace","release","since","wipe","your","folder"]]}}};
formatter_FormatStats.totalLinesOrig = 0;
formatter_FormatStats.totalLinesFormatted = 0;
hxparse_LexEngine.EMPTY = [];
hxparse_LexEngine.ALL_CHARS = [new hxparse__$LexEngine_CharRange(0,255)];
haxeparser_HaxeLexer.keywords = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = haxeparser_Keyword.KwdAbstract;
		if(__map_reserved["abstract"] != null) {
			_g.setReserved("abstract",value);
		} else {
			_g.h["abstract"] = value;
		}
	}
	{
		var value1 = haxeparser_Keyword.KwdBreak;
		if(__map_reserved["break"] != null) {
			_g.setReserved("break",value1);
		} else {
			_g.h["break"] = value1;
		}
	}
	{
		var value2 = haxeparser_Keyword.KwdCase;
		if(__map_reserved["case"] != null) {
			_g.setReserved("case",value2);
		} else {
			_g.h["case"] = value2;
		}
	}
	{
		var value3 = haxeparser_Keyword.KwdCast;
		if(__map_reserved["cast"] != null) {
			_g.setReserved("cast",value3);
		} else {
			_g.h["cast"] = value3;
		}
	}
	{
		var value4 = haxeparser_Keyword.KwdCatch;
		if(__map_reserved["catch"] != null) {
			_g.setReserved("catch",value4);
		} else {
			_g.h["catch"] = value4;
		}
	}
	{
		var value5 = haxeparser_Keyword.KwdClass;
		if(__map_reserved["class"] != null) {
			_g.setReserved("class",value5);
		} else {
			_g.h["class"] = value5;
		}
	}
	{
		var value6 = haxeparser_Keyword.KwdContinue;
		if(__map_reserved["continue"] != null) {
			_g.setReserved("continue",value6);
		} else {
			_g.h["continue"] = value6;
		}
	}
	{
		var value7 = haxeparser_Keyword.KwdDefault;
		if(__map_reserved["default"] != null) {
			_g.setReserved("default",value7);
		} else {
			_g.h["default"] = value7;
		}
	}
	{
		var value8 = haxeparser_Keyword.KwdDo;
		if(__map_reserved["do"] != null) {
			_g.setReserved("do",value8);
		} else {
			_g.h["do"] = value8;
		}
	}
	{
		var value9 = haxeparser_Keyword.KwdDynamic;
		if(__map_reserved["dynamic"] != null) {
			_g.setReserved("dynamic",value9);
		} else {
			_g.h["dynamic"] = value9;
		}
	}
	{
		var value10 = haxeparser_Keyword.KwdElse;
		if(__map_reserved["else"] != null) {
			_g.setReserved("else",value10);
		} else {
			_g.h["else"] = value10;
		}
	}
	{
		var value11 = haxeparser_Keyword.KwdEnum;
		if(__map_reserved["enum"] != null) {
			_g.setReserved("enum",value11);
		} else {
			_g.h["enum"] = value11;
		}
	}
	{
		var value12 = haxeparser_Keyword.KwdExtends;
		if(__map_reserved["extends"] != null) {
			_g.setReserved("extends",value12);
		} else {
			_g.h["extends"] = value12;
		}
	}
	{
		var value13 = haxeparser_Keyword.KwdExtern;
		if(__map_reserved["extern"] != null) {
			_g.setReserved("extern",value13);
		} else {
			_g.h["extern"] = value13;
		}
	}
	{
		var value14 = haxeparser_Keyword.KwdFalse;
		if(__map_reserved["false"] != null) {
			_g.setReserved("false",value14);
		} else {
			_g.h["false"] = value14;
		}
	}
	{
		var value15 = haxeparser_Keyword.KwdFinal;
		if(__map_reserved["final"] != null) {
			_g.setReserved("final",value15);
		} else {
			_g.h["final"] = value15;
		}
	}
	{
		var value16 = haxeparser_Keyword.KwdFor;
		if(__map_reserved["for"] != null) {
			_g.setReserved("for",value16);
		} else {
			_g.h["for"] = value16;
		}
	}
	{
		var value17 = haxeparser_Keyword.KwdFunction;
		if(__map_reserved["function"] != null) {
			_g.setReserved("function",value17);
		} else {
			_g.h["function"] = value17;
		}
	}
	{
		var value18 = haxeparser_Keyword.KwdIf;
		if(__map_reserved["if"] != null) {
			_g.setReserved("if",value18);
		} else {
			_g.h["if"] = value18;
		}
	}
	{
		var value19 = haxeparser_Keyword.KwdImplements;
		if(__map_reserved["implements"] != null) {
			_g.setReserved("implements",value19);
		} else {
			_g.h["implements"] = value19;
		}
	}
	{
		var value20 = haxeparser_Keyword.KwdImport;
		if(__map_reserved["import"] != null) {
			_g.setReserved("import",value20);
		} else {
			_g.h["import"] = value20;
		}
	}
	{
		var value21 = haxeparser_Keyword.KwdInline;
		if(__map_reserved["inline"] != null) {
			_g.setReserved("inline",value21);
		} else {
			_g.h["inline"] = value21;
		}
	}
	{
		var value22 = haxeparser_Keyword.KwdInterface;
		if(__map_reserved["interface"] != null) {
			_g.setReserved("interface",value22);
		} else {
			_g.h["interface"] = value22;
		}
	}
	{
		var value23 = haxeparser_Keyword.KwdMacro;
		if(__map_reserved["macro"] != null) {
			_g.setReserved("macro",value23);
		} else {
			_g.h["macro"] = value23;
		}
	}
	{
		var value24 = haxeparser_Keyword.KwdNew;
		if(__map_reserved["new"] != null) {
			_g.setReserved("new",value24);
		} else {
			_g.h["new"] = value24;
		}
	}
	{
		var value25 = haxeparser_Keyword.KwdNull;
		if(__map_reserved["null"] != null) {
			_g.setReserved("null",value25);
		} else {
			_g.h["null"] = value25;
		}
	}
	{
		var value26 = haxeparser_Keyword.KwdOverride;
		if(__map_reserved["override"] != null) {
			_g.setReserved("override",value26);
		} else {
			_g.h["override"] = value26;
		}
	}
	{
		var value27 = haxeparser_Keyword.KwdPackage;
		if(__map_reserved["package"] != null) {
			_g.setReserved("package",value27);
		} else {
			_g.h["package"] = value27;
		}
	}
	{
		var value28 = haxeparser_Keyword.KwdPrivate;
		if(__map_reserved["private"] != null) {
			_g.setReserved("private",value28);
		} else {
			_g.h["private"] = value28;
		}
	}
	{
		var value29 = haxeparser_Keyword.KwdPublic;
		if(__map_reserved["public"] != null) {
			_g.setReserved("public",value29);
		} else {
			_g.h["public"] = value29;
		}
	}
	{
		var value30 = haxeparser_Keyword.KwdReturn;
		if(__map_reserved["return"] != null) {
			_g.setReserved("return",value30);
		} else {
			_g.h["return"] = value30;
		}
	}
	{
		var value31 = haxeparser_Keyword.KwdStatic;
		if(__map_reserved["static"] != null) {
			_g.setReserved("static",value31);
		} else {
			_g.h["static"] = value31;
		}
	}
	{
		var value32 = haxeparser_Keyword.KwdSwitch;
		if(__map_reserved["switch"] != null) {
			_g.setReserved("switch",value32);
		} else {
			_g.h["switch"] = value32;
		}
	}
	{
		var value33 = haxeparser_Keyword.KwdThis;
		if(__map_reserved["this"] != null) {
			_g.setReserved("this",value33);
		} else {
			_g.h["this"] = value33;
		}
	}
	{
		var value34 = haxeparser_Keyword.KwdThrow;
		if(__map_reserved["throw"] != null) {
			_g.setReserved("throw",value34);
		} else {
			_g.h["throw"] = value34;
		}
	}
	{
		var value35 = haxeparser_Keyword.KwdTrue;
		if(__map_reserved["true"] != null) {
			_g.setReserved("true",value35);
		} else {
			_g.h["true"] = value35;
		}
	}
	{
		var value36 = haxeparser_Keyword.KwdTry;
		if(__map_reserved["try"] != null) {
			_g.setReserved("try",value36);
		} else {
			_g.h["try"] = value36;
		}
	}
	{
		var value37 = haxeparser_Keyword.KwdTypedef;
		if(__map_reserved["typedef"] != null) {
			_g.setReserved("typedef",value37);
		} else {
			_g.h["typedef"] = value37;
		}
	}
	{
		var value38 = haxeparser_Keyword.KwdUntyped;
		if(__map_reserved["untyped"] != null) {
			_g.setReserved("untyped",value38);
		} else {
			_g.h["untyped"] = value38;
		}
	}
	{
		var value39 = haxeparser_Keyword.KwdUsing;
		if(__map_reserved["using"] != null) {
			_g.setReserved("using",value39);
		} else {
			_g.h["using"] = value39;
		}
	}
	{
		var value40 = haxeparser_Keyword.KwdVar;
		if(__map_reserved["var"] != null) {
			_g.setReserved("var",value40);
		} else {
			_g.h["var"] = value40;
		}
	}
	{
		var value41 = haxeparser_Keyword.KwdWhile;
		if(__map_reserved["while"] != null) {
			_g.setReserved("while",value41);
		} else {
			_g.h["while"] = value41;
		}
	}
	$r = _g;
	return $r;
}(this));
haxeparser_HaxeLexer.buf = new StringBuf();
haxeparser_HaxeLexer.tok = hxparse_Lexer.buildRuleset([{ rule : "", func : function(lexer) {
	return haxeparser_HaxeLexer.mk(lexer,haxeparser_TokenDef.Eof);
}},{ rule : "[\r\n\t ]+", func : function(lexer1) {
	return lexer1.token(haxeparser_HaxeLexer.tok);
}},{ rule : "0x[0-9a-fA-F]+", func : function(lexer2) {
	return haxeparser_HaxeLexer.mk(lexer2,haxeparser_TokenDef.Const(haxe_macro_Constant.CInt(lexer2.current)));
}},{ rule : "([1-9][0-9]*)|0", func : function(lexer3) {
	return haxeparser_HaxeLexer.mk(lexer3,haxeparser_TokenDef.Const(haxe_macro_Constant.CInt(lexer3.current)));
}},{ rule : "(([1-9][0-9]*)|0)(\\.[0-9]+)", func : function(lexer4) {
	return haxeparser_HaxeLexer.mk(lexer4,haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat(lexer4.current)));
}},{ rule : "\\.[0-9]+", func : function(lexer5) {
	return haxeparser_HaxeLexer.mk(lexer5,haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat(lexer5.current)));
}},{ rule : "(([1-9][0-9]*)|0)([eE][\\+\\-]?[0-9]+)", func : function(lexer6) {
	return haxeparser_HaxeLexer.mk(lexer6,haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat(lexer6.current)));
}},{ rule : "(([1-9][0-9]*)|0)(\\.[0-9]*[eE][\\+\\-]?[0-9]+)", func : function(lexer7) {
	return haxeparser_HaxeLexer.mk(lexer7,haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat(lexer7.current)));
}},{ rule : "(([1-9][0-9]*)|0)(\\.\\.\\.)", func : function(lexer8) {
	return haxeparser_HaxeLexer.mk(lexer8,haxeparser_TokenDef.IntInterval(HxOverrides.substr(lexer8.current,0,-3)));
}},{ rule : "//[^\n\r]*", func : function(lexer9) {
	return haxeparser_HaxeLexer.mk(lexer9,haxeparser_TokenDef.CommentLine(HxOverrides.substr(lexer9.current,2,null)));
}},{ rule : "+\\+", func : function(lexer10) {
	return haxeparser_HaxeLexer.mk(lexer10,haxeparser_TokenDef.Unop(haxe_macro_Unop.OpIncrement));
}},{ rule : "--", func : function(lexer11) {
	return haxeparser_HaxeLexer.mk(lexer11,haxeparser_TokenDef.Unop(haxe_macro_Unop.OpDecrement));
}},{ rule : "~", func : function(lexer12) {
	return haxeparser_HaxeLexer.mk(lexer12,haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNegBits));
}},{ rule : "%=", func : function(lexer13) {
	return haxeparser_HaxeLexer.mk(lexer13,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMod)));
}},{ rule : "&=", func : function(lexer14) {
	return haxeparser_HaxeLexer.mk(lexer14,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAnd)));
}},{ rule : "|=", func : function(lexer15) {
	return haxeparser_HaxeLexer.mk(lexer15,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpOr)));
}},{ rule : "^=", func : function(lexer16) {
	return haxeparser_HaxeLexer.mk(lexer16,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpXor)));
}},{ rule : "+=", func : function(lexer17) {
	return haxeparser_HaxeLexer.mk(lexer17,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAdd)));
}},{ rule : "-=", func : function(lexer18) {
	return haxeparser_HaxeLexer.mk(lexer18,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpSub)));
}},{ rule : "*=", func : function(lexer19) {
	return haxeparser_HaxeLexer.mk(lexer19,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMult)));
}},{ rule : "/=", func : function(lexer20) {
	return haxeparser_HaxeLexer.mk(lexer20,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpDiv)));
}},{ rule : "<<=", func : function(lexer21) {
	return haxeparser_HaxeLexer.mk(lexer21,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShl)));
}},{ rule : "==", func : function(lexer22) {
	return haxeparser_HaxeLexer.mk(lexer22,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpEq));
}},{ rule : "!=", func : function(lexer23) {
	return haxeparser_HaxeLexer.mk(lexer23,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpNotEq));
}},{ rule : "<=", func : function(lexer24) {
	return haxeparser_HaxeLexer.mk(lexer24,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLte));
}},{ rule : "&&", func : function(lexer25) {
	return haxeparser_HaxeLexer.mk(lexer25,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolAnd));
}},{ rule : "|\\|", func : function(lexer26) {
	return haxeparser_HaxeLexer.mk(lexer26,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolOr));
}},{ rule : "<<", func : function(lexer27) {
	return haxeparser_HaxeLexer.mk(lexer27,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShl));
}},{ rule : "->", func : function(lexer28) {
	return haxeparser_HaxeLexer.mk(lexer28,haxeparser_TokenDef.Arrow);
}},{ rule : "\\.\\.\\.", func : function(lexer29) {
	return haxeparser_HaxeLexer.mk(lexer29,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpInterval));
}},{ rule : "=>", func : function(lexer30) {
	return haxeparser_HaxeLexer.mk(lexer30,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpArrow));
}},{ rule : "!", func : function(lexer31) {
	return haxeparser_HaxeLexer.mk(lexer31,haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNot));
}},{ rule : "<", func : function(lexer32) {
	return haxeparser_HaxeLexer.mk(lexer32,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt));
}},{ rule : ">", func : function(lexer33) {
	return haxeparser_HaxeLexer.mk(lexer33,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
}},{ rule : ";", func : function(lexer34) {
	return haxeparser_HaxeLexer.mk(lexer34,haxeparser_TokenDef.Semicolon);
}},{ rule : ":", func : function(lexer35) {
	return haxeparser_HaxeLexer.mk(lexer35,haxeparser_TokenDef.DblDot);
}},{ rule : ",", func : function(lexer36) {
	return haxeparser_HaxeLexer.mk(lexer36,haxeparser_TokenDef.Comma);
}},{ rule : "\\.", func : function(lexer37) {
	return haxeparser_HaxeLexer.mk(lexer37,haxeparser_TokenDef.Dot);
}},{ rule : "%", func : function(lexer38) {
	return haxeparser_HaxeLexer.mk(lexer38,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMod));
}},{ rule : "&", func : function(lexer39) {
	return haxeparser_HaxeLexer.mk(lexer39,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd));
}},{ rule : "|", func : function(lexer40) {
	return haxeparser_HaxeLexer.mk(lexer40,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpOr));
}},{ rule : "^", func : function(lexer41) {
	return haxeparser_HaxeLexer.mk(lexer41,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpXor));
}},{ rule : "+", func : function(lexer42) {
	return haxeparser_HaxeLexer.mk(lexer42,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAdd));
}},{ rule : "*", func : function(lexer43) {
	return haxeparser_HaxeLexer.mk(lexer43,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMult));
}},{ rule : "/", func : function(lexer44) {
	return haxeparser_HaxeLexer.mk(lexer44,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpDiv));
}},{ rule : "-", func : function(lexer45) {
	return haxeparser_HaxeLexer.mk(lexer45,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpSub));
}},{ rule : "=", func : function(lexer46) {
	return haxeparser_HaxeLexer.mk(lexer46,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
}},{ rule : "in", func : function(lexer47) {
	return haxeparser_HaxeLexer.mk(lexer47,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpIn));
}},{ rule : "[", func : function(lexer48) {
	return haxeparser_HaxeLexer.mk(lexer48,haxeparser_TokenDef.BkOpen);
}},{ rule : "]", func : function(lexer49) {
	return haxeparser_HaxeLexer.mk(lexer49,haxeparser_TokenDef.BkClose);
}},{ rule : "{", func : function(lexer50) {
	return haxeparser_HaxeLexer.mk(lexer50,haxeparser_TokenDef.BrOpen);
}},{ rule : "}", func : function(lexer51) {
	return haxeparser_HaxeLexer.mk(lexer51,haxeparser_TokenDef.BrClose);
}},{ rule : "\\(", func : function(lexer52) {
	return haxeparser_HaxeLexer.mk(lexer52,haxeparser_TokenDef.POpen);
}},{ rule : "\\)", func : function(lexer53) {
	return haxeparser_HaxeLexer.mk(lexer53,haxeparser_TokenDef.PClose);
}},{ rule : "?", func : function(lexer54) {
	return haxeparser_HaxeLexer.mk(lexer54,haxeparser_TokenDef.Question);
}},{ rule : "@", func : function(lexer55) {
	return haxeparser_HaxeLexer.mk(lexer55,haxeparser_TokenDef.At);
}},{ rule : "\"", func : function(lexer56) {
	haxeparser_HaxeLexer.buf = new StringBuf();
	var pmin = new hxparse_Position(lexer56.source,lexer56.pos - lexer56.current.length,lexer56.pos);
	var pmax;
	try {
		pmax = lexer56.token(haxeparser_HaxeLexer.string);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(((e1) instanceof haxe_io_Eof)) {
			var e2 = e1;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedString,haxeparser_HaxeLexer.mkPos(pmin)));
		} else {
			throw e;
		}
	}
	var token = haxeparser_HaxeLexer.mk(lexer56,haxeparser_TokenDef.Const(haxe_macro_Constant.CString(haxeparser_HaxeLexer.unescape(haxeparser_HaxeLexer.buf.b,haxeparser_HaxeLexer.mkPos(pmin)))));
	token.pos.min = pmin.pmin;
	return token;
}},{ rule : "'", func : function(lexer57) {
	haxeparser_HaxeLexer.buf = new StringBuf();
	var pmin1 = new hxparse_Position(lexer57.source,lexer57.pos - lexer57.current.length,lexer57.pos);
	var pmax1;
	try {
		pmax1 = lexer57.token(haxeparser_HaxeLexer.string2);
	} catch( e3 ) {
		haxe_CallStack.lastException = e3;
		var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
		if(((e4) instanceof haxe_io_Eof)) {
			var e5 = e4;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedString,haxeparser_HaxeLexer.mkPos(pmin1)));
		} else {
			throw e3;
		}
	}
	var token1 = haxeparser_HaxeLexer.mk(lexer57,haxeparser_TokenDef.Const(haxe_macro_Constant.CString(haxeparser_HaxeLexer.unescape(haxeparser_HaxeLexer.buf.b,haxeparser_HaxeLexer.mkPos(pmin1)))));
	token1.pos.min = pmin1.pmin;
	return token1;
}},{ rule : "~/", func : function(lexer58) {
	haxeparser_HaxeLexer.buf = new StringBuf();
	var pmin2 = new hxparse_Position(lexer58.source,lexer58.pos - lexer58.current.length,lexer58.pos);
	var info;
	try {
		info = lexer58.token(haxeparser_HaxeLexer.regexp);
	} catch( e6 ) {
		haxe_CallStack.lastException = e6;
		var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
		if(((e7) instanceof haxe_io_Eof)) {
			var e8 = e7;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedRegExp,haxeparser_HaxeLexer.mkPos(pmin2)));
		} else {
			throw e6;
		}
	}
	var token2 = haxeparser_HaxeLexer.mk(lexer58,haxeparser_TokenDef.Const(haxe_macro_Constant.CRegexp(haxeparser_HaxeLexer.buf.b,info.opt)));
	token2.pos.min = pmin2.pmin;
	return token2;
}},{ rule : "/\\*", func : function(lexer59) {
	haxeparser_HaxeLexer.buf = new StringBuf();
	var pmin3 = new hxparse_Position(lexer59.source,lexer59.pos - lexer59.current.length,lexer59.pos);
	var pmax2;
	try {
		pmax2 = lexer59.token(haxeparser_HaxeLexer.comment);
	} catch( e9 ) {
		haxe_CallStack.lastException = e9;
		var e10 = ((e9) instanceof js__$Boot_HaxeError) ? e9.val : e9;
		if(((e10) instanceof haxe_io_Eof)) {
			var e11 = e10;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnclosedComment,haxeparser_HaxeLexer.mkPos(pmin3)));
		} else {
			throw e9;
		}
	}
	var token3 = haxeparser_HaxeLexer.mk(lexer59,haxeparser_TokenDef.Comment(haxeparser_HaxeLexer.buf.b));
	token3.pos.min = pmin3.pmin;
	return token3;
}},{ rule : "(#)(_*[a-z][a-zA-Z0-9_]*|_+|_+[0-9][_a-zA-Z0-9]*)", func : function(lexer60) {
	return haxeparser_HaxeLexer.mk(lexer60,haxeparser_TokenDef.Sharp(HxOverrides.substr(lexer60.current,1,null)));
}},{ rule : "$[_a-zA-Z0-9]*", func : function(lexer61) {
	return haxeparser_HaxeLexer.mk(lexer61,haxeparser_TokenDef.Dollar(HxOverrides.substr(lexer61.current,1,null)));
}},{ rule : "_*[a-z][a-zA-Z0-9_]*|_+|_+[0-9][_a-zA-Z0-9]*", func : function(lexer62) {
	var key = lexer62.current;
	var _this = haxeparser_HaxeLexer.keywords;
	var kwd = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(kwd != null) {
		return haxeparser_HaxeLexer.mk(lexer62,haxeparser_TokenDef.Kwd(kwd));
	} else {
		return haxeparser_HaxeLexer.mk(lexer62,haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent(lexer62.current)));
	}
}},{ rule : "_*[A-Z][a-zA-Z0-9_]*", func : function(lexer63) {
	return haxeparser_HaxeLexer.mk(lexer63,haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent(lexer63.current)));
}}],"tok");
haxeparser_HaxeLexer.string = hxparse_Lexer.buildRuleset([{ rule : "\\\\\\\\", func : function(lexer) {
	haxeparser_HaxeLexer.buf.b += "\\\\";
	return lexer.token(haxeparser_HaxeLexer.string);
}},{ rule : "\\\\", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += "\\";
	return lexer1.token(haxeparser_HaxeLexer.string);
}},{ rule : "\\\\\"", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += "\"";
	return lexer2.token(haxeparser_HaxeLexer.string);
}},{ rule : "\"", func : function(lexer3) {
	return new hxparse_Position(lexer3.source,lexer3.pos - lexer3.current.length,lexer3.pos).pmax;
}},{ rule : "[^\\\\\"]+", func : function(lexer4) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer4.current);
	return lexer4.token(haxeparser_HaxeLexer.string);
}}],"string");
haxeparser_HaxeLexer.string2 = hxparse_Lexer.buildRuleset([{ rule : "\\\\\\\\", func : function(lexer) {
	haxeparser_HaxeLexer.buf.b += "\\\\";
	return lexer.token(haxeparser_HaxeLexer.string2);
}},{ rule : "\\\\", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += "\\";
	return lexer1.token(haxeparser_HaxeLexer.string2);
}},{ rule : "\\\\'", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += "'";
	return lexer2.token(haxeparser_HaxeLexer.string2);
}},{ rule : "'", func : function(lexer3) {
	return new hxparse_Position(lexer3.source,lexer3.pos - lexer3.current.length,lexer3.pos).pmax;
}},{ rule : "($$)|(\\$)|$", func : function(lexer4) {
	haxeparser_HaxeLexer.buf.b += "$";
	return lexer4.token(haxeparser_HaxeLexer.string2);
}},{ rule : "${", func : function(lexer5) {
	var pmin = new hxparse_Position(lexer5.source,lexer5.pos - lexer5.current.length,lexer5.pos);
	haxeparser_HaxeLexer.buf.b += Std.string(lexer5.current);
	try {
		lexer5.token(haxeparser_HaxeLexer.codeString);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(((e1) instanceof haxe_io_Eof)) {
			var e2 = e1;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnclosedCode,haxeparser_HaxeLexer.mkPos(pmin)));
		} else {
			throw e;
		}
	}
	return lexer5.token(haxeparser_HaxeLexer.string2);
}},{ rule : "[^$\\\\']+", func : function(lexer6) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer6.current);
	return lexer6.token(haxeparser_HaxeLexer.string2);
}}],"string2");
haxeparser_HaxeLexer.codeString = hxparse_Lexer.buildRuleset([{ rule : "{|/", func : function(lexer) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer.current);
	lexer.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "}", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer1.current);
	return;
}},{ rule : "\"", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += String.fromCodePoint(34);
	var pmin = new hxparse_Position(lexer2.source,lexer2.pos - lexer2.current.length,lexer2.pos);
	try {
		lexer2.token(haxeparser_HaxeLexer.string);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(((e1) instanceof haxe_io_Eof)) {
			var e2 = e1;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedString,haxeparser_HaxeLexer.mkPos(pmin)));
		} else {
			throw e;
		}
	}
	haxeparser_HaxeLexer.buf.b += String.fromCodePoint(34);
	lexer2.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "'", func : function(lexer3) {
	haxeparser_HaxeLexer.buf.b += String.fromCodePoint(39);
	var pmin1 = new hxparse_Position(lexer3.source,lexer3.pos - lexer3.current.length,lexer3.pos);
	try {
		lexer3.token(haxeparser_HaxeLexer.string2);
	} catch( e3 ) {
		haxe_CallStack.lastException = e3;
		var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
		if(((e4) instanceof haxe_io_Eof)) {
			var e5 = e4;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedString,haxeparser_HaxeLexer.mkPos(pmin1)));
		} else {
			throw e3;
		}
	}
	haxeparser_HaxeLexer.buf.b += String.fromCodePoint(39);
	lexer3.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "/\\*", func : function(lexer4) {
	var pmin2 = new hxparse_Position(lexer4.source,lexer4.pos - lexer4.current.length,lexer4.pos);
	try {
		lexer4.token(haxeparser_HaxeLexer.comment);
	} catch( e6 ) {
		haxe_CallStack.lastException = e6;
		var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
		if(((e7) instanceof haxe_io_Eof)) {
			var e8 = e7;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnclosedComment,haxeparser_HaxeLexer.mkPos(pmin2)));
		} else {
			throw e6;
		}
	}
	lexer4.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "//[^\n\r]*", func : function(lexer5) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer5.current);
	lexer5.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "[^/\"'{}\n\r]+", func : function(lexer6) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer6.current);
	lexer6.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "[\r\n\t ]+", func : function(lexer7) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer7.current);
	lexer7.token(haxeparser_HaxeLexer.codeString);
	return;
}}],"codeString");
haxeparser_HaxeLexer.comment = hxparse_Lexer.buildRuleset([{ rule : "*/", func : function(lexer) {
	return new hxparse_Position(lexer.source,lexer.pos - lexer.current.length,lexer.pos).pmax;
}},{ rule : "*", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += "*";
	return lexer1.token(haxeparser_HaxeLexer.comment);
}},{ rule : "[^\\*]+", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer2.current);
	return lexer2.token(haxeparser_HaxeLexer.comment);
}}],"comment");
haxeparser_HaxeLexer.regexp = hxparse_Lexer.buildRuleset([{ rule : "\\\\/", func : function(lexer) {
	haxeparser_HaxeLexer.buf.b += "/";
	return lexer.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\r", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += "\r";
	return lexer1.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\n", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += "\n";
	return lexer2.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\t", func : function(lexer3) {
	haxeparser_HaxeLexer.buf.b += "\t";
	return lexer3.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\[\\\\$\\.*+\\^|{}\\[\\]()?\\-0-9]", func : function(lexer4) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer4.current);
	return lexer4.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\[wWbBsSdDx]", func : function(lexer5) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer5.current);
	return lexer5.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "/", func : function(lexer6) {
	return lexer6.token(haxeparser_HaxeLexer.regexp_options);
}},{ rule : "[^\\\\/\r\n]+", func : function(lexer7) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer7.current);
	return lexer7.token(haxeparser_HaxeLexer.regexp);
}}],"regexp");
haxeparser_HaxeLexer.regexp_options = hxparse_Lexer.buildRuleset([{ rule : "[gimsu]*", func : function(lexer) {
	return { pmax : new hxparse_Position(lexer.source,lexer.pos - lexer.current.length,lexer.pos).pmax, opt : lexer.current};
}}],"regexp_options");
markdown_BlockSyntax.RE_EMPTY = new EReg("^([ \\t]*)$","");
markdown_BlockSyntax.RE_SETEXT = new EReg("^((=+)|(-+))$","");
markdown_BlockSyntax.RE_HEADER = new EReg("^(#{1,6})(.*?)( +#* *)?$","");
markdown_BlockSyntax.RE_BLOCKQUOTE = new EReg("^[ ]{0,3}>[ ]?(.*)$","");
markdown_BlockSyntax.RE_INDENT = new EReg("^(?:    |\t)(.*)$","");
markdown_BlockSyntax.RE_CODE = new EReg("^```(\\w*)\\s*$","");
markdown_BlockSyntax.RE_HR = new EReg("^[ ]{0,3}((-+[ ]{0,2}){3,}|(_+[ ]{0,2}){3,}|(\\*+[ ]{0,2}){3,})$","");
markdown_BlockSyntax.RE_HTML = new EReg("^<[ ]*\\w+[ >]","");
markdown_BlockSyntax.RE_UL = new EReg("^[ ]{0,3}[*+-][ \\t]+(.*)$","");
markdown_BlockSyntax.RE_OL = new EReg("^[ ]{0,3}\\d+\\.[ \\t]+(.*)$","");
markdown_TableSyntax.TABLE_PATTERN = new EReg("^(.+?:?\\|:?)+(.+)$","");
markdown_TableSyntax.CELL_PATTERN = new EReg("(\\|)?([^\\|]+)(\\|)?","g");
markdown_HtmlRenderer.BLOCK_TAGS = new EReg("blockquote|h1|h2|h3|h4|h5|h6|hr|p|pre","");
markdown_HtmlRenderer.attributeOrder = ["src","alt"];
markdown_LinkSyntax.linkPattern = "\\](?:(" + "\\s?\\[([^\\]]*)\\]" + "|" + "\\s?\\(([^ )]+)(?:[ ]*\"([^\"]+)\"|)\\)" + ")|)";
markdown_ImgSyntax.linkPattern = "\\](?:(" + "\\s?\\[([^\\]]*)\\]" + "|" + "\\s?\\(([^ )]+)(?:[ ]*\"([^\"]+)\"|)\\)" + ")|)";
markdown_InlineParser.defaultSyntaxes = [new markdown_AutolinkSyntaxWithoutBrackets(),new markdown_TextSyntax(" {2,}\n","<br />\n"),new markdown_TextSyntax("\\s*[A-Za-z0-9]+"),new markdown_AutolinkSyntax(),new markdown_LinkSyntax(),new markdown_ImgSyntax(),new markdown_TextSyntax(" \\* "),new markdown_TextSyntax(" _ "),new markdown_TextSyntax("&[#a-zA-Z0-9]*;"),new markdown_TextSyntax("&","&amp;"),new markdown_TextSyntax("<(?:!--[ ]*|/)?\\w+.*?>"),new markdown_TextSyntax("<","&lt;"),new markdown_TagSyntax("\\*\\*","strong"),new markdown_TagSyntax("__","strong"),new markdown_TagSyntax("\\*","em"),new markdown_TagSyntax("\\b_","em","_\\b"),new markdown_CodeSyntax("``\\s?((?:.|\\n)*?)\\s?``"),new markdown_CodeSyntax("`([^`]*)`")];
tokentree_TokenStream.MODE = tokentree_TokenStreamMode.STRICT;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
