
> **Note**: whitespace policies can be overruled by code parts preceeding or following a whitespace location,
> because these code parts might have whitespace policies that contradict their neighbours.

---

{
    "whitespace": {
		"colonPolicy": "none",
		"caseColonPolicy": "onlyAfter",
		"objectFieldColonPolicy": "after",
		"typeHintColonPolicy": "none",
		"typeCheckColonPolicy": "around",
		"ternaryPolicy": "around"
    }
}

---

class Main {
	function test(param1:Int,param2:Array<String>, callback:(index:Int)->String) {

		switch((param1:Float)) {
			case _: doSomething();
		}
		return {x:10, y:20, z:30}
	}
	function test2(param1:Int) {
		return (param1 < 100)?true:false;
	}
	function foo():Void {
		final test:Void->Void = () -> trace(1);
		final test:() -> Void = () -> trace(1);
		final obj:{f: Int} = {f: 1};
		final obj:{f: {f: Int}} = {f: {f: 1}};
		final int:Int = 1;
	}
}

extern class TouchEvent extends Event {
	public function new(isTouchPointCanceled:Bool = false
		#if air, commandKey:Bool = false, controlKey:Bool = false, ?timestamp:Float,
		?touchIntent:TouchEventIntent, ?samples:flash.utils.ByteArray,
		isTouchPointCanceled:Bool = false #end);
}

typedef Type = {f:Int}
typedef Type = {f:{f:Int}}

